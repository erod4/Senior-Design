
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b344  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000133a0  0800b528  0800b528  0000c528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e8c8  0801e8c8  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0801e8c8  0801e8c8  0001f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e8d0  0801e8d0  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e8d0  0801e8d0  0001f8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e8d4  0801e8d4  0001f8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0801e8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001710  20000218  0801eaf0  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001928  0801eaf0  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e57  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047bb  00000000  00000000  0004509f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  00049860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ac  00000000  00000000  0004b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024437  00000000  00000000  0004c6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020c3d  00000000  00000000  00070adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef898  00000000  00000000  00091718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00180fb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008140  00000000  00000000  00181068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001891a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000038a2  00000000  00000000  0018920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000198  00000000  00000000  0018caae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000218 	.word	0x20000218
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b50c 	.word	0x0800b50c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000021c 	.word	0x2000021c
 800021c:	0800b50c 	.word	0x0800b50c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <uart_init>:
//#include "stm32g4xx_hal_uart.h"

UART_HandleTypeDef huart2;

void uart_init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Init_Struct={0};
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]


	//Enable clock access for GPIO A (PA2 & PA3)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <uart_init+0xa8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <uart_init+0xa8>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <uart_init+0xa8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();
 8000f16:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <uart_init+0xa8>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f90 <uart_init+0xa8>)
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <uart_init+0xa8>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
	//Configure pins to act as alternate funcs pins (UART)
	GPIO_Init_Struct.Pin=GPIO_PIN_2|GPIO_PIN_3;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	60fb      	str	r3, [r7, #12]
	GPIO_Init_Struct.Mode=GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
	GPIO_Init_Struct.Alternate=GPIO_AF7_USART2;
 8000f36:	2307      	movs	r3, #7
 8000f38:	61fb      	str	r3, [r7, #28]
	GPIO_Init_Struct.Pull=GPIO_NOPULL; //No Pull-up or Pull-down activation
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
	GPIO_Init_Struct.Speed=GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA,&GPIO_Init_Struct);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4c:	f003 fd62 	bl	8004a14 <HAL_GPIO_Init>

	//configure UART

	huart2.Instance=USART2;
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <uart_init+0xac>)
 8000f52:	4a11      	ldr	r2, [pc, #68]	@ (8000f98 <uart_init+0xb0>)
 8000f54:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate=250000;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <uart_init+0xac>)
 8000f58:	4a10      	ldr	r2, [pc, #64]	@ (8000f9c <uart_init+0xb4>)
 8000f5a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength=UART_WORDLENGTH_8B;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <uart_init+0xac>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits=UART_STOPBITS_1;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <uart_init+0xac>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity=UART_PARITY_NONE;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <uart_init+0xac>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode=UART_MODE_TX;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <uart_init+0xac>)
 8000f70:	2208      	movs	r2, #8
 8000f72:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl=UART_HWCONTROL_NONE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <uart_init+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling=UART_OVERSAMPLING_16;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <uart_init+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <uart_init+0xac>)
 8000f82:	f005 fe0b 	bl	8006b9c <HAL_UART_Init>

}
 8000f86:	bf00      	nop
 8000f88:	3720      	adds	r7, #32
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	20000234 	.word	0x20000234
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	0003d090 	.word	0x0003d090

08000fa0 <__io_putchar>:
/**
 * Re-targets printf
 * !!!DO NOT TOUCH!!!
 */
int __io_putchar(int ch)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 8000fa8:	1d39      	adds	r1, r7, #4
 8000faa:	230a      	movs	r3, #10
 8000fac:	2201      	movs	r2, #1
 8000fae:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <__io_putchar+0x20>)
 8000fb0:	f005 fe4e 	bl	8006c50 <HAL_UART_Transmit>
	return ch;
 8000fb4:	687b      	ldr	r3, [r7, #4]

}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000234 	.word	0x20000234

08000fc4 <init_fft>:
	arm_rfft_q15(&T, psrc,pdst);
}

// Initialize FFT
void init_fft(uint16_t fft_length)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	arm_status status;
	status = arm_rfft_fast_init_f32(&S, fft_length);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <init_fft+0x30>)
 8000fd4:	f006 fcae 	bl	8007934 <arm_rfft_fast_init_f32>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]


	  if ( status != ARM_MATH_SUCCESS)
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <init_fft+0x26>
	  {
		printf("Error in FFT Init\r\n");
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <init_fft+0x34>)
 8000fe6:	f008 fabb 	bl	8009560 <puts>
	  }
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002c8 	.word	0x200002c8
 8000ff8:	0800b528 	.word	0x0800b528

08000ffc <perform_fft>:

// Perform FFT
void perform_fft(float32_t* psrc, float32_t* pdst)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]


	arm_rfft_fast_f32(&S, psrc, pdst, 0);
 8001006:	2300      	movs	r3, #0
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <perform_fft+0x20>)
 800100e:	f006 fd75 	bl	8007afc <arm_rfft_fast_f32>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002c8 	.word	0x200002c8

08001020 <lowpass_IIR_filter>:
#include "iir.h"
#include <stdint.h>
#include <math.h>
int lowpass_IIR_filter(int input, long* filter_reg)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	long filter_reg_store = *filter_reg;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	60fb      	str	r3, [r7, #12]

	// Update register with current input
	*filter_reg = *filter_reg - (*filter_reg >> FILTER_SHIFT) + input;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	111b      	asrs	r3, r3, #4
 800103a:	1ad2      	subs	r2, r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	441a      	add	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	601a      	str	r2, [r3, #0]

	// Return the filtered result
	return (int)((*filter_reg + filter_reg_store) >> (FILTER_SHIFT + 1));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	115b      	asrs	r3, r3, #5
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SPI_init>:
     365, 373, 394, 402, 423, 431, 452, 460
 };
uint16_t DMA_MIN_SIZE = 16;
uint16_t disp_buf[320 * 5];

void SPI_init(void) {
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  // Use the LCD_CS_Pin macro instead of a literal pin number.
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2110      	movs	r1, #16
 8001062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001066:	f003 fe57 	bl	8004d18 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}

0800106e <LCD_reset>:

void LCD_reset(void) {
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  // Use LCD_RST_Pin macro.
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2102      	movs	r1, #2
 8001076:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107a:	f003 fe4d 	bl	8004d18 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001082:	f001 fac7 	bl	8002614 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2102      	movs	r1, #2
 800108a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108e:	f003 fe43 	bl	8004d18 <HAL_GPIO_WritePin>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <transferComm>:

void transferComm(uint8_t send_data) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  // Set RS low (command mode) and use LCD_CS_Pin for chip select.
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010aa:	f003 fe35 	bl	8004d18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b6:	f003 fe2f 	bl	8004d18 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &send_data, 1, HAL_MAX_DELAY);
 80010ba:	1df9      	adds	r1, r7, #7
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010c0:	2201      	movs	r2, #1
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <transferComm+0x44>)
 80010c4:	f004 ff09 	bl	8005eda <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2110      	movs	r1, #16
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d0:	f003 fe22 	bl	8004d18 <HAL_GPIO_WritePin>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200002e0 	.word	0x200002e0

080010e0 <transferData>:

void transferData(uint8_t send_data) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  // Set RS high (data mode).
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2101      	movs	r1, #1
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f2:	f003 fe11 	bl	8004d18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2110      	movs	r1, #16
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fe:	f003 fe0b 	bl	8004d18 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &send_data, 1, HAL_MAX_DELAY);
 8001102:	1df9      	adds	r1, r7, #7
 8001104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001108:	2201      	movs	r2, #1
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <transferData+0x44>)
 800110c:	f004 fee5 	bl	8005eda <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f003 fdfe 	bl	8004d18 <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200002e0 	.word	0x200002e0

08001128 <LCD_init>:

void LCD_init(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  transferComm(0xF0); // Command set control
 800112c:	20f0      	movs	r0, #240	@ 0xf0
 800112e:	f7ff ffb3 	bl	8001098 <transferComm>
  transferData(0xC3); // Enable command 2 part I
 8001132:	20c3      	movs	r0, #195	@ 0xc3
 8001134:	f7ff ffd4 	bl	80010e0 <transferData>

  transferComm(0xF0);
 8001138:	20f0      	movs	r0, #240	@ 0xf0
 800113a:	f7ff ffad 	bl	8001098 <transferComm>
  transferData(0x96); // Enable command 2 part II
 800113e:	2096      	movs	r0, #150	@ 0x96
 8001140:	f7ff ffce 	bl	80010e0 <transferData>

  transferComm(0x36); // Memory data access control
 8001144:	2036      	movs	r0, #54	@ 0x36
 8001146:	f7ff ffa7 	bl	8001098 <transferComm>
  transferData(0x48);
 800114a:	2048      	movs	r0, #72	@ 0x48
 800114c:	f7ff ffc8 	bl	80010e0 <transferData>
  // Set row address order, column order, exchange, refresh direction, etc.

  transferComm(0x3A); // Interface pixel format
 8001150:	203a      	movs	r0, #58	@ 0x3a
 8001152:	f7ff ffa1 	bl	8001098 <transferComm>
  transferData(0x05); // 16 bits per pixel
 8001156:	2005      	movs	r0, #5
 8001158:	f7ff ffc2 	bl	80010e0 <transferData>

  transferComm(0xB0); // Interface mode control
 800115c:	20b0      	movs	r0, #176	@ 0xb0
 800115e:	f7ff ff9b 	bl	8001098 <transferComm>
  transferData(0x80);
 8001162:	2080      	movs	r0, #128	@ 0x80
 8001164:	f7ff ffbc 	bl	80010e0 <transferData>

  transferComm(0xB6); // Display function control
 8001168:	20b6      	movs	r0, #182	@ 0xb6
 800116a:	f7ff ff95 	bl	8001098 <transferComm>
  transferData(0x00);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff ffb6 	bl	80010e0 <transferData>
  transferData(0x02);
 8001174:	2002      	movs	r0, #2
 8001176:	f7ff ffb3 	bl	80010e0 <transferData>

  transferComm(0xB5); // Blanking porch control
 800117a:	20b5      	movs	r0, #181	@ 0xb5
 800117c:	f7ff ff8c 	bl	8001098 <transferComm>
  transferData(0x02);
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff ffad 	bl	80010e0 <transferData>
  transferData(0x03);
 8001186:	2003      	movs	r0, #3
 8001188:	f7ff ffaa 	bl	80010e0 <transferData>
  transferData(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ffa7 	bl	80010e0 <transferData>
  transferData(0x04);
 8001192:	2004      	movs	r0, #4
 8001194:	f7ff ffa4 	bl	80010e0 <transferData>

  transferComm(0xB1); // Frame rate control
 8001198:	20b1      	movs	r0, #177	@ 0xb1
 800119a:	f7ff ff7d 	bl	8001098 <transferComm>
  transferData(0x80);
 800119e:	2080      	movs	r0, #128	@ 0x80
 80011a0:	f7ff ff9e 	bl	80010e0 <transferData>
  transferData(0x10);
 80011a4:	2010      	movs	r0, #16
 80011a6:	f7ff ff9b 	bl	80010e0 <transferData>

  transferComm(0xB4); // Display inversion control
 80011aa:	20b4      	movs	r0, #180	@ 0xb4
 80011ac:	f7ff ff74 	bl	8001098 <transferComm>
  transferData(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff ff95 	bl	80010e0 <transferData>

  transferComm(0xB7); // Entry mode set
 80011b6:	20b7      	movs	r0, #183	@ 0xb7
 80011b8:	f7ff ff6e 	bl	8001098 <transferComm>
  transferData(0xC6);
 80011bc:	20c6      	movs	r0, #198	@ 0xc6
 80011be:	f7ff ff8f 	bl	80010e0 <transferData>

  transferComm(0xC5); // VCOM control
 80011c2:	20c5      	movs	r0, #197	@ 0xc5
 80011c4:	f7ff ff68 	bl	8001098 <transferComm>
  transferData(0x1C);
 80011c8:	201c      	movs	r0, #28
 80011ca:	f7ff ff89 	bl	80010e0 <transferData>

  transferComm(0xE4);
 80011ce:	20e4      	movs	r0, #228	@ 0xe4
 80011d0:	f7ff ff62 	bl	8001098 <transferComm>
  transferData(0x31);
 80011d4:	2031      	movs	r0, #49	@ 0x31
 80011d6:	f7ff ff83 	bl	80010e0 <transferData>

  transferComm(0xE8); // Display output control adjust
 80011da:	20e8      	movs	r0, #232	@ 0xe8
 80011dc:	f7ff ff5c 	bl	8001098 <transferComm>
  transferData(0x40);
 80011e0:	2040      	movs	r0, #64	@ 0x40
 80011e2:	f7ff ff7d 	bl	80010e0 <transferData>
  transferData(0x8A);
 80011e6:	208a      	movs	r0, #138	@ 0x8a
 80011e8:	f7ff ff7a 	bl	80010e0 <transferData>
  transferData(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ff77 	bl	80010e0 <transferData>
  transferData(0x00);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff ff74 	bl	80010e0 <transferData>
  transferData(0x29);
 80011f8:	2029      	movs	r0, #41	@ 0x29
 80011fa:	f7ff ff71 	bl	80010e0 <transferData>
  transferData(0x19);
 80011fe:	2019      	movs	r0, #25
 8001200:	f7ff ff6e 	bl	80010e0 <transferData>
  transferData(0xA5);
 8001204:	20a5      	movs	r0, #165	@ 0xa5
 8001206:	f7ff ff6b 	bl	80010e0 <transferData>
  transferData(0x33);
 800120a:	2033      	movs	r0, #51	@ 0x33
 800120c:	f7ff ff68 	bl	80010e0 <transferData>

  transferComm(0xC2); // Power control 3
 8001210:	20c2      	movs	r0, #194	@ 0xc2
 8001212:	f7ff ff41 	bl	8001098 <transferComm>
  transferComm(0xA7);
 8001216:	20a7      	movs	r0, #167	@ 0xa7
 8001218:	f7ff ff3e 	bl	8001098 <transferComm>

  transferComm(0xE0); // Positive gamma control
 800121c:	20e0      	movs	r0, #224	@ 0xe0
 800121e:	f7ff ff3b 	bl	8001098 <transferComm>
  transferData(0xF0);
 8001222:	20f0      	movs	r0, #240	@ 0xf0
 8001224:	f7ff ff5c 	bl	80010e0 <transferData>
  transferData(0x09);
 8001228:	2009      	movs	r0, #9
 800122a:	f7ff ff59 	bl	80010e0 <transferData>
  transferData(0x13);
 800122e:	2013      	movs	r0, #19
 8001230:	f7ff ff56 	bl	80010e0 <transferData>
  transferData(0x12);
 8001234:	2012      	movs	r0, #18
 8001236:	f7ff ff53 	bl	80010e0 <transferData>
  transferData(0x12);
 800123a:	2012      	movs	r0, #18
 800123c:	f7ff ff50 	bl	80010e0 <transferData>
  transferData(0x2B);
 8001240:	202b      	movs	r0, #43	@ 0x2b
 8001242:	f7ff ff4d 	bl	80010e0 <transferData>
  transferData(0x3C);
 8001246:	203c      	movs	r0, #60	@ 0x3c
 8001248:	f7ff ff4a 	bl	80010e0 <transferData>
  transferData(0x44);
 800124c:	2044      	movs	r0, #68	@ 0x44
 800124e:	f7ff ff47 	bl	80010e0 <transferData>
  transferData(0x4B);
 8001252:	204b      	movs	r0, #75	@ 0x4b
 8001254:	f7ff ff44 	bl	80010e0 <transferData>
  transferData(0x1B);
 8001258:	201b      	movs	r0, #27
 800125a:	f7ff ff41 	bl	80010e0 <transferData>
  transferData(0x18);
 800125e:	2018      	movs	r0, #24
 8001260:	f7ff ff3e 	bl	80010e0 <transferData>
  transferData(0x17);
 8001264:	2017      	movs	r0, #23
 8001266:	f7ff ff3b 	bl	80010e0 <transferData>
  transferData(0x1D);
 800126a:	201d      	movs	r0, #29
 800126c:	f7ff ff38 	bl	80010e0 <transferData>
  transferData(0x21);
 8001270:	2021      	movs	r0, #33	@ 0x21
 8001272:	f7ff ff35 	bl	80010e0 <transferData>

  transferComm(0xE1); // Negative gamma control
 8001276:	20e1      	movs	r0, #225	@ 0xe1
 8001278:	f7ff ff0e 	bl	8001098 <transferComm>
  transferData(0xF0);
 800127c:	20f0      	movs	r0, #240	@ 0xf0
 800127e:	f7ff ff2f 	bl	80010e0 <transferData>
  transferData(0x09);
 8001282:	2009      	movs	r0, #9
 8001284:	f7ff ff2c 	bl	80010e0 <transferData>
  transferData(0x13);
 8001288:	2013      	movs	r0, #19
 800128a:	f7ff ff29 	bl	80010e0 <transferData>
  transferData(0x0C);
 800128e:	200c      	movs	r0, #12
 8001290:	f7ff ff26 	bl	80010e0 <transferData>
  transferData(0x0D);
 8001294:	200d      	movs	r0, #13
 8001296:	f7ff ff23 	bl	80010e0 <transferData>
  transferData(0x27);
 800129a:	2027      	movs	r0, #39	@ 0x27
 800129c:	f7ff ff20 	bl	80010e0 <transferData>
  transferData(0x3B);
 80012a0:	203b      	movs	r0, #59	@ 0x3b
 80012a2:	f7ff ff1d 	bl	80010e0 <transferData>
  transferData(0x44);
 80012a6:	2044      	movs	r0, #68	@ 0x44
 80012a8:	f7ff ff1a 	bl	80010e0 <transferData>
  transferData(0x4D);
 80012ac:	204d      	movs	r0, #77	@ 0x4d
 80012ae:	f7ff ff17 	bl	80010e0 <transferData>
  transferData(0x0B);
 80012b2:	200b      	movs	r0, #11
 80012b4:	f7ff ff14 	bl	80010e0 <transferData>
  transferData(0x17);
 80012b8:	2017      	movs	r0, #23
 80012ba:	f7ff ff11 	bl	80010e0 <transferData>
  transferData(0x17);
 80012be:	2017      	movs	r0, #23
 80012c0:	f7ff ff0e 	bl	80010e0 <transferData>
  transferData(0x1D);
 80012c4:	201d      	movs	r0, #29
 80012c6:	f7ff ff0b 	bl	80010e0 <transferData>
  transferData(0x21);
 80012ca:	2021      	movs	r0, #33	@ 0x21
 80012cc:	f7ff ff08 	bl	80010e0 <transferData>

  transferComm(0xF0);
 80012d0:	20f0      	movs	r0, #240	@ 0xf0
 80012d2:	f7ff fee1 	bl	8001098 <transferComm>
  transferData(0x3C);
 80012d6:	203c      	movs	r0, #60	@ 0x3c
 80012d8:	f7ff ff02 	bl	80010e0 <transferData>

  transferComm(0xF0);
 80012dc:	20f0      	movs	r0, #240	@ 0xf0
 80012de:	f7ff fedb 	bl	8001098 <transferComm>
  transferData(0x69);
 80012e2:	2069      	movs	r0, #105	@ 0x69
 80012e4:	f7ff fefc 	bl	80010e0 <transferData>

  transferComm(0x13); // Normal display mode ON
 80012e8:	2013      	movs	r0, #19
 80012ea:	f7ff fed5 	bl	8001098 <transferComm>

  transferComm(0x11); // Exit sleep mode
 80012ee:	2011      	movs	r0, #17
 80012f0:	f7ff fed2 	bl	8001098 <transferComm>

  transferComm(0x29); // Display ON
 80012f4:	2029      	movs	r0, #41	@ 0x29
 80012f6:	f7ff fecf 	bl	8001098 <transferComm>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <LCD_Fill_Color>:
}

void eraseBar(uint16_t bar_x, uint16_t bar_y) {
  drawRectangle(bar_x, bar_x , bar_y, MAX_SCREEN_HEIGHT, 0x00, 0x00);
}
void LCD_Fill_Color(uint16_t color) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
    // Set the address window for the entire screen.
    // Columns: 0 to 319 (0x0000 to 0x013F)
    transferComm(0x2A);
 800130a:	202a      	movs	r0, #42	@ 0x2a
 800130c:	f7ff fec4 	bl	8001098 <transferComm>
    transferData(0x00);   // Column start high byte
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fee5 	bl	80010e0 <transferData>
    transferData(0x00);   // Column start low byte
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff fee2 	bl	80010e0 <transferData>
    transferData(0x01);   // Column end high byte (0x01)
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fedf 	bl	80010e0 <transferData>
    transferData(0x3F);   // Column end low byte (0x3F = 63, so 0x013F = 319)
 8001322:	203f      	movs	r0, #63	@ 0x3f
 8001324:	f7ff fedc 	bl	80010e0 <transferData>

    // Rows: 0 to 479 (0x0000 to 0x01DF)
    transferComm(0x2B);
 8001328:	202b      	movs	r0, #43	@ 0x2b
 800132a:	f7ff feb5 	bl	8001098 <transferComm>
    transferData(0x00);   // Row start high byte
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fed6 	bl	80010e0 <transferData>
    transferData(0x00);   // Row start low byte
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fed3 	bl	80010e0 <transferData>
    transferData(0x01);   // Row end high byte (0x01)
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff fed0 	bl	80010e0 <transferData>
    transferData(0xDF);   // Row end low byte (0xDF = 223, so 0x01DF = 479)
 8001340:	20df      	movs	r0, #223	@ 0xdf
 8001342:	f7ff fecd 	bl	80010e0 <transferData>

    // Begin writing pixel data.
    transferComm(0x2C);
 8001346:	202c      	movs	r0, #44	@ 0x2c
 8001348:	f7ff fea6 	bl	8001098 <transferComm>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	// Set LCD_CS pin low to use LCD
 800134c:	2200      	movs	r2, #0
 800134e:	2110      	movs	r1, #16
 8001350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001354:	f003 fce0 	bl	8004d18 <HAL_GPIO_WritePin>

    // Pre-fill the DMA buffer.
    // disp_buf is declared as: uint16_t disp_buf[320 * HOR_LEN];
    // HOR_LEN defines the number of rows processed per DMA transfer.
    uint32_t totalPixelsPerChunk = 320UL * 5;
 8001358:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800135c:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < totalPixelsPerChunk; i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e007      	b.n	8001374 <LCD_Fill_Color+0x74>
        disp_buf[i] = color;
 8001364:	4913      	ldr	r1, [pc, #76]	@ (80013b4 <LCD_Fill_Color+0xb4>)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t i = 0; i < totalPixelsPerChunk; i++) {
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d3f3      	bcc.n	8001364 <LCD_Fill_Color+0x64>
    }

    // Calculate how many chunks (each of HOR_LEN rows) are needed.
    uint32_t numChunks = 480UL / 5;
 800137c:	2360      	movs	r3, #96	@ 0x60
 800137e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < numChunks; i++) {
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	e007      	b.n	8001396 <LCD_Fill_Color+0x96>
        dma_write_data((uint8_t*)disp_buf, sizeof(disp_buf));
 8001386:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 800138a:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <LCD_Fill_Color+0xb4>)
 800138c:	f000 f814 	bl	80013b8 <dma_write_data>
    for (uint32_t i = 0; i < numChunks; i++) {
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	3301      	adds	r3, #1
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3f3      	bcc.n	8001386 <LCD_Fill_Color+0x86>
    }
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2110      	movs	r1, #16
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a6:	f003 fcb7 	bl	8004d18 <HAL_GPIO_WritePin>

}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000404 	.word	0x20000404

080013b8 <dma_write_data>:
void dma_write_data(uint8_t *buff, size_t buff_size)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);	// Set LCD_RS pin low to set as COMMAND
 80013c2:	2201      	movs	r2, #1
 80013c4:	2101      	movs	r1, #1
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ca:	f003 fca5 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	// Set LCD_CS pin low to use LCD
 80013ce:	2200      	movs	r2, #0
 80013d0:	2110      	movs	r1, #16
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d6:	f003 fc9f 	bl	8004d18 <HAL_GPIO_WritePin>
	while(buff_size>0)
 80013da:	e02a      	b.n	8001432 <dma_write_data+0x7a>

	{
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e2:	4293      	cmp	r3, r2
 80013e4:	bf28      	it	cs
 80013e6:	4613      	movcs	r3, r2
 80013e8:	81fb      	strh	r3, [r7, #14]
		if (DMA_MIN_SIZE <= buff_size)
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <dma_write_data+0x94>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d30e      	bcc.n	8001414 <dma_write_data+0x5c>
					{
						if(HAL_SPI_Transmit_DMA(&hspi1, buff, chunk_size))
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	461a      	mov	r2, r3
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4814      	ldr	r0, [pc, #80]	@ (8001450 <dma_write_data+0x98>)
 80013fe:	f004 fee3 	bl	80061c8 <HAL_SPI_Transmit_DMA>
						{

						}
						while (hspi1.hdmatx->State != HAL_DMA_STATE_READY)
 8001402:	bf00      	nop
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <dma_write_data+0x98>)
 8001406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001408:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d1f8      	bne.n	8001404 <dma_write_data+0x4c>
 8001412:	e006      	b.n	8001422 <dma_write_data+0x6a>
						{}
					}
					else{
						HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 8001414:	89fa      	ldrh	r2, [r7, #14]
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <dma_write_data+0x98>)
 800141e:	f004 fd5c 	bl	8005eda <HAL_SPI_Transmit>
					}
		buff += chunk_size;
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	603b      	str	r3, [r7, #0]
	while(buff_size>0)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1d1      	bne.n	80013dc <dma_write_data+0x24>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2110      	movs	r1, #16
 800143c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001440:	f003 fc6a 	bl	8004d18 <HAL_GPIO_WritePin>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000040 	.word	0x20000040
 8001450:	200002e0 	.word	0x200002e0

08001454 <LCD_SetAddressWindow>:
void LCD_SetAddressWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	4603      	mov	r3, r0
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	803b      	strh	r3, [r7, #0]
	  uint32_t H_width = xEnd - xStart;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	61fb      	str	r3, [r7, #28]
	  uint32_t V_width = yEnd - yStart;
 800147a:	883a      	ldrh	r2, [r7, #0]
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	61bb      	str	r3, [r7, #24]

	  uint16_t H_start_fixed = xStart;
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	82fb      	strh	r3, [r7, #22]
	  uint16_t V_start_fixed = yStart;
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	82bb      	strh	r3, [r7, #20]
	  uint16_t H_end_fixed = H_start_fixed + H_width - 1;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	b29a      	uxth	r2, r3
 800148e:	8afb      	ldrh	r3, [r7, #22]
 8001490:	4413      	add	r3, r2
 8001492:	b29b      	uxth	r3, r3
 8001494:	3b01      	subs	r3, #1
 8001496:	827b      	strh	r3, [r7, #18]
	  uint16_t V_end_fixed = V_start_fixed + V_width - 1;
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	b29a      	uxth	r2, r3
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	4413      	add	r3, r2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	823b      	strh	r3, [r7, #16]

	  uint8_t H_start_1 = H_start_fixed >> 8;
 80014a6:	8afb      	ldrh	r3, [r7, #22]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	73fb      	strb	r3, [r7, #15]
	  uint8_t H_start_2 = H_start_fixed & 0xFF;
 80014ae:	8afb      	ldrh	r3, [r7, #22]
 80014b0:	73bb      	strb	r3, [r7, #14]
	  uint8_t H_end_1   = H_end_fixed >> 8;
 80014b2:	8a7b      	ldrh	r3, [r7, #18]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	737b      	strb	r3, [r7, #13]
	  uint8_t H_end_2   = H_end_fixed & 0xFF;
 80014ba:	8a7b      	ldrh	r3, [r7, #18]
 80014bc:	733b      	strb	r3, [r7, #12]

	  uint8_t V_start_1 = V_start_fixed >> 8;
 80014be:	8abb      	ldrh	r3, [r7, #20]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	72fb      	strb	r3, [r7, #11]
	  uint8_t V_start_2 = V_start_fixed & 0xFF;
 80014c6:	8abb      	ldrh	r3, [r7, #20]
 80014c8:	72bb      	strb	r3, [r7, #10]
	  uint8_t V_end_1   = V_end_fixed >> 8;
 80014ca:	8a3b      	ldrh	r3, [r7, #16]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	727b      	strb	r3, [r7, #9]
	  uint8_t V_end_2   = V_end_fixed & 0xFF;
 80014d2:	8a3b      	ldrh	r3, [r7, #16]
 80014d4:	723b      	strb	r3, [r7, #8]
		transferComm(0x2A); // Column address set
 80014d6:	202a      	movs	r0, #42	@ 0x2a
 80014d8:	f7ff fdde 	bl	8001098 <transferComm>
		transferData(V_start_1);
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fdfe 	bl	80010e0 <transferData>
		transferData(V_start_2);
 80014e4:	7abb      	ldrb	r3, [r7, #10]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fdfa 	bl	80010e0 <transferData>
		transferData(V_end_1);
 80014ec:	7a7b      	ldrb	r3, [r7, #9]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fdf6 	bl	80010e0 <transferData>
		transferData(V_end_2);
 80014f4:	7a3b      	ldrb	r3, [r7, #8]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fdf2 	bl	80010e0 <transferData>

		transferComm(0x2B); // Row address set
 80014fc:	202b      	movs	r0, #43	@ 0x2b
 80014fe:	f7ff fdcb 	bl	8001098 <transferComm>
		transferData(H_start_1);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fdeb 	bl	80010e0 <transferData>
		transferData(H_start_2);
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fde7 	bl	80010e0 <transferData>
		transferData(H_end_1);
 8001512:	7b7b      	ldrb	r3, [r7, #13]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fde3 	bl	80010e0 <transferData>
		transferData(H_end_2);
 800151a:	7b3b      	ldrb	r3, [r7, #12]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fddf 	bl	80010e0 <transferData>

    // Write memory
    transferComm(0x2C);
 8001522:	202c      	movs	r0, #44	@ 0x2c
 8001524:	f7ff fdb8 	bl	8001098 <transferComm>
}
 8001528:	bf00      	nop
 800152a:	3724      	adds	r7, #36	@ 0x24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}

08001530 <drawRectangleDMA>:
void drawRectangleDMA(uint16_t xStart, uint16_t xEnd, uint16_t yStart, uint16_t yEnd, uint16_t color)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b0bd      	sub	sp, #244	@ 0xf4
 8001534:	af00      	add	r7, sp, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	80fb      	strh	r3, [r7, #6]
 8001542:	4603      	mov	r3, r0
 8001544:	80bb      	strh	r3, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	807b      	strh	r3, [r7, #2]
 800154a:	4613      	mov	r3, r2
 800154c:	803b      	strh	r3, [r7, #0]
    // Calculate width and height (inclusive of both endpoints)
    uint32_t width  = xEnd - xStart + 1;
 800154e:	88ba      	ldrh	r2, [r7, #4]
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	3301      	adds	r3, #1
 8001556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    uint32_t height = yEnd - yStart + 1;
 800155a:	883a      	ldrh	r2, [r7, #0]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	3301      	adds	r3, #1
 8001562:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    uint32_t totalPixels = width * height;
 8001566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800156a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

    // Set the LCD's address window for the rectangle.
    LCD_SetAddressWindow(xStart, yStart, xEnd, yEnd);
 8001576:	883b      	ldrh	r3, [r7, #0]
 8001578:	88ba      	ldrh	r2, [r7, #4]
 800157a:	8879      	ldrh	r1, [r7, #2]
 800157c:	88f8      	ldrh	r0, [r7, #6]
 800157e:	f7ff ff69 	bl	8001454 <LCD_SetAddressWindow>
    // You can adjust CHUNK_SIZE based on available memory and performance.
    #define CHUNK_SIZE 100
    uint16_t chunkBuffer[CHUNK_SIZE];

    // Fill the chunk buffer with the specified color.
    for (uint16_t i = 0; i < CHUNK_SIZE; i++) {
 8001582:	2300      	movs	r3, #0
 8001584:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 8001588:	e00d      	b.n	80015a6 <drawRectangleDMA+0x76>
        chunkBuffer[i] = color;
 800158a:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	33f0      	adds	r3, #240	@ 0xf0
 8001592:	443b      	add	r3, r7
 8001594:	f8b7 2100 	ldrh.w	r2, [r7, #256]	@ 0x100
 8001598:	f823 2ce4 	strh.w	r2, [r3, #-228]
    for (uint16_t i = 0; i < CHUNK_SIZE; i++) {
 800159c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80015a0:	3301      	adds	r3, #1
 80015a2:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 80015a6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80015aa:	2b63      	cmp	r3, #99	@ 0x63
 80015ac:	d9ed      	bls.n	800158a <drawRectangleDMA+0x5a>
    }

    // Calculate how many full chunks and remaining pixels need to be sent.
    uint32_t fullChunks = totalPixels / CHUNK_SIZE;
 80015ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80015b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <drawRectangleDMA+0xf4>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	095b      	lsrs	r3, r3, #5
 80015ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    uint32_t remainder  = totalPixels % CHUNK_SIZE;
 80015be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80015c2:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <drawRectangleDMA+0xf4>)
 80015c4:	fba2 1203 	umull	r1, r2, r2, r3
 80015c8:	0952      	lsrs	r2, r2, #5
 80015ca:	2164      	movs	r1, #100	@ 0x64
 80015cc:	fb01 f202 	mul.w	r2, r1, r2
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    // Send full chunks using DMA.
    for (uint32_t i = 0; i < fullChunks; i++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80015dc:	e00a      	b.n	80015f4 <drawRectangleDMA+0xc4>
        dma_write_data((uint8_t*)chunkBuffer, CHUNK_SIZE * sizeof(uint16_t));
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	21c8      	movs	r1, #200	@ 0xc8
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fee7 	bl	80013b8 <dma_write_data>
    for (uint32_t i = 0; i < fullChunks; i++) {
 80015ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80015f4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80015f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d3ee      	bcc.n	80015de <drawRectangleDMA+0xae>
    }

    // Send any remaining pixels.
    if (remainder > 0) {
 8001600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <drawRectangleDMA+0xea>
        dma_write_data((uint8_t*)chunkBuffer, remainder * sizeof(uint16_t));
 8001608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800160c:	005a      	lsls	r2, r3, #1
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fecf 	bl	80013b8 <dma_write_data>
    }
}
 800161a:	bf00      	nop
 800161c:	37f4      	adds	r7, #244	@ 0xf4
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop
 8001624:	51eb851f 	.word	0x51eb851f

08001628 <updateBarGraph>:

void updateBarGraph(int32_t *barHeights)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af02      	add	r7, sp, #8
 800162e:	6078      	str	r0, [r7, #4]
    // Assume we have 16 bars, so bars_x must have 17 entries.
    // Adjust bars_x if needed so that it covers the entire horizontal range.
    for (uint8_t i = 0; i < 16; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	75fb      	strb	r3, [r7, #23]
 8001634:	e035      	b.n	80016a2 <updateBarGraph+0x7a>
    {
        // Get the x-axis start and end (inclusive) for this bar.
        // Subtract one from xEnd so the columns don’t overlap.
        uint16_t xStart = bars_x[2*i];
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4a1e      	ldr	r2, [pc, #120]	@ (80016b4 <updateBarGraph+0x8c>)
 800163c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001640:	82bb      	strh	r3, [r7, #20]
        uint16_t xEnd   = bars_x[2*i+1] ;
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	3301      	adds	r3, #1
 8001648:	4a1a      	ldr	r2, [pc, #104]	@ (80016b4 <updateBarGraph+0x8c>)
 800164a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164e:	827b      	strh	r3, [r7, #18]

        // First, clear the entire vertical area for this bar column.
        // Here, we assume MAX_SCREEN_HEIGHT is defined (for example, 480).
        drawRectangleDMA(xStart, xEnd, 0, MAX_SCREEN_HEIGHT - 1, BLACK);  // 0x0000 = black
 8001650:	8a79      	ldrh	r1, [r7, #18]
 8001652:	8ab8      	ldrh	r0, [r7, #20]
 8001654:	2300      	movs	r3, #0
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	f240 133f 	movw	r3, #319	@ 0x13f
 800165c:	2200      	movs	r2, #0
 800165e:	f7ff ff67 	bl	8001530 <drawRectangleDMA>

        // Then, draw the new bar.
        // We assume barHeights[i] represents the bar's height in pixels from the bottom.
        if (barHeights[i] > 0)
 8001662:	7dfb      	ldrb	r3, [r7, #23]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	dd15      	ble.n	800169c <updateBarGraph+0x74>
        {

            uint16_t yTop    = MAX_SCREEN_HEIGHT - barHeights[i]<=0?0: MAX_SCREEN_HEIGHT - barHeights[i];
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800167e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001682:	823b      	strh	r3, [r7, #16]

            uint16_t yBottom = MAX_SCREEN_HEIGHT - 1 ;
 8001684:	f240 133f 	movw	r3, #319	@ 0x13f
 8001688:	81fb      	strh	r3, [r7, #14]
            drawRectangleDMA(xStart, xEnd, yTop, yBottom, WHITE);  // 0xFFFF = white (bar color)
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	8a3a      	ldrh	r2, [r7, #16]
 800168e:	8a79      	ldrh	r1, [r7, #18]
 8001690:	8ab8      	ldrh	r0, [r7, #20]
 8001692:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8001696:	9400      	str	r4, [sp, #0]
 8001698:	f7ff ff4a 	bl	8001530 <drawRectangleDMA>
    for (uint8_t i = 0; i < 16; i++)
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	3301      	adds	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d9c6      	bls.n	8001636 <updateBarGraph+0xe>
        }
    }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000000 	.word	0x20000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f000 ff38 	bl	8002532 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 f907 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fabb 	bl	8001c40 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ca:	f000 fa6b 	bl	8001ba4 <MX_DMA_Init>
  MX_SPI1_Init();
 80016ce:	f000 f9f5 	bl	8001abc <MX_SPI1_Init>
  MX_ADC1_Init();
 80016d2:	f000 f93f 	bl	8001954 <MX_ADC1_Init>
  MX_DAC1_Init();
 80016d6:	f000 f9b7 	bl	8001a48 <MX_DAC1_Init>
  MX_TIM7_Init();
 80016da:	f000 fa2d 	bl	8001b38 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,adc_buffer,BUFFER_SIZE);
 80016de:	2240      	movs	r2, #64	@ 0x40
 80016e0:	496a      	ldr	r1, [pc, #424]	@ (800188c <main+0x1d4>)
 80016e2:	486b      	ldr	r0, [pc, #428]	@ (8001890 <main+0x1d8>)
 80016e4:	f001 fb84 	bl	8002df0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2,dac_buffer,BUFFER_SIZE,DAC_ALIGN_12B_R);
 80016e8:	2300      	movs	r3, #0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2340      	movs	r3, #64	@ 0x40
 80016ee:	4a69      	ldr	r2, [pc, #420]	@ (8001894 <main+0x1dc>)
 80016f0:	2110      	movs	r1, #16
 80016f2:	4869      	ldr	r0, [pc, #420]	@ (8001898 <main+0x1e0>)
 80016f4:	f002 fbe6 	bl	8003ec4 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim7);
 80016f8:	4868      	ldr	r0, [pc, #416]	@ (800189c <main+0x1e4>)
 80016fa:	f005 f8af 	bl	800685c <HAL_TIM_Base_Start>
  uart_init();
 80016fe:	f7ff fbf3 	bl	8000ee8 <uart_init>
  SPI_init();
 8001702:	f7ff fcaa 	bl	800105a <SPI_init>
  LCD_reset();
 8001706:	f7ff fcb2 	bl	800106e <LCD_reset>
  HAL_Delay(100);
 800170a:	2064      	movs	r0, #100	@ 0x64
 800170c:	f000 ff82 	bl	8002614 <HAL_Delay>
  LCD_init();
 8001710:	f7ff fd0a 	bl	8001128 <LCD_init>
  init_fft(FFT_BUFFER_SIZE);
 8001714:	2020      	movs	r0, #32
 8001716:	f7ff fc55 	bl	8000fc4 <init_fft>

  LCD_Fill_Color(BLACK);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fdf0 	bl	8001300 <LCD_Fill_Color>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HALF_BUFFER_FULL_FLAG)
 8001720:	4b5f      	ldr	r3, [pc, #380]	@ (80018a0 <main+0x1e8>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d054      	beq.n	80017d4 <main+0x11c>
	  	{


	  		//Once converted to floating point the FFT is performed on the first half of buffer
//	  		perform_fft(fft_buffer_in_1, fft_buffer_out_1);
	  		perform_fft(fft_buffer_in_1, fft_buffer_out_1);
 800172a:	495e      	ldr	r1, [pc, #376]	@ (80018a4 <main+0x1ec>)
 800172c:	485e      	ldr	r0, [pc, #376]	@ (80018a8 <main+0x1f0>)
 800172e:	f7ff fc65 	bl	8000ffc <perform_fft>

	  		//Take absolute magnitude of FFT output
	  		arm_cmplx_mag_f32(fft_buffer_out_1,iir_buffer_in_1,(uint32_t)(FFT_BUFFER_SIZE/2));
 8001732:	2210      	movs	r2, #16
 8001734:	495d      	ldr	r1, [pc, #372]	@ (80018ac <main+0x1f4>)
 8001736:	485b      	ldr	r0, [pc, #364]	@ (80018a4 <main+0x1ec>)
 8001738:	f006 fdbe 	bl	80082b8 <arm_cmplx_mag_f32>

	  		//Do IIR filtering for each FFT value
	  		for(int i=0;i<FFT_BUFFER_SIZE/2;i++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e024      	b.n	800178c <main+0xd4>
	  				{
	  					iir_buffer_out_1[i]=lowpass_IIR_filter((int)(round(iir_buffer_in_1[i])),&filter_registers[i]);
 8001742:	4a5a      	ldr	r2, [pc, #360]	@ (80018ac <main+0x1f4>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff23 	bl	8000598 <__aeabi_f2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ec43 2b10 	vmov	d0, r2, r3
 800175a:	f009 fe91 	bl	800b480 <round>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa1f 	bl	8000ba8 <__aeabi_d2iz>
 800176a:	4602      	mov	r2, r0
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	494f      	ldr	r1, [pc, #316]	@ (80018b0 <main+0x1f8>)
 8001772:	440b      	add	r3, r1
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f7ff fc52 	bl	8001020 <lowpass_IIR_filter>
 800177c:	4602      	mov	r2, r0
 800177e:	494d      	ldr	r1, [pc, #308]	@ (80018b4 <main+0x1fc>)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		for(int i=0;i<FFT_BUFFER_SIZE/2;i++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	ddd7      	ble.n	8001742 <main+0x8a>
	  				}
	  		//Lastly store in a LCD screen buffer
	  		int temp=15;
 8001792:	230f      	movs	r3, #15
 8001794:	613b      	str	r3, [r7, #16]
	  		for(int i=0; i<FFT_BUFFER_SIZE/2;i++)
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e012      	b.n	80017c2 <main+0x10a>
	  		{
	  			//Values inside update bar graph function should be reversed (dont touch)
	  			lcd_buffer_1[temp]=(int32_t)(iir_buffer_out_1[i]*(LCD_SCALE_FACTOR));
 800179c:	4a45      	ldr	r2, [pc, #276]	@ (80018b4 <main+0x1fc>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4619      	mov	r1, r3
 80017ae:	4a42      	ldr	r2, [pc, #264]	@ (80018b8 <main+0x200>)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				temp--;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
	  		for(int i=0; i<FFT_BUFFER_SIZE/2;i++)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	dde9      	ble.n	800179c <main+0xe4>

	  		}

  			updateBarGraph(lcd_buffer_1);
 80017c8:	483b      	ldr	r0, [pc, #236]	@ (80018b8 <main+0x200>)
 80017ca:	f7ff ff2d 	bl	8001628 <updateBarGraph>
	  		HALF_BUFFER_FULL_FLAG=0;		//Reset the flag letting know ISR it can fill this half of the buffer now
 80017ce:	4b34      	ldr	r3, [pc, #208]	@ (80018a0 <main+0x1e8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]


	  	}

	  	if(FULL_BUFFER_FULL_FLAG)
 80017d4:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <main+0x204>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0a0      	beq.n	8001720 <main+0x68>
	  	{

		  	//Once converted to floating point the FFT is performed on the second half of buffer
//	  		perform_fft(fft_buffer_in_2, fft_buffer_out_2);
	  		perform_fft(fft_buffer_in_2, fft_buffer_out_2);
 80017de:	4938      	ldr	r1, [pc, #224]	@ (80018c0 <main+0x208>)
 80017e0:	4838      	ldr	r0, [pc, #224]	@ (80018c4 <main+0x20c>)
 80017e2:	f7ff fc0b 	bl	8000ffc <perform_fft>

	  		//Take absolute magnitude of FFT output
	  		arm_cmplx_mag_f32(fft_buffer_out_2,iir_buffer_in_2,(uint32_t)(FFT_BUFFER_SIZE/2));
 80017e6:	2210      	movs	r2, #16
 80017e8:	4937      	ldr	r1, [pc, #220]	@ (80018c8 <main+0x210>)
 80017ea:	4835      	ldr	r0, [pc, #212]	@ (80018c0 <main+0x208>)
 80017ec:	f006 fd64 	bl	80082b8 <arm_cmplx_mag_f32>



	  		//Do IIR filtering for each FFT value
	  		for(int i=0;i<FFT_BUFFER_SIZE/2;i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	e024      	b.n	8001840 <main+0x188>
	  		{
  					iir_buffer_out_2[i]=lowpass_IIR_filter((int)(round(iir_buffer_in_2[i])),&filter_registers[i]);
 80017f6:	4a34      	ldr	r2, [pc, #208]	@ (80018c8 <main+0x210>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fec9 	bl	8000598 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	ec43 2b10 	vmov	d0, r2, r3
 800180e:	f009 fe37 	bl	800b480 <round>
 8001812:	ec53 2b10 	vmov	r2, r3, d0
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f9c5 	bl	8000ba8 <__aeabi_d2iz>
 800181e:	4602      	mov	r2, r0
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4922      	ldr	r1, [pc, #136]	@ (80018b0 <main+0x1f8>)
 8001826:	440b      	add	r3, r1
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f7ff fbf8 	bl	8001020 <lowpass_IIR_filter>
 8001830:	4602      	mov	r2, r0
 8001832:	4926      	ldr	r1, [pc, #152]	@ (80018cc <main+0x214>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		for(int i=0;i<FFT_BUFFER_SIZE/2;i++)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	ddd7      	ble.n	80017f6 <main+0x13e>

	  		}

	  		//Lastly store in a LCD screen buffer
	  		int temp=15;
 8001846:	230f      	movs	r3, #15
 8001848:	607b      	str	r3, [r7, #4]
	  		for(int i=0; i<FFT_BUFFER_SIZE/2;i++)
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	e012      	b.n	8001876 <main+0x1be>
	  		{
				lcd_buffer_2[temp]=(int32_t)(iir_buffer_out_2[i]*(LCD_SCALE_FACTOR));
 8001850:	4a1e      	ldr	r2, [pc, #120]	@ (80018cc <main+0x214>)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001858:	4613      	mov	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4619      	mov	r1, r3
 8001862:	4a1b      	ldr	r2, [pc, #108]	@ (80018d0 <main+0x218>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				temp--;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3b01      	subs	r3, #1
 800186e:	607b      	str	r3, [r7, #4]
	  		for(int i=0; i<FFT_BUFFER_SIZE/2;i++)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	dde9      	ble.n	8001850 <main+0x198>
	  		}
  			updateBarGraph(lcd_buffer_2);
 800187c:	4814      	ldr	r0, [pc, #80]	@ (80018d0 <main+0x218>)
 800187e:	f7ff fed3 	bl	8001628 <updateBarGraph>
	  		FULL_BUFFER_FULL_FLAG=0;
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <main+0x204>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	  if(HALF_BUFFER_FULL_FLAG)
 8001888:	e74a      	b.n	8001720 <main+0x68>
 800188a:	bf00      	nop
 800188c:	20001250 	.word	0x20001250
 8001890:	20001084 	.word	0x20001084
 8001894:	20001350 	.word	0x20001350
 8001898:	20001150 	.word	0x20001150
 800189c:	200011c4 	.word	0x200011c4
 80018a0:	200017d0 	.word	0x200017d0
 80018a4:	200014d0 	.word	0x200014d0
 80018a8:	20001450 	.word	0x20001450
 80018ac:	20001650 	.word	0x20001650
 80018b0:	20001210 	.word	0x20001210
 80018b4:	200016d0 	.word	0x200016d0
 80018b8:	20001750 	.word	0x20001750
 80018bc:	200017d1 	.word	0x200017d1
 80018c0:	20001550 	.word	0x20001550
 80018c4:	200015d0 	.word	0x200015d0
 80018c8:	20001690 	.word	0x20001690
 80018cc:	20001710 	.word	0x20001710
 80018d0:	20001790 	.word	0x20001790

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	@ 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0318 	add.w	r3, r7, #24
 80018de:	2238      	movs	r2, #56	@ 0x38
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f007 fe44 	bl	8009570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018fa:	f003 fa25 	bl	8004d48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001908:	2340      	movs	r3, #64	@ 0x40
 800190a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	4618      	mov	r0, r3
 8001916:	f003 facb 	bl	8004eb0 <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001920:	f000 fab6 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001924:	230f      	movs	r3, #15
 8001926:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001928:	2301      	movs	r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fdc9 	bl	80054d4 <HAL_RCC_ClockConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001948:	f000 faa2 	bl	8001e90 <Error_Handler>
  }
}
 800194c:	bf00      	nop
 800194e:	3750      	adds	r7, #80	@ 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	@ 0x30
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800195a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2220      	movs	r2, #32
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f007 fdff 	bl	8009570 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001972:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <MX_ADC1_Init+0xec>)
 8001974:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001978:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800197a:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <MX_ADC1_Init+0xec>)
 800197c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001980:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001982:	4b2f      	ldr	r3, [pc, #188]	@ (8001a40 <MX_ADC1_Init+0xec>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001988:	4b2d      	ldr	r3, [pc, #180]	@ (8001a40 <MX_ADC1_Init+0xec>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800198e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <MX_ADC1_Init+0xec>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001994:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <MX_ADC1_Init+0xec>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800199a:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <MX_ADC1_Init+0xec>)
 800199c:	2204      	movs	r2, #4
 800199e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019a0:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a6:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80019ac:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b2:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019bc:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e0:	4817      	ldr	r0, [pc, #92]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019e2:	f001 f857 	bl	8002a94 <HAL_ADC_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80019ec:	f000 fa50 	bl	8001e90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <MX_ADC1_Init+0xec>)
 80019fc:	f002 f848 	bl	8003a90 <HAL_ADCEx_MultiModeConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001a06:	f000 fa43 	bl	8001e90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <MX_ADC1_Init+0xf0>)
 8001a0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a16:	237f      	movs	r3, #127	@ 0x7f
 8001a18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <MX_ADC1_Init+0xec>)
 8001a28:	f001 fab6 	bl	8002f98 <HAL_ADC_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001a32:	f000 fa2d 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3730      	adds	r7, #48	@ 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20001084 	.word	0x20001084
 8001a44:	25b00200 	.word	0x25b00200

08001a48 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	@ 0x30
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2230      	movs	r2, #48	@ 0x30
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f007 fd8b 	bl	8009570 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <MX_DAC1_Init+0x6c>)
 8001a5c:	4a16      	ldr	r2, [pc, #88]	@ (8001ab8 <MX_DAC1_Init+0x70>)
 8001a5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001a60:	4814      	ldr	r0, [pc, #80]	@ (8001ab4 <MX_DAC1_Init+0x6c>)
 8001a62:	f002 fa0c 	bl	8003e7e <HAL_DAC_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001a6c:	f000 fa10 	bl	8001e90 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001a70:	2302      	movs	r3, #2
 8001a72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001a80:	230a      	movs	r3, #10
 8001a82:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	2210      	movs	r2, #16
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <MX_DAC1_Init+0x6c>)
 8001a9c:	f002 fb04 	bl	80040a8 <HAL_DAC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001aa6:	f000 f9f3 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	3730      	adds	r7, #48	@ 0x30
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20001150 	.word	0x20001150
 8001ab8:	50000800 	.word	0x50000800

08001abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b34 <MX_SPI1_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001ad6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ada:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001b0a:	2207      	movs	r2, #7
 8001b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001b16:	2208      	movs	r2, #8
 8001b18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_SPI1_Init+0x74>)
 8001b1c:	f004 f932 	bl	8005d84 <HAL_SPI_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b26:	f000 f9b3 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200002e0 	.word	0x200002e0
 8001b34:	40013000 	.word	0x40013000

08001b38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <MX_TIM7_Init+0x64>)
 8001b4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ba0 <MX_TIM7_Init+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 160-1;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <MX_TIM7_Init+0x64>)
 8001b50:	229f      	movs	r2, #159	@ 0x9f
 8001b52:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_TIM7_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <MX_TIM7_Init+0x64>)
 8001b5c:	2209      	movs	r2, #9
 8001b5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <MX_TIM7_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b66:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <MX_TIM7_Init+0x64>)
 8001b68:	f004 fe20 	bl	80067ac <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001b72:	f000 f98d 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b76:	2320      	movs	r3, #32
 8001b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	@ (8001b9c <MX_TIM7_Init+0x64>)
 8001b84:	f004 ff7c 	bl	8006a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001b8e:	f000 f97f 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200011c4 	.word	0x200011c4
 8001ba0:	40001400 	.word	0x40001400

08001ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001baa:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bae:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bde:	4a17      	ldr	r2, [pc, #92]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <MX_DMA_Init+0x98>)
 8001be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	200b      	movs	r0, #11
 8001bf8:	f002 f90d 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bfc:	200b      	movs	r0, #11
 8001bfe:	f002 f924 	bl	8003e4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	200c      	movs	r0, #12
 8001c08:	f002 f905 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c0c:	200c      	movs	r0, #12
 8001c0e:	f002 f91c 	bl	8003e4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2039      	movs	r0, #57	@ 0x39
 8001c18:	f002 f8fd 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001c1c:	2039      	movs	r0, #57	@ 0x39
 8001c1e:	f002 f914 	bl	8003e4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	203a      	movs	r0, #58	@ 0x3a
 8001c28:	f002 f8f5 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001c2c:	203a      	movs	r0, #58	@ 0x3a
 8001c2e:	f002 f90c 	bl	8003e4a <HAL_NVIC_EnableIRQ>

}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c72:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	4a11      	ldr	r2, [pc, #68]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c92:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <MX_GPIO_Init+0x90>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2113      	movs	r1, #19
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca6:	f003 f837 	bl	8004d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001caa:	2313      	movs	r3, #19
 8001cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc4:	f002 fea6 	bl	8004a14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	if(!HALF_BUFFER_FULL_FLAG)
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d151      	bne.n	8001d8a <HAL_ADC_ConvHalfCpltCallback+0xb6>
	{
		float sum = 0.0f;
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

		for(int i = 0; i < HALF_BUFFER_SIZE; i++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e024      	b.n	8001d3c <HAL_ADC_ConvHalfCpltCallback+0x68>
		{
			fft_buffer_in_1[i] = ((float)adc_buffer[i] / 4095.0f) * 3.3f;
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d9c <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d02:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001da0 <HAL_ADC_ConvHalfCpltCallback+0xcc>
 8001d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001da4 <HAL_ADC_ConvHalfCpltCallback+0xd0>
 8001d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d12:	4a25      	ldr	r2, [pc, #148]	@ (8001da8 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
			sum += fft_buffer_in_1[i];
 8001d1e:	4a22      	ldr	r2, [pc, #136]	@ (8001da8 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i = 0; i < HALF_BUFFER_SIZE; i++)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b1f      	cmp	r3, #31
 8001d40:	ddd7      	ble.n	8001cf2 <HAL_ADC_ConvHalfCpltCallback+0x1e>
		}

		float mean = sum / HALF_BUFFER_SIZE;
 8001d42:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d46:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001dac <HAL_ADC_ConvHalfCpltCallback+0xd8>
 8001d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Subtract mean to remove DC offset
		for(int i = 0; i < HALF_BUFFER_SIZE; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e012      	b.n	8001d7e <HAL_ADC_ConvHalfCpltCallback+0xaa>
		{
			fft_buffer_in_1[i] -= mean;
 8001d58:	4a13      	ldr	r2, [pc, #76]	@ (8001da8 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	ed93 7a00 	vldr	s14, [r3]
 8001d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001da8 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < HALF_BUFFER_SIZE; i++)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b1f      	cmp	r3, #31
 8001d82:	dde9      	ble.n	8001d58 <HAL_ADC_ConvHalfCpltCallback+0x84>
		}

		HALF_BUFFER_FULL_FLAG = 1;
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200017d0 	.word	0x200017d0
 8001d9c:	20001250 	.word	0x20001250
 8001da0:	457ff000 	.word	0x457ff000
 8001da4:	40533333 	.word	0x40533333
 8001da8:	20001450 	.word	0x20001450
 8001dac:	42000000 	.word	0x42000000

08001db0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	if(!FULL_BUFFER_FULL_FLAG)
 8001db8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e78 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d153      	bne.n	8001e6a <HAL_ADC_ConvCpltCallback+0xba>
	{
		float sum = 0.0f;
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

		for(int i = HALF_BUFFER_SIZE; i < BUFFER_SIZE; i++)
 8001dc8:	2320      	movs	r3, #32
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e026      	b.n	8001e1c <HAL_ADC_ConvCpltCallback+0x6c>
		{
			fft_buffer_in_2[i - HALF_BUFFER_SIZE] = ((float)adc_buffer[i] / 4095.0f) * 3.3f;
 8001dce:	4a2b      	ldr	r2, [pc, #172]	@ (8001e7c <HAL_ADC_ConvCpltCallback+0xcc>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dde:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001e80 <HAL_ADC_ConvCpltCallback+0xd0>
 8001de2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3b20      	subs	r3, #32
 8001dea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001e84 <HAL_ADC_ConvCpltCallback+0xd4>
 8001dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df2:	4a25      	ldr	r2, [pc, #148]	@ (8001e88 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	edc3 7a00 	vstr	s15, [r3]
			sum += fft_buffer_in_2[i - HALF_BUFFER_SIZE];
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	3b20      	subs	r3, #32
 8001e00:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e12:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i = HALF_BUFFER_SIZE; i < BUFFER_SIZE; i++)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e20:	ddd5      	ble.n	8001dce <HAL_ADC_ConvCpltCallback+0x1e>
		}

		float mean = sum / HALF_BUFFER_SIZE;
 8001e22:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e26:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001e8c <HAL_ADC_ConvCpltCallback+0xdc>
 8001e2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e2e:	edc7 7a02 	vstr	s15, [r7, #8]

		for(int i = 0; i < HALF_BUFFER_SIZE; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	e012      	b.n	8001e5e <HAL_ADC_ConvCpltCallback+0xae>
		{
			fft_buffer_in_2[i] -= mean;
 8001e38:	4a13      	ldr	r2, [pc, #76]	@ (8001e88 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	ed93 7a00 	vldr	s14, [r3]
 8001e44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e88 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < HALF_BUFFER_SIZE; i++)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b1f      	cmp	r3, #31
 8001e62:	dde9      	ble.n	8001e38 <HAL_ADC_ConvCpltCallback+0x88>
		}

		FULL_BUFFER_FULL_FLAG = 1;
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200017d1 	.word	0x200017d1
 8001e7c:	20001250 	.word	0x20001250
 8001e80:	457ff000 	.word	0x457ff000
 8001e84:	40533333 	.word	0x40533333
 8001e88:	200015d0 	.word	0x200015d0
 8001e8c:	42000000 	.word	0x42000000

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <Error_Handler+0x8>

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ed2:	f002 ffdd 	bl	8004e90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09e      	sub	sp, #120	@ 0x78
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2250      	movs	r2, #80	@ 0x50
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f007 fb33 	bl	8009570 <memset>
  if(hadc->Instance==ADC1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f12:	d15e      	bne.n	8001fd2 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f1a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f1e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fcf1 	bl	800590c <HAL_RCCEx_PeriphCLKConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001f30:	f7ff ffae 	bl	8001e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f34:	4b29      	ldr	r3, [pc, #164]	@ (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f38:	4a28      	ldr	r2, [pc, #160]	@ (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f40:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4c:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f50:	4a22      	ldr	r2, [pc, #136]	@ (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f58:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f64:	2308      	movs	r3, #8
 8001f66:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f74:	4619      	mov	r1, r3
 8001f76:	481a      	ldr	r0, [pc, #104]	@ (8001fe0 <HAL_ADC_MspInit+0xfc>)
 8001f78:	f002 fd4c 	bl	8004a14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe8 <HAL_ADC_MspInit+0x104>)
 8001f80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001f84:	2205      	movs	r2, #5
 8001f86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001f96:	2280      	movs	r2, #128	@ 0x80
 8001f98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001fa4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fa8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001fac:	2220      	movs	r2, #32
 8001fae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fb6:	480b      	ldr	r0, [pc, #44]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001fb8:	f002 faba 	bl	8004530 <HAL_DMA_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8001fc2:	f7ff ff65 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a06      	ldr	r2, [pc, #24]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fcc:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <HAL_ADC_MspInit+0x100>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3778      	adds	r7, #120	@ 0x78
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	48000800 	.word	0x48000800
 8001fe4:	200010f0 	.word	0x200010f0
 8001fe8:	40020008 	.word	0x40020008

08001fec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2b      	ldr	r2, [pc, #172]	@ (80020b8 <HAL_DAC_MspInit+0xcc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d14f      	bne.n	80020ae <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <HAL_DAC_MspInit+0xd0>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	4a2a      	ldr	r2, [pc, #168]	@ (80020bc <HAL_DAC_MspInit+0xd0>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201a:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <HAL_DAC_MspInit+0xd0>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b25      	ldr	r3, [pc, #148]	@ (80020bc <HAL_DAC_MspInit+0xd0>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	4a24      	ldr	r2, [pc, #144]	@ (80020bc <HAL_DAC_MspInit+0xd0>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002032:	4b22      	ldr	r3, [pc, #136]	@ (80020bc <HAL_DAC_MspInit+0xd0>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800203e:	2320      	movs	r3, #32
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002042:	2303      	movs	r3, #3
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002054:	f002 fcde 	bl	8004a14 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 800205a:	4a1a      	ldr	r2, [pc, #104]	@ (80020c4 <HAL_DAC_MspInit+0xd8>)
 800205c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 800205e:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 8002060:	2207      	movs	r2, #7
 8002062:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002064:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 8002066:	2210      	movs	r2, #16
 8002068:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 8002072:	2280      	movs	r2, #128	@ 0x80
 8002074:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002076:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 8002078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 8002080:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002084:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 8002088:	2220      	movs	r2, #32
 800208a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 800208e:	2200      	movs	r2, #0
 8002090:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8002092:	480b      	ldr	r0, [pc, #44]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 8002094:	f002 fa4c 	bl	8004530 <HAL_DMA_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800209e:	f7ff fef7 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a06      	ldr	r2, [pc, #24]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <HAL_DAC_MspInit+0xd4>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80020ae:	bf00      	nop
 80020b0:	3728      	adds	r7, #40	@ 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	50000800 	.word	0x50000800
 80020bc:	40021000 	.word	0x40021000
 80020c0:	20001164 	.word	0x20001164
 80020c4:	4002001c 	.word	0x4002001c

080020c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002224 <HAL_SPI_MspInit+0x15c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 8098 	bne.w	800221c <HAL_SPI_MspInit+0x154>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
//
  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 80020ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 80020f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	4b48      	ldr	r3, [pc, #288]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 8002106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002108:	4a47      	ldr	r2, [pc, #284]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002110:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211c:	4b42      	ldr	r3, [pc, #264]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002120:	4a41      	ldr	r2, [pc, #260]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002128:	4b3f      	ldr	r3, [pc, #252]	@ (8002228 <HAL_SPI_MspInit+0x160>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002134:	23c0      	movs	r3, #192	@ 0xc0
 8002136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002144:	2305      	movs	r3, #5
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002152:	f002 fc5f 	bl	8004a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002156:	2308      	movs	r3, #8
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002166:	2305      	movs	r3, #5
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	482e      	ldr	r0, [pc, #184]	@ (800222c <HAL_SPI_MspInit+0x164>)
 8002172:	f002 fc4f 	bl	8004a14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel3;
 8002176:	4b2e      	ldr	r3, [pc, #184]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 8002178:	4a2e      	ldr	r2, [pc, #184]	@ (8002234 <HAL_SPI_MspInit+0x16c>)
 800217a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800217c:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 800217e:	220b      	movs	r2, #11
 8002180:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002182:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 8002184:	2210      	movs	r2, #16
 8002186:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002188:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800218e:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 8002190:	2280      	movs	r2, #128	@ 0x80
 8002192:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002194:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219a:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80021a0:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80021a6:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 80021a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80021ae:	4820      	ldr	r0, [pc, #128]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 80021b0:	f002 f9be 	bl	8004530 <HAL_DMA_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 80021ba:	f7ff fe69 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 80021c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80021c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_SPI_MspInit+0x168>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Channel2;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021cc:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <HAL_SPI_MspInit+0x174>)
 80021ce:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021d2:	220a      	movs	r2, #10
 80021d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021dc:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021e4:	2280      	movs	r2, #128	@ 0x80
 80021e6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80021f4:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002200:	480d      	ldr	r0, [pc, #52]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 8002202:	f002 f995 	bl	8004530 <HAL_DMA_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 800220c:	f7ff fe40 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 8002214:	659a      	str	r2, [r3, #88]	@ 0x58
 8002216:	4a08      	ldr	r2, [pc, #32]	@ (8002238 <HAL_SPI_MspInit+0x170>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6293      	str	r3, [r2, #40]	@ 0x28
//
  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	@ 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40013000 	.word	0x40013000
 8002228:	40021000 	.word	0x40021000
 800222c:	48000400 	.word	0x48000400
 8002230:	20000344 	.word	0x20000344
 8002234:	40020430 	.word	0x40020430
 8002238:	200003a4 	.word	0x200003a4
 800223c:	4002041c 	.word	0x4002041c

08002240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <HAL_TIM_Base_MspInit+0x38>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10b      	bne.n	800226a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_TIM_Base_MspInit+0x3c>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	4a09      	ldr	r2, [pc, #36]	@ (800227c <HAL_TIM_Base_MspInit+0x3c>)
 8002258:	f043 0320 	orr.w	r3, r3, #32
 800225c:	6593      	str	r3, [r2, #88]	@ 0x58
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <HAL_TIM_Base_MspInit+0x3c>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40001400 	.word	0x40001400
 800227c:	40021000 	.word	0x40021000

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <NMI_Handler+0x4>

08002288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <HardFault_Handler+0x4>

08002290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <MemManage_Handler+0x4>

08002298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d6:	f000 f97f 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <DMA1_Channel1_IRQHandler+0x10>)
 80022e6:	f002 fa46 	bl	8004776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200010f0 	.word	0x200010f0

080022f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <DMA1_Channel2_IRQHandler+0x10>)
 80022fa:	f002 fa3c 	bl	8004776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20001164 	.word	0x20001164

08002308 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <DMA2_Channel2_IRQHandler+0x10>)
 800230e:	f002 fa32 	bl	8004776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200003a4 	.word	0x200003a4

0800231c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <DMA2_Channel3_IRQHandler+0x10>)
 8002322:	f002 fa28 	bl	8004776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000344 	.word	0x20000344

08002330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_kill>:

int _kill(int pid, int sig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800234a:	f007 f91d 	bl	8009588 <__errno>
 800234e:	4603      	mov	r3, r0
 8002350:	2216      	movs	r2, #22
 8002352:	601a      	str	r2, [r3, #0]
  return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_exit>:

void _exit (int status)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002368:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffe7 	bl	8002340 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002372:	bf00      	nop
 8002374:	e7fd      	b.n	8002372 <_exit+0x12>

08002376 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e00a      	b.n	800239e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002388:	f3af 8000 	nop.w
 800238c:	4601      	mov	r1, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	dbf0      	blt.n	8002388 <_read+0x12>
  }

  return len;
 80023a6:	687b      	ldr	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e009      	b.n	80023d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fde8 	bl	8000fa0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dbf1      	blt.n	80023c2 <_write+0x12>
  }
  return len;
 80023de:	687b      	ldr	r3, [r7, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_close>:

int _close(int file)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002410:	605a      	str	r2, [r3, #4]
  return 0;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_isatty>:

int _isatty(int file)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002458:	4a14      	ldr	r2, [pc, #80]	@ (80024ac <_sbrk+0x5c>)
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <_sbrk+0x60>)
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <_sbrk+0x64>)
 800246e:	4a12      	ldr	r2, [pc, #72]	@ (80024b8 <_sbrk+0x68>)
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d207      	bcs.n	8002490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002480:	f007 f882 	bl	8009588 <__errno>
 8002484:	4603      	mov	r3, r0
 8002486:	220c      	movs	r2, #12
 8002488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800248e:	e009      	b.n	80024a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002496:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <_sbrk+0x64>)
 80024a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2001c000 	.word	0x2001c000
 80024b0:	00000400 	.word	0x00000400
 80024b4:	200017d4 	.word	0x200017d4
 80024b8:	20001928 	.word	0x20001928

080024bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024e0:	480d      	ldr	r0, [pc, #52]	@ (8002518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e4:	f7ff ffea 	bl	80024bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e8:	480c      	ldr	r0, [pc, #48]	@ (800251c <LoopForever+0x6>)
  ldr r1, =_edata
 80024ea:	490d      	ldr	r1, [pc, #52]	@ (8002520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <LoopForever+0xe>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024f0:	e002      	b.n	80024f8 <LoopCopyDataInit>

080024f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f6:	3304      	adds	r3, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024fc:	d3f9      	bcc.n	80024f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002500:	4c0a      	ldr	r4, [pc, #40]	@ (800252c <LoopForever+0x16>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002504:	e001      	b.n	800250a <LoopFillZerobss>

08002506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002508:	3204      	adds	r2, #4

0800250a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800250c:	d3fb      	bcc.n	8002506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800250e:	f007 f841 	bl	8009594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002512:	f7ff f8d1 	bl	80016b8 <main>

08002516 <LoopForever>:

LoopForever:
    b LoopForever
 8002516:	e7fe      	b.n	8002516 <LoopForever>
  ldr   r0, =_estack
 8002518:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002524:	0801e8d8 	.word	0x0801e8d8
  ldr r2, =_sbss
 8002528:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800252c:	20001928 	.word	0x20001928

08002530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC1_2_IRQHandler>

08002532 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f001 fc5f 	bl	8003e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002542:	200f      	movs	r0, #15
 8002544:	f000 f80e 	bl	8002564 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	e001      	b.n	8002558 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002554:	f7ff fca2 	bl	8001e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002558:	79fb      	ldrb	r3, [r7, #7]

}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002570:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <HAL_InitTick+0x68>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d022      	beq.n	80025be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002578:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <HAL_InitTick+0x6c>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <HAL_InitTick+0x68>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002584:	fbb1 f3f3 	udiv	r3, r1, r3
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	4618      	mov	r0, r3
 800258e:	f001 fc6a 	bl	8003e66 <HAL_SYSTICK_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10f      	bne.n	80025b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	d809      	bhi.n	80025b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259e:	2200      	movs	r2, #0
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025a6:	f001 fc36 	bl	8003e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_InitTick+0x70>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e007      	b.n	80025c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	e004      	b.n	80025c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e001      	b.n	80025c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000004c 	.word	0x2000004c
 80025d0:	20000044 	.word	0x20000044
 80025d4:	20000048 	.word	0x20000048

080025d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <HAL_IncTick+0x1c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_IncTick+0x20>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a03      	ldr	r2, [pc, #12]	@ (80025f4 <HAL_IncTick+0x1c>)
 80025e8:	6013      	str	r3, [r2, #0]
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	200017d8 	.word	0x200017d8
 80025f8:	2000004c 	.word	0x2000004c

080025fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <HAL_GetTick+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200017d8 	.word	0x200017d8

08002614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff ffee 	bl	80025fc <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800262c:	d004      	beq.n	8002638 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_Delay+0x40>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4413      	add	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002638:	bf00      	nop
 800263a:	f7ff ffdf 	bl	80025fc <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	429a      	cmp	r2, r3
 8002648:	d8f7      	bhi.n	800263a <HAL_Delay+0x26>
  {
  }
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	2000004c 	.word	0x2000004c

08002658 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	609a      	str	r2, [r3, #8]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3360      	adds	r3, #96	@ 0x60
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <LL_ADC_SetOffset+0x44>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	03fff000 	.word	0x03fff000

08002708 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3360      	adds	r3, #96	@ 0x60
 8002716:	461a      	mov	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3360      	adds	r3, #96	@ 0x60
 8002744:	461a      	mov	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	431a      	orrs	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800276a:	b480      	push	{r7}
 800276c:	b087      	sub	sp, #28
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3360      	adds	r3, #96	@ 0x60
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	431a      	orrs	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3360      	adds	r3, #96	@ 0x60
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	615a      	str	r2, [r3, #20]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002822:	b480      	push	{r7}
 8002824:	b087      	sub	sp, #28
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3330      	adds	r3, #48	@ 0x30
 8002832:	461a      	mov	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	4413      	add	r3, r2
 8002840:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	211f      	movs	r1, #31
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	401a      	ands	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	f003 011f 	and.w	r1, r3, #31
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	431a      	orrs	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3314      	adds	r3, #20
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	0e5b      	lsrs	r3, r3, #25
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	4413      	add	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	0d1b      	lsrs	r3, r3, #20
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2107      	movs	r1, #7
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	401a      	ands	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	0d1b      	lsrs	r3, r3, #20
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	431a      	orrs	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	43db      	mvns	r3, r3
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0318 	and.w	r3, r3, #24
 80028f2:	4908      	ldr	r1, [pc, #32]	@ (8002914 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028f4:	40d9      	lsrs	r1, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	400b      	ands	r3, r1
 80028fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fe:	431a      	orrs	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	0007ffff 	.word	0x0007ffff

08002918 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 031f 	and.w	r3, r3, #31
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6093      	str	r3, [r2, #8]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800296c:	d101      	bne.n	8002972 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002990:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002994:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029bc:	d101      	bne.n	80029c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <LL_ADC_IsEnabled+0x18>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_ADC_IsEnabled+0x1a>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a2e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d101      	bne.n	8002a5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d101      	bne.n	8002a84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e19b      	b.n	8002de6 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fa11 	bl	8001ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff3f 	bl	8002958 <LL_ADC_IsDeepPowerDownEnabled>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff25 	bl	8002934 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff5a 	bl	80029a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff3e 	bl	8002980 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b04:	4b97      	ldr	r3, [pc, #604]	@ (8002d64 <HAL_ADC_Init+0x2d0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	4a97      	ldr	r2, [pc, #604]	@ (8002d68 <HAL_ADC_Init+0x2d4>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ff3c 	bl	80029a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	f043 0210 	orr.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff75 	bl	8002a46 <LL_ADC_REG_IsConversionOngoing>
 8002b5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8134 	bne.w	8002dd4 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 8130 	bne.w	8002dd4 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b7c:	f043 0202 	orr.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff35 	bl	80029f8 <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d137      	bne.n	8002c04 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b9c:	d004      	beq.n	8002ba8 <HAL_ADC_Init+0x114>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a72      	ldr	r2, [pc, #456]	@ (8002d6c <HAL_ADC_Init+0x2d8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_ADC_Init+0x134>
 8002ba8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002bac:	f7ff ff24 	bl	80029f8 <LL_ADC_IsEnabled>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	486e      	ldr	r0, [pc, #440]	@ (8002d6c <HAL_ADC_Init+0x2d8>)
 8002bb4:	f7ff ff20 	bl	80029f8 <LL_ADC_IsEnabled>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e008      	b.n	8002bda <HAL_ADC_Init+0x146>
 8002bc8:	4869      	ldr	r0, [pc, #420]	@ (8002d70 <HAL_ADC_Init+0x2dc>)
 8002bca:	f7ff ff15 	bl	80029f8 <LL_ADC_IsEnabled>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d012      	beq.n	8002c04 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002be6:	d004      	beq.n	8002bf2 <HAL_ADC_Init+0x15e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a5f      	ldr	r2, [pc, #380]	@ (8002d6c <HAL_ADC_Init+0x2d8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_Init+0x162>
 8002bf2:	4a60      	ldr	r2, [pc, #384]	@ (8002d74 <HAL_ADC_Init+0x2e0>)
 8002bf4:	e000      	b.n	8002bf8 <HAL_ADC_Init+0x164>
 8002bf6:	4a60      	ldr	r2, [pc, #384]	@ (8002d78 <HAL_ADC_Init+0x2e4>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7ff fd2a 	bl	8002658 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7f5b      	ldrb	r3, [r3, #29]
 8002c08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	045b      	lsls	r3, r3, #17
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <HAL_ADC_Init+0x2e8>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff feee 	bl	8002a6c <LL_ADC_INJ_IsConversionOngoing>
 8002c90:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d17b      	bne.n	8002d90 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d178      	bne.n	8002d90 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ca2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002caa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cba:	f023 0302 	bic.w	r3, r3, #2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	69b9      	ldr	r1, [r7, #24]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d017      	beq.n	8002d00 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002cde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ce8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002cec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6911      	ldr	r1, [r2, #16]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002cfe:	e013      	b.n	8002d28 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d126      	bne.n	8002d80 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d54:	430a      	orrs	r2, r1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	611a      	str	r2, [r3, #16]
 8002d62:	e015      	b.n	8002d90 <HAL_ADC_Init+0x2fc>
 8002d64:	20000044 	.word	0x20000044
 8002d68:	053e2d63 	.word	0x053e2d63
 8002d6c:	50000100 	.word	0x50000100
 8002d70:	50000400 	.word	0x50000400
 8002d74:	50000300 	.word	0x50000300
 8002d78:	50000700 	.word	0x50000700
 8002d7c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10c      	bne.n	8002db2 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	f023 010f 	bic.w	r1, r3, #15
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8002db0:	e007      	b.n	8002dc2 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 020f 	bic.w	r2, r2, #15
 8002dc0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dd2:	e007      	b.n	8002de4 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	f043 0210 	orr.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	@ 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
 8002dee:	bf00      	nop

08002df0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e04:	d004      	beq.n	8002e10 <HAL_ADC_Start_DMA+0x20>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a57      	ldr	r2, [pc, #348]	@ (8002f68 <HAL_ADC_Start_DMA+0x178>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_Start_DMA+0x24>
 8002e10:	4b56      	ldr	r3, [pc, #344]	@ (8002f6c <HAL_ADC_Start_DMA+0x17c>)
 8002e12:	e000      	b.n	8002e16 <HAL_ADC_Start_DMA+0x26>
 8002e14:	4b56      	ldr	r3, [pc, #344]	@ (8002f70 <HAL_ADC_Start_DMA+0x180>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fd7e 	bl	8002918 <LL_ADC_GetMultimode>
 8002e1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fe0f 	bl	8002a46 <LL_ADC_REG_IsConversionOngoing>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 8094 	bne.w	8002f58 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_Start_DMA+0x4e>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e08f      	b.n	8002f5e <HAL_ADC_Start_DMA+0x16e>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f74 <HAL_ADC_Start_DMA+0x184>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d008      	beq.n	8002e62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d002      	beq.n	8002e62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b09      	cmp	r3, #9
 8002e60:	d173      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fcc4 	bl	80037f0 <ADC_Enable>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d166      	bne.n	8002f40 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a37      	ldr	r2, [pc, #220]	@ (8002f68 <HAL_ADC_Start_DMA+0x178>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d002      	beq.n	8002e96 <HAL_ADC_Start_DMA+0xa6>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	e001      	b.n	8002e9a <HAL_ADC_Start_DMA+0xaa>
 8002e96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d002      	beq.n	8002ea8 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec4:	f023 0206 	bic.w	r2, r3, #6
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed8:	4a27      	ldr	r2, [pc, #156]	@ (8002f78 <HAL_ADC_Start_DMA+0x188>)
 8002eda:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee0:	4a26      	ldr	r2, [pc, #152]	@ (8002f7c <HAL_ADC_Start_DMA+0x18c>)
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	4a25      	ldr	r2, [pc, #148]	@ (8002f80 <HAL_ADC_Start_DMA+0x190>)
 8002eea:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	221c      	movs	r2, #28
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0210 	orr.w	r2, r2, #16
 8002f0a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3340      	adds	r3, #64	@ 0x40
 8002f26:	4619      	mov	r1, r3
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f001 fba8 	bl	8004680 <HAL_DMA_Start_IT>
 8002f30:	4603      	mov	r3, r0
 8002f32:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fd70 	bl	8002a1e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f3e:	e00d      	b.n	8002f5c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002f48:	e008      	b.n	8002f5c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002f56:	e001      	b.n	8002f5c <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	50000100 	.word	0x50000100
 8002f6c:	50000300 	.word	0x50000300
 8002f70:	50000700 	.word	0x50000700
 8002f74:	50000400 	.word	0x50000400
 8002f78:	0800391d 	.word	0x0800391d
 8002f7c:	080039f5 	.word	0x080039f5
 8002f80:	08003a11 	.word	0x08003a11

08002f84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b0b6      	sub	sp, #216	@ 0xd8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x24>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	f000 bc04 	b.w	80037c4 <HAL_ADC_ConfigChannel+0x82c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fd3c 	bl	8002a46 <LL_ADC_REG_IsConversionOngoing>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 83e8 	bne.w	80037a6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f7ff fc1d 	bl	8002822 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fd2a 	bl	8002a46 <LL_ADC_REG_IsConversionOngoing>
 8002ff2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fd36 	bl	8002a6c <LL_ADC_INJ_IsConversionOngoing>
 8003000:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003004:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 81d9 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800300e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 81d4 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003020:	d10f      	bne.n	8003042 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	4619      	mov	r1, r3
 800302e:	f7ff fc24 	bl	800287a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fbcb 	bl	80027d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003040:	e00e      	b.n	8003060 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	461a      	mov	r2, r3
 8003050:	f7ff fc13 	bl	800287a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fbbb 	bl	80027d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	08db      	lsrs	r3, r3, #3
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d022      	beq.n	80030c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6919      	ldr	r1, [r3, #16]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003092:	f7ff fb15 	bl	80026c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6919      	ldr	r1, [r3, #16]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f7ff fb61 	bl	800276a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d102      	bne.n	80030be <HAL_ADC_ConfigChannel+0x126>
 80030b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030bc:	e000      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x128>
 80030be:	2300      	movs	r3, #0
 80030c0:	461a      	mov	r2, r3
 80030c2:	f7ff fb6d 	bl	80027a0 <LL_ADC_SetOffsetSaturation>
 80030c6:	e17b      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fb1a 	bl	8002708 <LL_ADC_GetOffsetChannel>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x15c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fb0f 	bl	8002708 <LL_ADC_GetOffsetChannel>
 80030ea:	4603      	mov	r3, r0
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	f003 021f 	and.w	r2, r3, #31
 80030f2:	e01e      	b.n	8003132 <HAL_ADC_ConfigChannel+0x19a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fb04 	bl	8002708 <LL_ADC_GetOffsetChannel>
 8003100:	4603      	mov	r3, r0
 8003102:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003116:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800311a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003122:	2320      	movs	r3, #32
 8003124:	e004      	b.n	8003130 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <HAL_ADC_ConfigChannel+0x1b2>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	0e9b      	lsrs	r3, r3, #26
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	e018      	b.n	800317c <HAL_ADC_ConfigChannel+0x1e4>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800315e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800316e:	2320      	movs	r3, #32
 8003170:	e004      	b.n	800317c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003172:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800317c:	429a      	cmp	r2, r3
 800317e:	d106      	bne.n	800318e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2200      	movs	r2, #0
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fad3 	bl	8002734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2101      	movs	r1, #1
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fab7 	bl	8002708 <LL_ADC_GetOffsetChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x222>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2101      	movs	r1, #1
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff faac 	bl	8002708 <LL_ADC_GetOffsetChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	0e9b      	lsrs	r3, r3, #26
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	e01e      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x260>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2101      	movs	r1, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff faa1 	bl	8002708 <LL_ADC_GetOffsetChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80031d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80031e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e004      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80031ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x278>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	e018      	b.n	8003242 <HAL_ADC_ConfigChannel+0x2aa>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003224:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003228:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800322c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e004      	b.n	8003242 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003238:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003242:	429a      	cmp	r2, r3
 8003244:	d106      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	2101      	movs	r1, #1
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fa70 	bl	8002734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2102      	movs	r1, #2
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fa54 	bl	8002708 <LL_ADC_GetOffsetChannel>
 8003260:	4603      	mov	r3, r0
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x2e8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2102      	movs	r1, #2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fa49 	bl	8002708 <LL_ADC_GetOffsetChannel>
 8003276:	4603      	mov	r3, r0
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	f003 021f 	and.w	r2, r3, #31
 800327e:	e01e      	b.n	80032be <HAL_ADC_ConfigChannel+0x326>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2102      	movs	r1, #2
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fa3e 	bl	8002708 <LL_ADC_GetOffsetChannel>
 800328c:	4603      	mov	r3, r0
 800328e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800329e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80032a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032ae:	2320      	movs	r3, #32
 80032b0:	e004      	b.n	80032bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x33e>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0e9b      	lsrs	r3, r3, #26
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	e016      	b.n	8003304 <HAL_ADC_ConfigChannel+0x36c>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80032e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80032ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e004      	b.n	8003304 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80032fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003304:	429a      	cmp	r2, r3
 8003306:	d106      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2200      	movs	r2, #0
 800330e:	2102      	movs	r1, #2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fa0f 	bl	8002734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2103      	movs	r1, #3
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f9f3 	bl	8002708 <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x3aa>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2103      	movs	r1, #3
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f9e8 	bl	8002708 <LL_ADC_GetOffsetChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	e017      	b.n	8003372 <HAL_ADC_ConfigChannel+0x3da>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2103      	movs	r1, #3
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f9dd 	bl	8002708 <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800335a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800335c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800335e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003364:	2320      	movs	r3, #32
 8003366:	e003      	b.n	8003370 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337a:	2b00      	cmp	r3, #0
 800337c:	d105      	bne.n	800338a <HAL_ADC_ConfigChannel+0x3f2>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	e011      	b.n	80033ae <HAL_ADC_ConfigChannel+0x416>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800339a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800339c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80033a2:	2320      	movs	r3, #32
 80033a4:	e003      	b.n	80033ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d106      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	2103      	movs	r1, #3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff f9ba 	bl	8002734 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fb17 	bl	80029f8 <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f040 813d 	bne.w	800364c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	461a      	mov	r2, r3
 80033e0:	f7ff fa76 	bl	80028d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4aa2      	ldr	r2, [pc, #648]	@ (8003674 <HAL_ADC_ConfigChannel+0x6dc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	f040 812e 	bne.w	800364c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10b      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x480>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0e9b      	lsrs	r3, r3, #26
 8003406:	3301      	adds	r3, #1
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2b09      	cmp	r3, #9
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e019      	b.n	800344c <HAL_ADC_ConfigChannel+0x4b4>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003428:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800342a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003430:	2320      	movs	r3, #32
 8003432:	e003      	b.n	800343c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003434:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2b09      	cmp	r3, #9
 8003444:	bf94      	ite	ls
 8003446:	2301      	movls	r3, #1
 8003448:	2300      	movhi	r3, #0
 800344a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344c:	2b00      	cmp	r3, #0
 800344e:	d079      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_ADC_ConfigChannel+0x4d4>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	3301      	adds	r3, #1
 8003464:	069b      	lsls	r3, r3, #26
 8003466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800346a:	e015      	b.n	8003498 <HAL_ADC_ConfigChannel+0x500>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800347a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800347c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003484:	2320      	movs	r3, #32
 8003486:	e003      	b.n	8003490 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	069b      	lsls	r3, r3, #26
 8003494:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x520>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	3301      	adds	r3, #1
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	e017      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x550>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80034c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80034ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e003      	b.n	80034dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	ea42 0103 	orr.w	r1, r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_ADC_ConfigChannel+0x576>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	3301      	adds	r3, #1
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	051b      	lsls	r3, r3, #20
 800350c:	e018      	b.n	8003540 <HAL_ADC_ConfigChannel+0x5a8>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800351c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003526:	2320      	movs	r3, #32
 8003528:	e003      	b.n	8003532 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800352a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	3301      	adds	r3, #1
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003540:	430b      	orrs	r3, r1
 8003542:	e07e      	b.n	8003642 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x5c8>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	3301      	adds	r3, #1
 8003558:	069b      	lsls	r3, r3, #26
 800355a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800355e:	e015      	b.n	800358c <HAL_ADC_ConfigChannel+0x5f4>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003570:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e003      	b.n	8003584 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	069b      	lsls	r3, r3, #26
 8003588:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x614>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	3301      	adds	r3, #1
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	e017      	b.n	80035dc <HAL_ADC_ConfigChannel+0x644>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	61fb      	str	r3, [r7, #28]
  return result;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x670>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	3301      	adds	r3, #1
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	3b1e      	subs	r3, #30
 8003600:	051b      	lsls	r3, r3, #20
 8003602:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003606:	e01b      	b.n	8003640 <HAL_ADC_ConfigChannel+0x6a8>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	613b      	str	r3, [r7, #16]
  return result;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003620:	2320      	movs	r3, #32
 8003622:	e003      	b.n	800362c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	f003 021f 	and.w	r2, r3, #31
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	3b1e      	subs	r3, #30
 800363a:	051b      	lsls	r3, r3, #20
 800363c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003640:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003646:	4619      	mov	r1, r3
 8003648:	f7ff f917 	bl	800287a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_ADC_ConfigChannel+0x6e0>)
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80af 	beq.w	80037b8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003662:	d004      	beq.n	800366e <HAL_ADC_ConfigChannel+0x6d6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a04      	ldr	r2, [pc, #16]	@ (800367c <HAL_ADC_ConfigChannel+0x6e4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10a      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x6ec>
 800366e:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <HAL_ADC_ConfigChannel+0x6e8>)
 8003670:	e009      	b.n	8003686 <HAL_ADC_ConfigChannel+0x6ee>
 8003672:	bf00      	nop
 8003674:	407f0000 	.word	0x407f0000
 8003678:	80080000 	.word	0x80080000
 800367c:	50000100 	.word	0x50000100
 8003680:	50000300 	.word	0x50000300
 8003684:	4b51      	ldr	r3, [pc, #324]	@ (80037cc <HAL_ADC_ConfigChannel+0x834>)
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f80c 	bl	80026a4 <LL_ADC_GetCommonPathInternalCh>
 800368c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a4e      	ldr	r2, [pc, #312]	@ (80037d0 <HAL_ADC_ConfigChannel+0x838>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x70c>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a4d      	ldr	r2, [pc, #308]	@ (80037d4 <HAL_ADC_ConfigChannel+0x83c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d134      	bne.n	800370e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d12e      	bne.n	800370e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b8:	d17e      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c2:	d004      	beq.n	80036ce <HAL_ADC_ConfigChannel+0x736>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a43      	ldr	r2, [pc, #268]	@ (80037d8 <HAL_ADC_ConfigChannel+0x840>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x73a>
 80036ce:	4a43      	ldr	r2, [pc, #268]	@ (80037dc <HAL_ADC_ConfigChannel+0x844>)
 80036d0:	e000      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x73c>
 80036d2:	4a3e      	ldr	r2, [pc, #248]	@ (80037cc <HAL_ADC_ConfigChannel+0x834>)
 80036d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f7fe ffcd 	bl	800267e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036e4:	4b3e      	ldr	r3, [pc, #248]	@ (80037e0 <HAL_ADC_ConfigChannel+0x848>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	4a3e      	ldr	r2, [pc, #248]	@ (80037e4 <HAL_ADC_ConfigChannel+0x84c>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036fe:	e002      	b.n	8003706 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b01      	subs	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f9      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800370c:	e054      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a35      	ldr	r2, [pc, #212]	@ (80037e8 <HAL_ADC_ConfigChannel+0x850>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d120      	bne.n	800375a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800371c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11a      	bne.n	800375a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800372c:	d144      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003736:	d004      	beq.n	8003742 <HAL_ADC_ConfigChannel+0x7aa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a26      	ldr	r2, [pc, #152]	@ (80037d8 <HAL_ADC_ConfigChannel+0x840>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x7ae>
 8003742:	4a26      	ldr	r2, [pc, #152]	@ (80037dc <HAL_ADC_ConfigChannel+0x844>)
 8003744:	e000      	b.n	8003748 <HAL_ADC_ConfigChannel+0x7b0>
 8003746:	4a21      	ldr	r2, [pc, #132]	@ (80037cc <HAL_ADC_ConfigChannel+0x834>)
 8003748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800374c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f7fe ff93 	bl	800267e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003758:	e02e      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a23      	ldr	r2, [pc, #140]	@ (80037ec <HAL_ADC_ConfigChannel+0x854>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d129      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d123      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a18      	ldr	r2, [pc, #96]	@ (80037d8 <HAL_ADC_ConfigChannel+0x840>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01e      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003782:	d004      	beq.n	800378e <HAL_ADC_ConfigChannel+0x7f6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a13      	ldr	r2, [pc, #76]	@ (80037d8 <HAL_ADC_ConfigChannel+0x840>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x7fa>
 800378e:	4a13      	ldr	r2, [pc, #76]	@ (80037dc <HAL_ADC_ConfigChannel+0x844>)
 8003790:	e000      	b.n	8003794 <HAL_ADC_ConfigChannel+0x7fc>
 8003792:	4a0e      	ldr	r2, [pc, #56]	@ (80037cc <HAL_ADC_ConfigChannel+0x834>)
 8003794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003798:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f7fe ff6d 	bl	800267e <LL_ADC_SetCommonPathInternalCh>
 80037a4:	e008      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	37d8      	adds	r7, #216	@ 0xd8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	50000700 	.word	0x50000700
 80037d0:	c3210000 	.word	0xc3210000
 80037d4:	90c00010 	.word	0x90c00010
 80037d8:	50000100 	.word	0x50000100
 80037dc:	50000300 	.word	0x50000300
 80037e0:	20000044 	.word	0x20000044
 80037e4:	053e2d63 	.word	0x053e2d63
 80037e8:	c7520000 	.word	0xc7520000
 80037ec:	cb840000 	.word	0xcb840000

080037f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff f8f9 	bl	80029f8 <LL_ADC_IsEnabled>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d176      	bne.n	80038fa <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	4b3c      	ldr	r3, [pc, #240]	@ (8003904 <ADC_Enable+0x114>)
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381e:	f043 0210 	orr.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e062      	b.n	80038fc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f8c8 	bl	80029d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003848:	d004      	beq.n	8003854 <ADC_Enable+0x64>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2e      	ldr	r2, [pc, #184]	@ (8003908 <ADC_Enable+0x118>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <ADC_Enable+0x68>
 8003854:	4b2d      	ldr	r3, [pc, #180]	@ (800390c <ADC_Enable+0x11c>)
 8003856:	e000      	b.n	800385a <ADC_Enable+0x6a>
 8003858:	4b2d      	ldr	r3, [pc, #180]	@ (8003910 <ADC_Enable+0x120>)
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe ff22 	bl	80026a4 <LL_ADC_GetCommonPathInternalCh>
 8003860:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003866:	2b00      	cmp	r3, #0
 8003868:	d013      	beq.n	8003892 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800386a:	4b2a      	ldr	r3, [pc, #168]	@ (8003914 <ADC_Enable+0x124>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	4a29      	ldr	r2, [pc, #164]	@ (8003918 <ADC_Enable+0x128>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003884:	e002      	b.n	800388c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3b01      	subs	r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f9      	bne.n	8003886 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003892:	f7fe feb3 	bl	80025fc <HAL_GetTick>
 8003896:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003898:	e028      	b.n	80038ec <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f8aa 	bl	80029f8 <LL_ADC_IsEnabled>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff f88e 	bl	80029d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038b4:	f7fe fea2 	bl	80025fc <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d914      	bls.n	80038ec <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d00d      	beq.n	80038ec <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	f043 0210 	orr.w	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d1cf      	bne.n	800389a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	8000003f 	.word	0x8000003f
 8003908:	50000100 	.word	0x50000100
 800390c:	50000300 	.word	0x50000300
 8003910:	50000700 	.word	0x50000700
 8003914:	20000044 	.word	0x20000044
 8003918:	053e2d63 	.word	0x053e2d63

0800391c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003932:	2b00      	cmp	r3, #0
 8003934:	d14b      	bne.n	80039ce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d021      	beq.n	8003994 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe ff51 	bl	80027fc <LL_ADC_REG_IsTriggerSourceSWStart>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d032      	beq.n	80039c6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d12b      	bne.n	80039c6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11f      	bne.n	80039c6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003992:	e018      	b.n	80039c6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d111      	bne.n	80039c6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	f043 0201 	orr.w	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7fe f9f2 	bl	8001db0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039cc:	e00e      	b.n	80039ec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff fad2 	bl	8002f84 <HAL_ADC_ErrorCallback>
}
 80039e0:	e004      	b.n	80039ec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7fe f966 	bl	8001cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff faa4 	bl	8002f84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <LL_ADC_IsEnabled>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <LL_ADC_IsEnabled+0x18>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <LL_ADC_IsEnabled+0x1a>
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_ADC_REG_IsConversionOngoing>:
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d101      	bne.n	8003a82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b0a1      	sub	sp, #132	@ 0x84
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0cb      	b.n	8003c46 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003aba:	2300      	movs	r3, #0
 8003abc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ac6:	d102      	bne.n	8003ace <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ac8:	4b61      	ldr	r3, [pc, #388]	@ (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	e001      	b.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0aa      	b.n	8003c46 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ffb9 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 8003af8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ffb3 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 808c 	bne.w	8003c24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 8088 	bne.w	8003c24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b1c:	d004      	beq.n	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a4b      	ldr	r2, [pc, #300]	@ (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003b28:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003b2a:	e000      	b.n	8003b2e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003b2e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d041      	beq.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b4a:	035b      	lsls	r3, r3, #13
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b5c:	d004      	beq.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a3b      	ldr	r2, [pc, #236]	@ (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d10f      	bne.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003b68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b6c:	f7ff ff6a 	bl	8003a44 <LL_ADC_IsEnabled>
 8003b70:	4604      	mov	r4, r0
 8003b72:	4837      	ldr	r0, [pc, #220]	@ (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b74:	f7ff ff66 	bl	8003a44 <LL_ADC_IsEnabled>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4323      	orrs	r3, r4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e008      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003b88:	4834      	ldr	r0, [pc, #208]	@ (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003b8a:	f7ff ff5b 	bl	8003a44 <LL_ADC_IsEnabled>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d04c      	beq.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ba6:	f023 030f 	bic.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	6811      	ldr	r1, [r2, #0]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bba:	e03d      	b.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd0:	d004      	beq.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10f      	bne.n	8003bfc <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003bdc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003be0:	f7ff ff30 	bl	8003a44 <LL_ADC_IsEnabled>
 8003be4:	4604      	mov	r4, r0
 8003be6:	481a      	ldr	r0, [pc, #104]	@ (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003be8:	f7ff ff2c 	bl	8003a44 <LL_ADC_IsEnabled>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4323      	orrs	r3, r4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e008      	b.n	8003c0e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003bfc:	4817      	ldr	r0, [pc, #92]	@ (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003bfe:	f7ff ff21 	bl	8003a44 <LL_ADC_IsEnabled>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d012      	beq.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c1a:	f023 030f 	bic.w	r3, r3, #15
 8003c1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c22:	e009      	b.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c36:	e000      	b.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3784      	adds	r7, #132	@ 0x84
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	50000100 	.word	0x50000100
 8003c54:	50000300 	.word	0x50000300
 8003c58:	50000700 	.word	0x50000700
 8003c5c:	50000400 	.word	0x50000400

08003c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c92:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	60d3      	str	r3, [r2, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 0307 	and.w	r3, r3, #7
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	db0b      	blt.n	8003cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4907      	ldr	r1, [pc, #28]	@ (8003cfc <__NVIC_EnableIRQ+0x38>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000e100 	.word	0xe000e100

08003d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	db0a      	blt.n	8003d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	490c      	ldr	r1, [pc, #48]	@ (8003d4c <__NVIC_SetPriority+0x4c>)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	440b      	add	r3, r1
 8003d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d28:	e00a      	b.n	8003d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4908      	ldr	r1, [pc, #32]	@ (8003d50 <__NVIC_SetPriority+0x50>)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3b04      	subs	r3, #4
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	761a      	strb	r2, [r3, #24]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e100 	.word	0xe000e100
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	@ 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f1c3 0307 	rsb	r3, r3, #7
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	bf28      	it	cs
 8003d72:	2304      	movcs	r3, #4
 8003d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2b06      	cmp	r3, #6
 8003d7c:	d902      	bls.n	8003d84 <NVIC_EncodePriority+0x30>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3b03      	subs	r3, #3
 8003d82:	e000      	b.n	8003d86 <NVIC_EncodePriority+0x32>
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	401a      	ands	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	43d9      	mvns	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	4313      	orrs	r3, r2
         );
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	@ 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dcc:	d301      	bcc.n	8003dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <SysTick_Config+0x40>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dda:	210f      	movs	r1, #15
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003de0:	f7ff ff8e 	bl	8003d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <SysTick_Config+0x40>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dea:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <SysTick_Config+0x40>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	e000e010 	.word	0xe000e010

08003e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff29 	bl	8003c60 <__NVIC_SetPriorityGrouping>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e24:	f7ff ff40 	bl	8003ca8 <__NVIC_GetPriorityGrouping>
 8003e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	6978      	ldr	r0, [r7, #20]
 8003e30:	f7ff ff90 	bl	8003d54 <NVIC_EncodePriority>
 8003e34:	4602      	mov	r2, r0
 8003e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff5f 	bl	8003d00 <__NVIC_SetPriority>
}
 8003e42:	bf00      	nop
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff33 	bl	8003cc4 <__NVIC_EnableIRQ>
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ffa4 	bl	8003dbc <SysTick_Config>
 8003e74:	4603      	mov	r3, r0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e014      	b.n	8003eba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	791b      	ldrb	r3, [r3, #4]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fe f8a3 	bl	8001fec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b2      	b.n	8004042 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	795b      	ldrb	r3, [r3, #5]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_DAC_Start_DMA+0x24>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e0ac      	b.n	8004042 <HAL_DAC_Start_DMA+0x17e>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d129      	bne.n	8003f4e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	4a53      	ldr	r2, [pc, #332]	@ (800404c <HAL_DAC_Start_DMA+0x188>)
 8003f00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	4a52      	ldr	r2, [pc, #328]	@ (8004050 <HAL_DAC_Start_DMA+0x18c>)
 8003f08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4a51      	ldr	r2, [pc, #324]	@ (8004054 <HAL_DAC_Start_DMA+0x190>)
 8003f10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f20:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_DAC_Start_DMA+0x6c>
 8003f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d005      	beq.n	8003f3a <HAL_DAC_Start_DMA+0x76>
 8003f2e:	e009      	b.n	8003f44 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	61bb      	str	r3, [r7, #24]
        break;
 8003f38:	e033      	b.n	8003fa2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	61bb      	str	r3, [r7, #24]
        break;
 8003f42:	e02e      	b.n	8003fa2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3310      	adds	r3, #16
 8003f4a:	61bb      	str	r3, [r7, #24]
        break;
 8003f4c:	e029      	b.n	8003fa2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4a41      	ldr	r2, [pc, #260]	@ (8004058 <HAL_DAC_Start_DMA+0x194>)
 8003f54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a40      	ldr	r2, [pc, #256]	@ (800405c <HAL_DAC_Start_DMA+0x198>)
 8003f5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4a3f      	ldr	r2, [pc, #252]	@ (8004060 <HAL_DAC_Start_DMA+0x19c>)
 8003f64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003f74:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_DAC_Start_DMA+0xc0>
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d005      	beq.n	8003f8e <HAL_DAC_Start_DMA+0xca>
 8003f82:	e009      	b.n	8003f98 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	61bb      	str	r3, [r7, #24]
        break;
 8003f8c:	e009      	b.n	8003fa2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3318      	adds	r3, #24
 8003f94:	61bb      	str	r3, [r7, #24]
        break;
 8003f96:	e004      	b.n	8003fa2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	331c      	adds	r3, #28
 8003f9e:	61bb      	str	r3, [r7, #24]
        break;
 8003fa0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d111      	bne.n	8003fcc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6898      	ldr	r0, [r3, #8]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	f000 fb5d 	bl	8004680 <HAL_DMA_Start_IT>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e010      	b.n	8003fee <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003fda:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68d8      	ldr	r0, [r3, #12]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	f000 fb4b 	bl	8004680 <HAL_DMA_Start_IT>
 8003fea:	4603      	mov	r3, r0
 8003fec:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11c      	bne.n	8004034 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2201      	movs	r2, #1
 8004008:	409a      	lsls	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004012:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <HAL_DAC_Start_DMA+0x1a0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	4a13      	ldr	r2, [pc, #76]	@ (8004068 <HAL_DAC_Start_DMA+0x1a4>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	3301      	adds	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004024:	e002      	b.n	800402c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	3b01      	subs	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f9      	bne.n	8004026 <HAL_DAC_Start_DMA+0x162>
 8004032:	e005      	b.n	8004040 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f043 0204 	orr.w	r2, r3, #4
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004040:	7ffb      	ldrb	r3, [r7, #31]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	0800441d 	.word	0x0800441d
 8004050:	0800443f 	.word	0x0800443f
 8004054:	0800445b 	.word	0x0800445b
 8004058:	080044c5 	.word	0x080044c5
 800405c:	080044e7 	.word	0x080044e7
 8004060:	08004503 	.word	0x08004503
 8004064:	20000044 	.word	0x20000044
 8004068:	053e2d63 	.word	0x053e2d63

0800406c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	@ 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_DAC_ConfigChannel+0x1c>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e1a1      	b.n	800440c <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	795b      	ldrb	r3, [r3, #5]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_DAC_ConfigChannel+0x32>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e198      	b.n	800440c <HAL_DAC_ConfigChannel+0x364>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2202      	movs	r2, #2
 80040e4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d17a      	bne.n	80041e4 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80040ee:	f7fe fa85 	bl	80025fc <HAL_GetTick>
 80040f2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d13d      	bne.n	8004176 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040fa:	e018      	b.n	800412e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040fc:	f7fe fa7e 	bl	80025fc <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d911      	bls.n	800412e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f043 0208 	orr.w	r2, r3, #8
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2203      	movs	r2, #3
 8004128:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e16e      	b.n	800440c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1df      	bne.n	80040fc <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40
 8004146:	e020      	b.n	800418a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004148:	f7fe fa58 	bl	80025fc <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d90f      	bls.n	8004176 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	da0a      	bge.n	8004176 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f043 0208 	orr.w	r2, r3, #8
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2203      	movs	r2, #3
 8004170:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e14a      	b.n	800440c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	2b00      	cmp	r3, #0
 800417e:	dbe3      	blt.n	8004148 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004188:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	ea02 0103 	and.w	r1, r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	21ff      	movs	r1, #255	@ 0xff
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	ea02 0103 	and.w	r1, r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d11d      	bne.n	8004228 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	221f      	movs	r2, #31
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	4013      	ands	r3, r2
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	4313      	orrs	r3, r2
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004226:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2207      	movs	r2, #7
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004240:	4013      	ands	r3, r2
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800424c:	2300      	movs	r3, #0
 800424e:	623b      	str	r3, [r7, #32]
 8004250:	e00f      	b.n	8004272 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d102      	bne.n	8004260 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800425a:	2301      	movs	r3, #1
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	e008      	b.n	8004272 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004268:	2301      	movs	r3, #1
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	e001      	b.n	8004272 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	6a3a      	ldr	r2, [r7, #32]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004294:	4013      	ands	r3, r2
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	791b      	ldrb	r3, [r3, #4]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d102      	bne.n	80042a6 <HAL_DAC_ConfigChannel+0x1fe>
 80042a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042a4:	e000      	b.n	80042a8 <HAL_DAC_ConfigChannel+0x200>
 80042a6:	2300      	movs	r3, #0
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c0:	4013      	ands	r3, r2
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	795b      	ldrb	r3, [r3, #5]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d102      	bne.n	80042d2 <HAL_DAC_ConfigChannel+0x22a>
 80042cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042d0:	e000      	b.n	80042d4 <HAL_DAC_ConfigChannel+0x22c>
 80042d2:	2300      	movs	r3, #0
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d114      	bne.n	8004314 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80042ea:	f001 fa91 	bl	8005810 <HAL_RCC_GetHCLKFreq>
 80042ee:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4a48      	ldr	r2, [pc, #288]	@ (8004414 <HAL_DAC_ConfigChannel+0x36c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d904      	bls.n	8004302 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004300:	e00f      	b.n	8004322 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4a44      	ldr	r2, [pc, #272]	@ (8004418 <HAL_DAC_ConfigChannel+0x370>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d90a      	bls.n	8004320 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
 8004312:	e006      	b.n	8004322 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431a:	4313      	orrs	r3, r2
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
 800431e:	e000      	b.n	8004322 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004320:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004330:	4313      	orrs	r3, r2
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43da      	mvns	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	400a      	ands	r2, r1
 8004358:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004374:	4013      	ands	r3, r2
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438c:	4313      	orrs	r3, r2
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004396:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6819      	ldr	r1, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	22c0      	movs	r2, #192	@ 0xc0
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	400a      	ands	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	089b      	lsrs	r3, r3, #2
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	ea02 0103 	and.w	r1, r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	409a      	lsls	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800440a:	7ffb      	ldrb	r3, [r7, #31]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3728      	adds	r7, #40	@ 0x28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	09896800 	.word	0x09896800
 8004418:	04c4b400 	.word	0x04c4b400

0800441c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff fe1e 	bl	800406c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	711a      	strb	r2, [r3, #4]
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fe17 	bl	8004080 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f043 0204 	orr.w	r2, r3, #4
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff fe0d 	bl	8004094 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	711a      	strb	r2, [r3, #4]
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff ffd8 	bl	8004488 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	711a      	strb	r2, [r3, #4]
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff ffd1 	bl	800449c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f043 0204 	orr.w	r2, r3, #4
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff ffc7 	bl	80044b0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	711a      	strb	r2, [r3, #4]
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e08d      	b.n	800465e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	4b47      	ldr	r3, [pc, #284]	@ (8004668 <HAL_DMA_Init+0x138>)
 800454a:	429a      	cmp	r2, r3
 800454c:	d80f      	bhi.n	800456e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4b45      	ldr	r3, [pc, #276]	@ (800466c <HAL_DMA_Init+0x13c>)
 8004556:	4413      	add	r3, r2
 8004558:	4a45      	ldr	r2, [pc, #276]	@ (8004670 <HAL_DMA_Init+0x140>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	009a      	lsls	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a42      	ldr	r2, [pc, #264]	@ (8004674 <HAL_DMA_Init+0x144>)
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40
 800456c:	e00e      	b.n	800458c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	4b40      	ldr	r3, [pc, #256]	@ (8004678 <HAL_DMA_Init+0x148>)
 8004576:	4413      	add	r3, r2
 8004578:	4a3d      	ldr	r2, [pc, #244]	@ (8004670 <HAL_DMA_Init+0x140>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	009a      	lsls	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a3c      	ldr	r2, [pc, #240]	@ (800467c <HAL_DMA_Init+0x14c>)
 800458a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80045a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f9b6 	bl	8004950 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ec:	d102      	bne.n	80045f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004608:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d010      	beq.n	8004634 <HAL_DMA_Init+0x104>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d80c      	bhi.n	8004634 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9d6 	bl	80049cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	e008      	b.n	8004646 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40020407 	.word	0x40020407
 800466c:	bffdfff8 	.word	0xbffdfff8
 8004670:	cccccccd 	.word	0xcccccccd
 8004674:	40020000 	.word	0x40020000
 8004678:	bffdfbf8 	.word	0xbffdfbf8
 800467c:	40020400 	.word	0x40020400

08004680 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_DMA_Start_IT+0x20>
 800469c:	2302      	movs	r3, #2
 800469e:	e066      	b.n	800476e <HAL_DMA_Start_IT+0xee>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d155      	bne.n	8004760 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f8fb 	bl	80048d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 020e 	orr.w	r2, r2, #14
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e00f      	b.n	8004718 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 020a 	orr.w	r2, r2, #10
 8004716:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004734:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e005      	b.n	800476c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004768:	2302      	movs	r3, #2
 800476a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800476c:	7dfb      	ldrb	r3, [r7, #23]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	2204      	movs	r2, #4
 8004798:	409a      	lsls	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4013      	ands	r3, r2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d026      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x7a>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d021      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d107      	bne.n	80047ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0204 	bic.w	r2, r2, #4
 80047c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	f003 021f 	and.w	r2, r3, #31
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	2104      	movs	r1, #4
 80047d8:	fa01 f202 	lsl.w	r2, r1, r2
 80047dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d071      	beq.n	80048ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047ee:	e06c      	b.n	80048ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	2202      	movs	r2, #2
 80047fa:	409a      	lsls	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02e      	beq.n	8004862 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d029      	beq.n	8004862 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10b      	bne.n	8004834 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 020a 	bic.w	r2, r2, #10
 800482a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004838:	f003 021f 	and.w	r2, r3, #31
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	2102      	movs	r1, #2
 8004842:	fa01 f202 	lsl.w	r2, r1, r2
 8004846:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d038      	beq.n	80048ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004860:	e033      	b.n	80048ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2208      	movs	r2, #8
 800486c:	409a      	lsls	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d02a      	beq.n	80048cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d025      	beq.n	80048cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 020e 	bic.w	r2, r2, #14
 800488e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004894:	f003 021f 	and.w	r2, r3, #31
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f202 	lsl.w	r2, r1, r2
 80048a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d004      	beq.n	80048cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048ca:	bf00      	nop
 80048cc:	bf00      	nop
}
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004902:	f003 021f 	and.w	r2, r3, #31
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	2101      	movs	r1, #1
 800490c:	fa01 f202 	lsl.w	r2, r1, r2
 8004910:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b10      	cmp	r3, #16
 8004920:	d108      	bne.n	8004934 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004932:	e007      	b.n	8004944 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	4b16      	ldr	r3, [pc, #88]	@ (80049b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004960:	429a      	cmp	r2, r3
 8004962:	d802      	bhi.n	800496a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004964:	4b15      	ldr	r3, [pc, #84]	@ (80049bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e001      	b.n	800496e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800496c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	3b08      	subs	r3, #8
 800497a:	4a12      	ldr	r2, [pc, #72]	@ (80049c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	461a      	mov	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a0b      	ldr	r2, [pc, #44]	@ (80049c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800499a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2201      	movs	r2, #1
 80049a4:	409a      	lsls	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40020407 	.word	0x40020407
 80049bc:	40020800 	.word	0x40020800
 80049c0:	40020820 	.word	0x40020820
 80049c4:	cccccccd 	.word	0xcccccccd
 80049c8:	40020880 	.word	0x40020880

080049cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a08      	ldr	r2, [pc, #32]	@ (8004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80049ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2201      	movs	r2, #1
 80049fa:	409a      	lsls	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	1000823f 	.word	0x1000823f
 8004a10:	40020940 	.word	0x40020940

08004a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a22:	e15a      	b.n	8004cda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2101      	movs	r1, #1
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 814c 	beq.w	8004cd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d005      	beq.n	8004a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d130      	bne.n	8004ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	2203      	movs	r2, #3
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4013      	ands	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 0201 	and.w	r2, r3, #1
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d017      	beq.n	8004af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	2203      	movs	r2, #3
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d123      	bne.n	8004b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	08da      	lsrs	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3208      	adds	r2, #8
 8004b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	220f      	movs	r2, #15
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	08da      	lsrs	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3208      	adds	r2, #8
 8004b40:	6939      	ldr	r1, [r7, #16]
 8004b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0203 	and.w	r2, r3, #3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a6 	beq.w	8004cd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b88:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf8 <HAL_GPIO_Init+0x2e4>)
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8c:	4a5a      	ldr	r2, [pc, #360]	@ (8004cf8 <HAL_GPIO_Init+0x2e4>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b94:	4b58      	ldr	r3, [pc, #352]	@ (8004cf8 <HAL_GPIO_Init+0x2e4>)
 8004b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ba0:	4a56      	ldr	r2, [pc, #344]	@ (8004cfc <HAL_GPIO_Init+0x2e8>)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	220f      	movs	r2, #15
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004bca:	d01f      	beq.n	8004c0c <HAL_GPIO_Init+0x1f8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a4c      	ldr	r2, [pc, #304]	@ (8004d00 <HAL_GPIO_Init+0x2ec>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d019      	beq.n	8004c08 <HAL_GPIO_Init+0x1f4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8004d04 <HAL_GPIO_Init+0x2f0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <HAL_GPIO_Init+0x1f0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a4a      	ldr	r2, [pc, #296]	@ (8004d08 <HAL_GPIO_Init+0x2f4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00d      	beq.n	8004c00 <HAL_GPIO_Init+0x1ec>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a49      	ldr	r2, [pc, #292]	@ (8004d0c <HAL_GPIO_Init+0x2f8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <HAL_GPIO_Init+0x1e8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a48      	ldr	r2, [pc, #288]	@ (8004d10 <HAL_GPIO_Init+0x2fc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_GPIO_Init+0x1e4>
 8004bf4:	2305      	movs	r3, #5
 8004bf6:	e00a      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004bf8:	2306      	movs	r3, #6
 8004bfa:	e008      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	e006      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004c00:	2303      	movs	r3, #3
 8004c02:	e004      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e002      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	f002 0203 	and.w	r2, r2, #3
 8004c14:	0092      	lsls	r2, r2, #2
 8004c16:	4093      	lsls	r3, r2
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c1e:	4937      	ldr	r1, [pc, #220]	@ (8004cfc <HAL_GPIO_Init+0x2e8>)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	3302      	adds	r3, #2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c2c:	4b39      	ldr	r3, [pc, #228]	@ (8004d14 <HAL_GPIO_Init+0x300>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c50:	4a30      	ldr	r2, [pc, #192]	@ (8004d14 <HAL_GPIO_Init+0x300>)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c56:	4b2f      	ldr	r3, [pc, #188]	@ (8004d14 <HAL_GPIO_Init+0x300>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c7a:	4a26      	ldr	r2, [pc, #152]	@ (8004d14 <HAL_GPIO_Init+0x300>)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c80:	4b24      	ldr	r3, [pc, #144]	@ (8004d14 <HAL_GPIO_Init+0x300>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d14 <HAL_GPIO_Init+0x300>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004caa:	4b1a      	ldr	r3, [pc, #104]	@ (8004d14 <HAL_GPIO_Init+0x300>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cce:	4a11      	ldr	r2, [pc, #68]	@ (8004d14 <HAL_GPIO_Init+0x300>)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f ae9d 	bne.w	8004a24 <HAL_GPIO_Init+0x10>
  }
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	48000400 	.word	0x48000400
 8004d04:	48000800 	.word	0x48000800
 8004d08:	48000c00 	.word	0x48000c00
 8004d0c:	48001000 	.word	0x48001000
 8004d10:	48001400 	.word	0x48001400
 8004d14:	40010400 	.word	0x40010400

08004d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	807b      	strh	r3, [r7, #2]
 8004d24:	4613      	mov	r3, r2
 8004d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d28:	787b      	ldrb	r3, [r7, #1]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d2e:	887a      	ldrh	r2, [r7, #2]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d34:	e002      	b.n	8004d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d141      	bne.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d56:	4b4b      	ldr	r3, [pc, #300]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d62:	d131      	bne.n	8004dc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d64:	4b47      	ldr	r3, [pc, #284]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d6a:	4a46      	ldr	r2, [pc, #280]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d74:	4b43      	ldr	r3, [pc, #268]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d7c:	4a41      	ldr	r2, [pc, #260]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d84:	4b40      	ldr	r3, [pc, #256]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2232      	movs	r2, #50	@ 0x32
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	0c9b      	lsrs	r3, r3, #18
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d9a:	e002      	b.n	8004da2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004da2:	4b38      	ldr	r3, [pc, #224]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dae:	d102      	bne.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f2      	bne.n	8004d9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004db6:	4b33      	ldr	r3, [pc, #204]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc2:	d158      	bne.n	8004e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e057      	b.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dce:	4a2d      	ldr	r2, [pc, #180]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004dd8:	e04d      	b.n	8004e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de0:	d141      	bne.n	8004e66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004de2:	4b28      	ldr	r3, [pc, #160]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dee:	d131      	bne.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004df0:	4b24      	ldr	r3, [pc, #144]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004df6:	4a23      	ldr	r2, [pc, #140]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e00:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e08:	4a1e      	ldr	r2, [pc, #120]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e10:	4b1d      	ldr	r3, [pc, #116]	@ (8004e88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2232      	movs	r2, #50	@ 0x32
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	0c9b      	lsrs	r3, r3, #18
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e26:	e002      	b.n	8004e2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e2e:	4b15      	ldr	r3, [pc, #84]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3a:	d102      	bne.n	8004e42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f2      	bne.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4e:	d112      	bne.n	8004e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e011      	b.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e54:	4b0b      	ldr	r3, [pc, #44]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e64:	e007      	b.n	8004e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e66:	4b07      	ldr	r3, [pc, #28]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e6e:	4a05      	ldr	r2, [pc, #20]	@ (8004e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	40007000 	.word	0x40007000
 8004e88:	20000044 	.word	0x20000044
 8004e8c:	431bde83 	.word	0x431bde83

08004e90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e94:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	4a04      	ldr	r2, [pc, #16]	@ (8004eac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e9e:	6093      	str	r3, [r2, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40007000 	.word	0x40007000

08004eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e2fe      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d075      	beq.n	8004fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ece:	4b97      	ldr	r3, [pc, #604]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ed8:	4b94      	ldr	r3, [pc, #592]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d102      	bne.n	8004eee <HAL_RCC_OscConfig+0x3e>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d002      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x44>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d10b      	bne.n	8004f0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef4:	4b8d      	ldr	r3, [pc, #564]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d05b      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x108>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d157      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e2d9      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f14:	d106      	bne.n	8004f24 <HAL_RCC_OscConfig+0x74>
 8004f16:	4b85      	ldr	r3, [pc, #532]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a84      	ldr	r2, [pc, #528]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e01d      	b.n	8004f60 <HAL_RCC_OscConfig+0xb0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x98>
 8004f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7e      	ldr	r2, [pc, #504]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b7c      	ldr	r3, [pc, #496]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a7b      	ldr	r2, [pc, #492]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	e00b      	b.n	8004f60 <HAL_RCC_OscConfig+0xb0>
 8004f48:	4b78      	ldr	r3, [pc, #480]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a77      	ldr	r2, [pc, #476]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b75      	ldr	r3, [pc, #468]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a74      	ldr	r2, [pc, #464]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d013      	beq.n	8004f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f68:	f7fd fb48 	bl	80025fc <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f70:	f7fd fb44 	bl	80025fc <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	@ 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e29e      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f82:	4b6a      	ldr	r3, [pc, #424]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0xc0>
 8004f8e:	e014      	b.n	8004fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fd fb34 	bl	80025fc <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f98:	f7fd fb30 	bl	80025fc <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	@ 0x64
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e28a      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004faa:	4b60      	ldr	r3, [pc, #384]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0xe8>
 8004fb6:	e000      	b.n	8004fba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d075      	beq.n	80050b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fc6:	4b59      	ldr	r3, [pc, #356]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 030c 	and.w	r3, r3, #12
 8004fce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fd0:	4b56      	ldr	r3, [pc, #344]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d102      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x136>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d002      	beq.n	8004fec <HAL_RCC_OscConfig+0x13c>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d11f      	bne.n	800502c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fec:	4b4f      	ldr	r3, [pc, #316]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_OscConfig+0x154>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e25d      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005004:	4b49      	ldr	r3, [pc, #292]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	061b      	lsls	r3, r3, #24
 8005012:	4946      	ldr	r1, [pc, #280]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005018:	4b45      	ldr	r3, [pc, #276]	@ (8005130 <HAL_RCC_OscConfig+0x280>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f7fd faa1 	bl	8002564 <HAL_InitTick>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d043      	beq.n	80050b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e249      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d023      	beq.n	800507c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005034:	4b3d      	ldr	r3, [pc, #244]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3c      	ldr	r2, [pc, #240]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 800503a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800503e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd fadc 	bl	80025fc <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005048:	f7fd fad8 	bl	80025fc <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e232      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800505a:	4b34      	ldr	r3, [pc, #208]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005066:	4b31      	ldr	r3, [pc, #196]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	061b      	lsls	r3, r3, #24
 8005074:	492d      	ldr	r1, [pc, #180]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]
 800507a:	e01a      	b.n	80050b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507c:	4b2b      	ldr	r3, [pc, #172]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2a      	ldr	r2, [pc, #168]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8005082:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fd fab8 	bl	80025fc <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005090:	f7fd fab4 	bl	80025fc <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e20e      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a2:	4b22      	ldr	r3, [pc, #136]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x1e0>
 80050ae:	e000      	b.n	80050b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d041      	beq.n	8005142 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01c      	beq.n	8005100 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c6:	4b19      	ldr	r3, [pc, #100]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 80050c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050cc:	4a17      	ldr	r2, [pc, #92]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fd fa91 	bl	80025fc <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050de:	f7fd fa8d 	bl	80025fc <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e1e7      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050f0:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 80050f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ef      	beq.n	80050de <HAL_RCC_OscConfig+0x22e>
 80050fe:	e020      	b.n	8005142 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8005102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005106:	4a09      	ldr	r2, [pc, #36]	@ (800512c <HAL_RCC_OscConfig+0x27c>)
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005110:	f7fd fa74 	bl	80025fc <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005116:	e00d      	b.n	8005134 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005118:	f7fd fa70 	bl	80025fc <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d906      	bls.n	8005134 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e1ca      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005134:	4b8c      	ldr	r3, [pc, #560]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ea      	bne.n	8005118 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80a6 	beq.w	800529c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005150:	2300      	movs	r3, #0
 8005152:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005154:	4b84      	ldr	r3, [pc, #528]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_OscConfig+0x2b4>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x2b6>
 8005164:	2300      	movs	r3, #0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800516a:	4b7f      	ldr	r3, [pc, #508]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516e:	4a7e      	ldr	r2, [pc, #504]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005174:	6593      	str	r3, [r2, #88]	@ 0x58
 8005176:	4b7c      	ldr	r3, [pc, #496]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005182:	2301      	movs	r3, #1
 8005184:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005186:	4b79      	ldr	r3, [pc, #484]	@ (800536c <HAL_RCC_OscConfig+0x4bc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518e:	2b00      	cmp	r3, #0
 8005190:	d118      	bne.n	80051c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005192:	4b76      	ldr	r3, [pc, #472]	@ (800536c <HAL_RCC_OscConfig+0x4bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a75      	ldr	r2, [pc, #468]	@ (800536c <HAL_RCC_OscConfig+0x4bc>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800519e:	f7fd fa2d 	bl	80025fc <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a6:	f7fd fa29 	bl	80025fc <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e183      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051b8:	4b6c      	ldr	r3, [pc, #432]	@ (800536c <HAL_RCC_OscConfig+0x4bc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d108      	bne.n	80051de <HAL_RCC_OscConfig+0x32e>
 80051cc:	4b66      	ldr	r3, [pc, #408]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d2:	4a65      	ldr	r2, [pc, #404]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051dc:	e024      	b.n	8005228 <HAL_RCC_OscConfig+0x378>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b05      	cmp	r3, #5
 80051e4:	d110      	bne.n	8005208 <HAL_RCC_OscConfig+0x358>
 80051e6:	4b60      	ldr	r3, [pc, #384]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ec:	4a5e      	ldr	r2, [pc, #376]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80051ee:	f043 0304 	orr.w	r3, r3, #4
 80051f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005206:	e00f      	b.n	8005228 <HAL_RCC_OscConfig+0x378>
 8005208:	4b57      	ldr	r3, [pc, #348]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520e:	4a56      	ldr	r2, [pc, #344]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005218:	4b53      	ldr	r3, [pc, #332]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521e:	4a52      	ldr	r2, [pc, #328]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005220:	f023 0304 	bic.w	r3, r3, #4
 8005224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d016      	beq.n	800525e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005230:	f7fd f9e4 	bl	80025fc <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005236:	e00a      	b.n	800524e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005238:	f7fd f9e0 	bl	80025fc <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e138      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800524e:	4b46      	ldr	r3, [pc, #280]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ed      	beq.n	8005238 <HAL_RCC_OscConfig+0x388>
 800525c:	e015      	b.n	800528a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525e:	f7fd f9cd 	bl	80025fc <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005264:	e00a      	b.n	800527c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005266:	f7fd f9c9 	bl	80025fc <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e121      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800527c:	4b3a      	ldr	r3, [pc, #232]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1ed      	bne.n	8005266 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800528a:	7ffb      	ldrb	r3, [r7, #31]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005290:	4b35      	ldr	r3, [pc, #212]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005294:	4a34      	ldr	r2, [pc, #208]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800529a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d03c      	beq.n	8005322 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01c      	beq.n	80052ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80052b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fd f99c 	bl	80025fc <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052c8:	f7fd f998 	bl	80025fc <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0f2      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052da:	4b23      	ldr	r3, [pc, #140]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80052dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ef      	beq.n	80052c8 <HAL_RCC_OscConfig+0x418>
 80052e8:	e01b      	b.n	8005322 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fa:	f7fd f97f 	bl	80025fc <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005302:	f7fd f97b 	bl	80025fc <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e0d5      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005314:	4b14      	ldr	r3, [pc, #80]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005316:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1ef      	bne.n	8005302 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80c9 	beq.w	80054be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800532c:	4b0e      	ldr	r3, [pc, #56]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 030c 	and.w	r3, r3, #12
 8005334:	2b0c      	cmp	r3, #12
 8005336:	f000 8083 	beq.w	8005440 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d15e      	bne.n	8005400 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005342:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a08      	ldr	r2, [pc, #32]	@ (8005368 <HAL_RCC_OscConfig+0x4b8>)
 8005348:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800534c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fd f955 	bl	80025fc <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005354:	e00c      	b.n	8005370 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005356:	f7fd f951 	bl	80025fc <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d905      	bls.n	8005370 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e0ab      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
 8005368:	40021000 	.word	0x40021000
 800536c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005370:	4b55      	ldr	r3, [pc, #340]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1ec      	bne.n	8005356 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800537c:	4b52      	ldr	r3, [pc, #328]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	4b52      	ldr	r3, [pc, #328]	@ (80054cc <HAL_RCC_OscConfig+0x61c>)
 8005382:	4013      	ands	r3, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6a11      	ldr	r1, [r2, #32]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800538c:	3a01      	subs	r2, #1
 800538e:	0112      	lsls	r2, r2, #4
 8005390:	4311      	orrs	r1, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005396:	0212      	lsls	r2, r2, #8
 8005398:	4311      	orrs	r1, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800539e:	0852      	lsrs	r2, r2, #1
 80053a0:	3a01      	subs	r2, #1
 80053a2:	0552      	lsls	r2, r2, #21
 80053a4:	4311      	orrs	r1, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053aa:	0852      	lsrs	r2, r2, #1
 80053ac:	3a01      	subs	r2, #1
 80053ae:	0652      	lsls	r2, r2, #25
 80053b0:	4311      	orrs	r1, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053b6:	06d2      	lsls	r2, r2, #27
 80053b8:	430a      	orrs	r2, r1
 80053ba:	4943      	ldr	r1, [pc, #268]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c0:	4b41      	ldr	r3, [pc, #260]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a40      	ldr	r2, [pc, #256]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 80053c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053cc:	4b3e      	ldr	r3, [pc, #248]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a3d      	ldr	r2, [pc, #244]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 80053d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fd f910 	bl	80025fc <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fd f90c 	bl	80025fc <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e066      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053f2:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x530>
 80053fe:	e05e      	b.n	80054be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005400:	4b31      	ldr	r3, [pc, #196]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a30      	ldr	r2, [pc, #192]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 8005406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800540a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fd f8f6 	bl	80025fc <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7fd f8f2 	bl	80025fc <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e04c      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005426:	4b28      	ldr	r3, [pc, #160]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005432:	4b25      	ldr	r3, [pc, #148]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	4924      	ldr	r1, [pc, #144]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 8005438:	4b25      	ldr	r3, [pc, #148]	@ (80054d0 <HAL_RCC_OscConfig+0x620>)
 800543a:	4013      	ands	r3, r2
 800543c:	60cb      	str	r3, [r1, #12]
 800543e:	e03e      	b.n	80054be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e039      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800544c:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <HAL_RCC_OscConfig+0x618>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f003 0203 	and.w	r2, r3, #3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	429a      	cmp	r2, r3
 800545e:	d12c      	bne.n	80054ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	3b01      	subs	r3, #1
 800546c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d123      	bne.n	80054ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800547e:	429a      	cmp	r2, r3
 8005480:	d11b      	bne.n	80054ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800548e:	429a      	cmp	r2, r3
 8005490:	d113      	bne.n	80054ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	3b01      	subs	r3, #1
 80054a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d109      	bne.n	80054ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	3b01      	subs	r3, #1
 80054b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d001      	beq.n	80054be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000
 80054cc:	019f800c 	.word	0x019f800c
 80054d0:	feeefffc 	.word	0xfeeefffc

080054d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e11e      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054ec:	4b91      	ldr	r3, [pc, #580]	@ (8005734 <HAL_RCC_ClockConfig+0x260>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d910      	bls.n	800551c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fa:	4b8e      	ldr	r3, [pc, #568]	@ (8005734 <HAL_RCC_ClockConfig+0x260>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 020f 	bic.w	r2, r3, #15
 8005502:	498c      	ldr	r1, [pc, #560]	@ (8005734 <HAL_RCC_ClockConfig+0x260>)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b8a      	ldr	r3, [pc, #552]	@ (8005734 <HAL_RCC_ClockConfig+0x260>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e106      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d073      	beq.n	8005610 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d129      	bne.n	8005584 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005530:	4b81      	ldr	r3, [pc, #516]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0f4      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005540:	f000 f99e 	bl	8005880 <RCC_GetSysClockFreqFromPLLSource>
 8005544:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4a7c      	ldr	r2, [pc, #496]	@ (800573c <HAL_RCC_ClockConfig+0x268>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d93f      	bls.n	80055ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800554e:	4b7a      	ldr	r3, [pc, #488]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005562:	2b00      	cmp	r3, #0
 8005564:	d033      	beq.n	80055ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800556a:	2b00      	cmp	r3, #0
 800556c:	d12f      	bne.n	80055ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800556e:	4b72      	ldr	r3, [pc, #456]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005576:	4a70      	ldr	r2, [pc, #448]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800557c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800557e:	2380      	movs	r3, #128	@ 0x80
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e024      	b.n	80055ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d107      	bne.n	800559c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800558c:	4b6a      	ldr	r3, [pc, #424]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0c6      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800559c:	4b66      	ldr	r3, [pc, #408]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0be      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055ac:	f000 f8ce 	bl	800574c <HAL_RCC_GetSysClockFreq>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4a61      	ldr	r2, [pc, #388]	@ (800573c <HAL_RCC_ClockConfig+0x268>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d909      	bls.n	80055ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055c2:	4a5d      	ldr	r2, [pc, #372]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 80055c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80055ca:	2380      	movs	r3, #128	@ 0x80
 80055cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 0203 	bic.w	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4957      	ldr	r1, [pc, #348]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fd f80c 	bl	80025fc <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fd f808 	bl	80025fc <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e095      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 020c 	and.w	r2, r3, #12
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	429a      	cmp	r2, r3
 800560e:	d1eb      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d023      	beq.n	8005664 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005628:	4b43      	ldr	r3, [pc, #268]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a42      	ldr	r2, [pc, #264]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 800562e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005632:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005640:	4b3d      	ldr	r3, [pc, #244]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005648:	4a3b      	ldr	r2, [pc, #236]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 800564a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800564e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b39      	ldr	r3, [pc, #228]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4936      	ldr	r1, [pc, #216]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
 8005662:	e008      	b.n	8005676 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b80      	cmp	r3, #128	@ 0x80
 8005668:	d105      	bne.n	8005676 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800566a:	4b33      	ldr	r3, [pc, #204]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4a32      	ldr	r2, [pc, #200]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005670:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005674:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005676:	4b2f      	ldr	r3, [pc, #188]	@ (8005734 <HAL_RCC_ClockConfig+0x260>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d21d      	bcs.n	80056c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005684:	4b2b      	ldr	r3, [pc, #172]	@ (8005734 <HAL_RCC_ClockConfig+0x260>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f023 020f 	bic.w	r2, r3, #15
 800568c:	4929      	ldr	r1, [pc, #164]	@ (8005734 <HAL_RCC_ClockConfig+0x260>)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	4313      	orrs	r3, r2
 8005692:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005694:	f7fc ffb2 	bl	80025fc <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569c:	f7fc ffae 	bl	80025fc <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e03b      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b20      	ldr	r3, [pc, #128]	@ (8005734 <HAL_RCC_ClockConfig+0x260>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d1ed      	bne.n	800569c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4917      	ldr	r1, [pc, #92]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ea:	4b13      	ldr	r3, [pc, #76]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	490f      	ldr	r1, [pc, #60]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056fe:	f000 f825 	bl	800574c <HAL_RCC_GetSysClockFreq>
 8005702:	4602      	mov	r2, r0
 8005704:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	490c      	ldr	r1, [pc, #48]	@ (8005740 <HAL_RCC_ClockConfig+0x26c>)
 8005710:	5ccb      	ldrb	r3, [r1, r3]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <HAL_RCC_ClockConfig+0x270>)
 800571c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800571e:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <HAL_RCC_ClockConfig+0x274>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7fc ff1e 	bl	8002564 <HAL_InitTick>
 8005728:	4603      	mov	r3, r0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40022000 	.word	0x40022000
 8005738:	40021000 	.word	0x40021000
 800573c:	04c4b400 	.word	0x04c4b400
 8005740:	0800b53c 	.word	0x0800b53c
 8005744:	20000044 	.word	0x20000044
 8005748:	20000048 	.word	0x20000048

0800574c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005752:	4b2c      	ldr	r3, [pc, #176]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b04      	cmp	r3, #4
 800575c:	d102      	bne.n	8005764 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800575e:	4b2a      	ldr	r3, [pc, #168]	@ (8005808 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e047      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005764:	4b27      	ldr	r3, [pc, #156]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030c 	and.w	r3, r3, #12
 800576c:	2b08      	cmp	r3, #8
 800576e:	d102      	bne.n	8005776 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005770:	4b26      	ldr	r3, [pc, #152]	@ (800580c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e03e      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005776:	4b23      	ldr	r3, [pc, #140]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b0c      	cmp	r3, #12
 8005780:	d136      	bne.n	80057f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005782:	4b20      	ldr	r3, [pc, #128]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800578c:	4b1d      	ldr	r3, [pc, #116]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	3301      	adds	r3, #1
 8005798:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d10c      	bne.n	80057ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057a0:	4a1a      	ldr	r2, [pc, #104]	@ (800580c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	4a16      	ldr	r2, [pc, #88]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057aa:	68d2      	ldr	r2, [r2, #12]
 80057ac:	0a12      	lsrs	r2, r2, #8
 80057ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	617b      	str	r3, [r7, #20]
      break;
 80057b8:	e00c      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057ba:	4a13      	ldr	r2, [pc, #76]	@ (8005808 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	4a10      	ldr	r2, [pc, #64]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c4:	68d2      	ldr	r2, [r2, #12]
 80057c6:	0a12      	lsrs	r2, r2, #8
 80057c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
 80057d0:	617b      	str	r3, [r7, #20]
      break;
 80057d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	0e5b      	lsrs	r3, r3, #25
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	3301      	adds	r3, #1
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	e001      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057f4:	693b      	ldr	r3, [r7, #16]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	00f42400 	.word	0x00f42400
 800580c:	007a1200 	.word	0x007a1200

08005810 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005814:	4b03      	ldr	r3, [pc, #12]	@ (8005824 <HAL_RCC_GetHCLKFreq+0x14>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000044 	.word	0x20000044

08005828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800582c:	f7ff fff0 	bl	8005810 <HAL_RCC_GetHCLKFreq>
 8005830:	4602      	mov	r2, r0
 8005832:	4b06      	ldr	r3, [pc, #24]	@ (800584c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4904      	ldr	r1, [pc, #16]	@ (8005850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800583e:	5ccb      	ldrb	r3, [r1, r3]
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40021000 	.word	0x40021000
 8005850:	0800b54c 	.word	0x0800b54c

08005854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005858:	f7ff ffda 	bl	8005810 <HAL_RCC_GetHCLKFreq>
 800585c:	4602      	mov	r2, r0
 800585e:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	0adb      	lsrs	r3, r3, #11
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	4904      	ldr	r1, [pc, #16]	@ (800587c <HAL_RCC_GetPCLK2Freq+0x28>)
 800586a:	5ccb      	ldrb	r3, [r1, r3]
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40021000 	.word	0x40021000
 800587c:	0800b54c 	.word	0x0800b54c

08005880 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005886:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005890:	4b1b      	ldr	r3, [pc, #108]	@ (8005900 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	3301      	adds	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d10c      	bne.n	80058be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058a4:	4a17      	ldr	r2, [pc, #92]	@ (8005904 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	4a14      	ldr	r2, [pc, #80]	@ (8005900 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058ae:	68d2      	ldr	r2, [r2, #12]
 80058b0:	0a12      	lsrs	r2, r2, #8
 80058b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058b6:	fb02 f303 	mul.w	r3, r2, r3
 80058ba:	617b      	str	r3, [r7, #20]
    break;
 80058bc:	e00c      	b.n	80058d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058be:	4a12      	ldr	r2, [pc, #72]	@ (8005908 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005900 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058c8:	68d2      	ldr	r2, [r2, #12]
 80058ca:	0a12      	lsrs	r2, r2, #8
 80058cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058d0:	fb02 f303 	mul.w	r3, r2, r3
 80058d4:	617b      	str	r3, [r7, #20]
    break;
 80058d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058d8:	4b09      	ldr	r3, [pc, #36]	@ (8005900 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	0e5b      	lsrs	r3, r3, #25
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	3301      	adds	r3, #1
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058f2:	687b      	ldr	r3, [r7, #4]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40021000 	.word	0x40021000
 8005904:	007a1200 	.word	0x007a1200
 8005908:	00f42400 	.word	0x00f42400

0800590c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005914:	2300      	movs	r3, #0
 8005916:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005918:	2300      	movs	r3, #0
 800591a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8098 	beq.w	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800592a:	2300      	movs	r3, #0
 800592c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800592e:	4b43      	ldr	r3, [pc, #268]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593a:	4b40      	ldr	r3, [pc, #256]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593e:	4a3f      	ldr	r2, [pc, #252]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005944:	6593      	str	r3, [r2, #88]	@ 0x58
 8005946:	4b3d      	ldr	r3, [pc, #244]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005952:	2301      	movs	r3, #1
 8005954:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005956:	4b3a      	ldr	r3, [pc, #232]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a39      	ldr	r2, [pc, #228]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800595c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005960:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005962:	f7fc fe4b 	bl	80025fc <HAL_GetTick>
 8005966:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005968:	e009      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596a:	f7fc fe47 	bl	80025fc <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d902      	bls.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	74fb      	strb	r3, [r7, #19]
        break;
 800597c:	e005      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800597e:	4b30      	ldr	r3, [pc, #192]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0ef      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800598a:	7cfb      	ldrb	r3, [r7, #19]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d159      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005990:	4b2a      	ldr	r3, [pc, #168]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800599a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01e      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d019      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059ac:	4b23      	ldr	r3, [pc, #140]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059b8:	4b20      	ldr	r3, [pc, #128]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059be:	4a1f      	ldr	r2, [pc, #124]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059c8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ce:	4a1b      	ldr	r2, [pc, #108]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059d8:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d016      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ea:	f7fc fe07 	bl	80025fc <HAL_GetTick>
 80059ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f0:	e00b      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f2:	f7fc fe03 	bl	80025fc <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d902      	bls.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	74fb      	strb	r3, [r7, #19]
            break;
 8005a08:	e006      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0ec      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a18:	7cfb      	ldrb	r3, [r7, #19]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a1e:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a2c:	4903      	ldr	r1, [pc, #12]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a34:	e008      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	74bb      	strb	r3, [r7, #18]
 8005a3a:	e005      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
 8005a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a48:	7c7b      	ldrb	r3, [r7, #17]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d105      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a4e:	4ba7      	ldr	r3, [pc, #668]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a52:	4aa6      	ldr	r2, [pc, #664]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a66:	4ba1      	ldr	r3, [pc, #644]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6c:	f023 0203 	bic.w	r2, r3, #3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	499d      	ldr	r1, [pc, #628]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a88:	4b98      	ldr	r3, [pc, #608]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8e:	f023 020c 	bic.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	4995      	ldr	r1, [pc, #596]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aaa:	4b90      	ldr	r3, [pc, #576]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	498c      	ldr	r1, [pc, #560]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005acc:	4b87      	ldr	r3, [pc, #540]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	4984      	ldr	r1, [pc, #528]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aee:	4b7f      	ldr	r3, [pc, #508]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	497b      	ldr	r1, [pc, #492]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b10:	4b76      	ldr	r3, [pc, #472]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	4973      	ldr	r1, [pc, #460]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b32:	4b6e      	ldr	r3, [pc, #440]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	496a      	ldr	r1, [pc, #424]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b54:	4b65      	ldr	r3, [pc, #404]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	4962      	ldr	r1, [pc, #392]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b76:	4b5d      	ldr	r3, [pc, #372]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	4959      	ldr	r1, [pc, #356]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b98:	4b54      	ldr	r3, [pc, #336]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	4951      	ldr	r1, [pc, #324]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d015      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bba:	4b4c      	ldr	r3, [pc, #304]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	4948      	ldr	r1, [pc, #288]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bd8:	d105      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bda:	4b44      	ldr	r3, [pc, #272]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	4a43      	ldr	r2, [pc, #268]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005be4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d015      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c00:	493a      	ldr	r1, [pc, #232]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c10:	d105      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c12:	4b36      	ldr	r3, [pc, #216]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4a35      	ldr	r2, [pc, #212]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c1c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d015      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c2a:	4b30      	ldr	r3, [pc, #192]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c38:	492c      	ldr	r1, [pc, #176]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c48:	d105      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c4a:	4b28      	ldr	r3, [pc, #160]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	4a27      	ldr	r2, [pc, #156]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c54:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d015      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c62:	4b22      	ldr	r3, [pc, #136]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c70:	491e      	ldr	r1, [pc, #120]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c80:	d105      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c82:	4b1a      	ldr	r3, [pc, #104]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	4a19      	ldr	r2, [pc, #100]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c8c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d015      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c9a:	4b14      	ldr	r3, [pc, #80]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca8:	4910      	ldr	r1, [pc, #64]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cb8:	d105      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cba:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cc4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d018      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005cd2:	4b06      	ldr	r3, [pc, #24]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	4902      	ldr	r1, [pc, #8]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	e001      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cf6:	d105      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005cf8:	4b21      	ldr	r3, [pc, #132]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4a20      	ldr	r2, [pc, #128]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d015      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005d10:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	4918      	ldr	r1, [pc, #96]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2e:	d105      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d30:	4b13      	ldr	r3, [pc, #76]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	4a12      	ldr	r2, [pc, #72]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d015      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d48:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d56:	490a      	ldr	r1, [pc, #40]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d66:	d105      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d68:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4a04      	ldr	r2, [pc, #16]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d74:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40021000 	.word	0x40021000

08005d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e09d      	b.n	8005ed2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d108      	bne.n	8005db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005da6:	d009      	beq.n	8005dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	61da      	str	r2, [r3, #28]
 8005dae:	e005      	b.n	8005dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fc f976 	bl	80020c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005df2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dfc:	d902      	bls.n	8005e04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e002      	b.n	8005e0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e12:	d007      	beq.n	8005e24 <HAL_SPI_Init+0xa0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e66:	ea42 0103 	orr.w	r1, r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	f003 0204 	and.w	r2, r3, #4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ea0:	ea42 0103 	orr.w	r1, r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ec0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b088      	sub	sp, #32
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	603b      	str	r3, [r7, #0]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eea:	f7fc fb87 	bl	80025fc <HAL_GetTick>
 8005eee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d001      	beq.n	8005f04 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
 8005f02:	e15c      	b.n	80061be <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_SPI_Transmit+0x36>
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e154      	b.n	80061be <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_SPI_Transmit+0x48>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e14d      	b.n	80061be <HAL_SPI_Transmit+0x2e4>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	88fa      	ldrh	r2, [r7, #6]
 8005f42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	88fa      	ldrh	r2, [r7, #6]
 8005f48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f74:	d10f      	bne.n	8005f96 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa0:	2b40      	cmp	r3, #64	@ 0x40
 8005fa2:	d007      	beq.n	8005fb4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fbc:	d952      	bls.n	8006064 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_SPI_Transmit+0xf2>
 8005fc6:	8b7b      	ldrh	r3, [r7, #26]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d145      	bne.n	8006058 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd0:	881a      	ldrh	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fdc:	1c9a      	adds	r2, r3, #2
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ff0:	e032      	b.n	8006058 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d112      	bne.n	8006026 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	881a      	ldrh	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006024:	e018      	b.n	8006058 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006026:	f7fc fae9 	bl	80025fc <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d803      	bhi.n	800603e <HAL_SPI_Transmit+0x164>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800603c:	d102      	bne.n	8006044 <HAL_SPI_Transmit+0x16a>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e0b2      	b.n	80061be <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1c7      	bne.n	8005ff2 <HAL_SPI_Transmit+0x118>
 8006062:	e083      	b.n	800616c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_SPI_Transmit+0x198>
 800606c:	8b7b      	ldrh	r3, [r7, #26]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d177      	bne.n	8006162 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d912      	bls.n	80060a2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006080:	881a      	ldrh	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	1c9a      	adds	r2, r3, #2
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b02      	subs	r3, #2
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060a0:	e05f      	b.n	8006162 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	7812      	ldrb	r2, [r2, #0]
 80060ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80060c8:	e04b      	b.n	8006162 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d12b      	bne.n	8006130 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d912      	bls.n	8006108 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	881a      	ldrh	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b02      	subs	r3, #2
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006106:	e02c      	b.n	8006162 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800612e:	e018      	b.n	8006162 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006130:	f7fc fa64 	bl	80025fc <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d803      	bhi.n	8006148 <HAL_SPI_Transmit+0x26e>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006146:	d102      	bne.n	800614e <HAL_SPI_Transmit+0x274>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e02d      	b.n	80061be <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1ae      	bne.n	80060ca <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fad5 	bl	8006720 <SPI_EndRxTxTransaction>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d001      	beq.n	80061e6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
 80061e4:	e0d4      	b.n	8006390 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <HAL_SPI_Transmit_DMA+0x2a>
 80061ec:	88fb      	ldrh	r3, [r7, #6]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e0cc      	b.n	8006390 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_SPI_Transmit_DMA+0x3c>
 8006200:	2302      	movs	r3, #2
 8006202:	e0c5      	b.n	8006390 <HAL_SPI_Transmit_DMA+0x1c8>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2203      	movs	r2, #3
 8006210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	88fa      	ldrh	r2, [r7, #6]
 8006224:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006256:	d10f      	bne.n	8006278 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006266:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006276:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627c:	4a46      	ldr	r2, [pc, #280]	@ (8006398 <HAL_SPI_Transmit_DMA+0x1d0>)
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006284:	4a45      	ldr	r2, [pc, #276]	@ (800639c <HAL_SPI_Transmit_DMA+0x1d4>)
 8006286:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628c:	4a44      	ldr	r2, [pc, #272]	@ (80063a0 <HAL_SPI_Transmit_DMA+0x1d8>)
 800628e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006294:	2200      	movs	r2, #0
 8006296:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062a6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062b0:	d82d      	bhi.n	800630e <HAL_SPI_Transmit_DMA+0x146>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062bc:	d127      	bne.n	800630e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10f      	bne.n	80062ec <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062da:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062ea:	e010      	b.n	800630e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062fa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006300:	b29b      	uxth	r3, r3
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	b29b      	uxth	r3, r3
 8006306:	3301      	adds	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	4619      	mov	r1, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006324:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006326:	f7fe f9ab 	bl	8004680 <HAL_DMA_Start_IT>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006334:	f043 0210 	orr.w	r2, r3, #16
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e023      	b.n	8006390 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006352:	2b40      	cmp	r3, #64	@ 0x40
 8006354:	d007      	beq.n	8006366 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006364:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0220 	orr.w	r2, r2, #32
 800637c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0202 	orr.w	r2, r2, #2
 800638c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	08006487 	.word	0x08006487
 800639c:	080063e1 	.word	0x080063e1
 80063a0:	080064a3 	.word	0x080064a3

080063a4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ee:	f7fc f905 	bl	80025fc <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d03b      	beq.n	800647a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0220 	bic.w	r2, r2, #32
 8006410:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0202 	bic.w	r2, r2, #2
 8006420:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	2164      	movs	r1, #100	@ 0x64
 8006426:	6978      	ldr	r0, [r7, #20]
 8006428:	f000 f97a 	bl	8006720 <SPI_EndRxTxTransaction>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006436:	f043 0220 	orr.w	r2, r3, #32
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2200      	movs	r2, #0
 8006460:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006472:	6978      	ldr	r0, [r7, #20]
 8006474:	f7ff ffaa 	bl	80063cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006478:	e002      	b.n	8006480 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800647a:	6978      	ldr	r0, [r7, #20]
 800647c:	f7ff ff92 	bl	80063a4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff ff8f 	bl	80063b8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0203 	bic.w	r2, r2, #3
 80064be:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064c4:	f043 0210 	orr.w	r2, r3, #16
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff ff79 	bl	80063cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064f4:	f7fc f882 	bl	80025fc <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	4413      	add	r3, r2
 8006502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006504:	f7fc f87a 	bl	80025fc <HAL_GetTick>
 8006508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800650a:	4b39      	ldr	r3, [pc, #228]	@ (80065f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	015b      	lsls	r3, r3, #5
 8006510:	0d1b      	lsrs	r3, r3, #20
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	fb02 f303 	mul.w	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800651a:	e054      	b.n	80065c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006522:	d050      	beq.n	80065c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006524:	f7fc f86a 	bl	80025fc <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	429a      	cmp	r2, r3
 8006532:	d902      	bls.n	800653a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d13d      	bne.n	80065b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006552:	d111      	bne.n	8006578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800655c:	d004      	beq.n	8006568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006566:	d107      	bne.n	8006578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006580:	d10f      	bne.n	80065a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e017      	b.n	80065e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4013      	ands	r3, r2
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	bf0c      	ite	eq
 80065d6:	2301      	moveq	r3, #1
 80065d8:	2300      	movne	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d19b      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000044 	.word	0x20000044

080065f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	@ 0x28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006606:	f7fb fff9 	bl	80025fc <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	4413      	add	r3, r2
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006616:	f7fb fff1 	bl	80025fc <HAL_GetTick>
 800661a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	330c      	adds	r3, #12
 8006622:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006624:	4b3d      	ldr	r3, [pc, #244]	@ (800671c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	00da      	lsls	r2, r3, #3
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	0d1b      	lsrs	r3, r3, #20
 8006634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800663c:	e060      	b.n	8006700 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006644:	d107      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006654:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800665c:	d050      	beq.n	8006700 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800665e:	f7fb ffcd 	bl	80025fc <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666a:	429a      	cmp	r2, r3
 800666c:	d902      	bls.n	8006674 <SPI_WaitFifoStateUntilTimeout+0x80>
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	d13d      	bne.n	80066f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006682:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800668c:	d111      	bne.n	80066b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006696:	d004      	beq.n	80066a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a0:	d107      	bne.n	80066b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ba:	d10f      	bne.n	80066dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e010      	b.n	8006712 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4013      	ands	r3, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d196      	bne.n	800663e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3728      	adds	r7, #40	@ 0x28
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000044 	.word	0x20000044

08006720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2200      	movs	r2, #0
 8006734:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff ff5b 	bl	80065f4 <SPI_WaitFifoStateUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006748:	f043 0220 	orr.w	r2, r3, #32
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e027      	b.n	80067a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	2180      	movs	r1, #128	@ 0x80
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fec0 	bl	80064e4 <SPI_WaitFlagStateUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676e:	f043 0220 	orr.w	r2, r3, #32
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e014      	b.n	80067a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff ff34 	bl	80065f4 <SPI_WaitFifoStateUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006796:	f043 0220 	orr.w	r2, r3, #32
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e000      	b.n	80067a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e049      	b.n	8006852 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fb fd34 	bl	8002240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f000 f89e 	bl	800692c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d001      	beq.n	8006874 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e047      	b.n	8006904 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a23      	ldr	r2, [pc, #140]	@ (8006910 <HAL_TIM_Base_Start+0xb4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d01d      	beq.n	80068c2 <HAL_TIM_Base_Start+0x66>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688e:	d018      	beq.n	80068c2 <HAL_TIM_Base_Start+0x66>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1f      	ldr	r2, [pc, #124]	@ (8006914 <HAL_TIM_Base_Start+0xb8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <HAL_TIM_Base_Start+0x66>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1e      	ldr	r2, [pc, #120]	@ (8006918 <HAL_TIM_Base_Start+0xbc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00e      	beq.n	80068c2 <HAL_TIM_Base_Start+0x66>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1c      	ldr	r2, [pc, #112]	@ (800691c <HAL_TIM_Base_Start+0xc0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d009      	beq.n	80068c2 <HAL_TIM_Base_Start+0x66>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006920 <HAL_TIM_Base_Start+0xc4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d004      	beq.n	80068c2 <HAL_TIM_Base_Start+0x66>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a19      	ldr	r2, [pc, #100]	@ (8006924 <HAL_TIM_Base_Start+0xc8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d115      	bne.n	80068ee <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	4b17      	ldr	r3, [pc, #92]	@ (8006928 <HAL_TIM_Base_Start+0xcc>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b06      	cmp	r3, #6
 80068d2:	d015      	beq.n	8006900 <HAL_TIM_Base_Start+0xa4>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068da:	d011      	beq.n	8006900 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ec:	e008      	b.n	8006900 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e000      	b.n	8006902 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006900:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40013400 	.word	0x40013400
 8006920:	40014000 	.word	0x40014000
 8006924:	40015000 	.word	0x40015000
 8006928:	00010007 	.word	0x00010007

0800692c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a48      	ldr	r2, [pc, #288]	@ (8006a60 <TIM_Base_SetConfig+0x134>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694a:	d00f      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a45      	ldr	r2, [pc, #276]	@ (8006a64 <TIM_Base_SetConfig+0x138>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a44      	ldr	r2, [pc, #272]	@ (8006a68 <TIM_Base_SetConfig+0x13c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a43      	ldr	r2, [pc, #268]	@ (8006a6c <TIM_Base_SetConfig+0x140>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a42      	ldr	r2, [pc, #264]	@ (8006a70 <TIM_Base_SetConfig+0x144>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d108      	bne.n	800697e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a37      	ldr	r2, [pc, #220]	@ (8006a60 <TIM_Base_SetConfig+0x134>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d01f      	beq.n	80069c6 <TIM_Base_SetConfig+0x9a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800698c:	d01b      	beq.n	80069c6 <TIM_Base_SetConfig+0x9a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a34      	ldr	r2, [pc, #208]	@ (8006a64 <TIM_Base_SetConfig+0x138>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d017      	beq.n	80069c6 <TIM_Base_SetConfig+0x9a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a33      	ldr	r2, [pc, #204]	@ (8006a68 <TIM_Base_SetConfig+0x13c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <TIM_Base_SetConfig+0x9a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a32      	ldr	r2, [pc, #200]	@ (8006a6c <TIM_Base_SetConfig+0x140>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00f      	beq.n	80069c6 <TIM_Base_SetConfig+0x9a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a32      	ldr	r2, [pc, #200]	@ (8006a74 <TIM_Base_SetConfig+0x148>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00b      	beq.n	80069c6 <TIM_Base_SetConfig+0x9a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a31      	ldr	r2, [pc, #196]	@ (8006a78 <TIM_Base_SetConfig+0x14c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d007      	beq.n	80069c6 <TIM_Base_SetConfig+0x9a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a30      	ldr	r2, [pc, #192]	@ (8006a7c <TIM_Base_SetConfig+0x150>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d003      	beq.n	80069c6 <TIM_Base_SetConfig+0x9a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006a70 <TIM_Base_SetConfig+0x144>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d108      	bne.n	80069d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a18      	ldr	r2, [pc, #96]	@ (8006a60 <TIM_Base_SetConfig+0x134>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d013      	beq.n	8006a2c <TIM_Base_SetConfig+0x100>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a19      	ldr	r2, [pc, #100]	@ (8006a6c <TIM_Base_SetConfig+0x140>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00f      	beq.n	8006a2c <TIM_Base_SetConfig+0x100>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a19      	ldr	r2, [pc, #100]	@ (8006a74 <TIM_Base_SetConfig+0x148>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <TIM_Base_SetConfig+0x100>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a18      	ldr	r2, [pc, #96]	@ (8006a78 <TIM_Base_SetConfig+0x14c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d007      	beq.n	8006a2c <TIM_Base_SetConfig+0x100>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	@ (8006a7c <TIM_Base_SetConfig+0x150>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_Base_SetConfig+0x100>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a12      	ldr	r2, [pc, #72]	@ (8006a70 <TIM_Base_SetConfig+0x144>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d103      	bne.n	8006a34 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d105      	bne.n	8006a52 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	611a      	str	r2, [r3, #16]
  }
}
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40013400 	.word	0x40013400
 8006a70:	40015000 	.word	0x40015000
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800

08006a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e06f      	b.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a31      	ldr	r2, [pc, #196]	@ (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a30      	ldr	r2, [pc, #192]	@ (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d108      	bne.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006adc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d01d      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b18:	d018      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d013      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1a      	ldr	r2, [pc, #104]	@ (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a15      	ldr	r2, [pc, #84]	@ (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a16      	ldr	r2, [pc, #88]	@ (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a11      	ldr	r2, [pc, #68]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d10c      	bne.n	8006b66 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40012c00 	.word	0x40012c00
 8006b88:	40013400 	.word	0x40013400
 8006b8c:	40015000 	.word	0x40015000
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40014000 	.word	0x40014000

08006b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e042      	b.n	8006c34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f83b 	bl	8006c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2224      	movs	r2, #36	@ 0x24
 8006bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fbbc 	bl	8007364 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f8bd 	bl	8006d6c <UART_SetConfig>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e01b      	b.n	8006c34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fc3b 	bl	80074a8 <UART_CheckIdleState>
 8006c32:	4603      	mov	r3, r0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	@ 0x28
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d17b      	bne.n	8006d62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_UART_Transmit+0x26>
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e074      	b.n	8006d64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2221      	movs	r2, #33	@ 0x21
 8006c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c8a:	f7fb fcb7 	bl	80025fc <HAL_GetTick>
 8006c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	88fa      	ldrh	r2, [r7, #6]
 8006c94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	88fa      	ldrh	r2, [r7, #6]
 8006c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca8:	d108      	bne.n	8006cbc <HAL_UART_Transmit+0x6c>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	e003      	b.n	8006cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cc4:	e030      	b.n	8006d28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2180      	movs	r1, #128	@ 0x80
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fc93 	bl	80075fc <UART_WaitOnFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e03d      	b.n	8006d64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cfc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	3302      	adds	r3, #2
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e007      	b.n	8006d16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1c8      	bne.n	8006cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2140      	movs	r1, #64	@ 0x40
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fc5c 	bl	80075fc <UART_WaitOnFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e006      	b.n	8006d64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e000      	b.n	8006d64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3720      	adds	r7, #32
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d70:	b08c      	sub	sp, #48	@ 0x30
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4baa      	ldr	r3, [pc, #680]	@ (8007044 <UART_SetConfig+0x2d8>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a9f      	ldr	r2, [pc, #636]	@ (8007048 <UART_SetConfig+0x2dc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d004      	beq.n	8006dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006de2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	f023 010f 	bic.w	r1, r3, #15
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a90      	ldr	r2, [pc, #576]	@ (800704c <UART_SetConfig+0x2e0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d125      	bne.n	8006e5c <UART_SetConfig+0xf0>
 8006e10:	4b8f      	ldr	r3, [pc, #572]	@ (8007050 <UART_SetConfig+0x2e4>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d81a      	bhi.n	8006e54 <UART_SetConfig+0xe8>
 8006e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <UART_SetConfig+0xb8>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e45 	.word	0x08006e45
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3a:	e116      	b.n	800706a <UART_SetConfig+0x2fe>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e42:	e112      	b.n	800706a <UART_SetConfig+0x2fe>
 8006e44:	2304      	movs	r3, #4
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4a:	e10e      	b.n	800706a <UART_SetConfig+0x2fe>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	e10a      	b.n	800706a <UART_SetConfig+0x2fe>
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5a:	e106      	b.n	800706a <UART_SetConfig+0x2fe>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a7c      	ldr	r2, [pc, #496]	@ (8007054 <UART_SetConfig+0x2e8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d138      	bne.n	8006ed8 <UART_SetConfig+0x16c>
 8006e66:	4b7a      	ldr	r3, [pc, #488]	@ (8007050 <UART_SetConfig+0x2e4>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f003 030c 	and.w	r3, r3, #12
 8006e70:	2b0c      	cmp	r3, #12
 8006e72:	d82d      	bhi.n	8006ed0 <UART_SetConfig+0x164>
 8006e74:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <UART_SetConfig+0x110>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006eb1 	.word	0x08006eb1
 8006e80:	08006ed1 	.word	0x08006ed1
 8006e84:	08006ed1 	.word	0x08006ed1
 8006e88:	08006ed1 	.word	0x08006ed1
 8006e8c:	08006ec1 	.word	0x08006ec1
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ed1 	.word	0x08006ed1
 8006e98:	08006ed1 	.word	0x08006ed1
 8006e9c:	08006eb9 	.word	0x08006eb9
 8006ea0:	08006ed1 	.word	0x08006ed1
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	08006ed1 	.word	0x08006ed1
 8006eac:	08006ec9 	.word	0x08006ec9
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb6:	e0d8      	b.n	800706a <UART_SetConfig+0x2fe>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ebe:	e0d4      	b.n	800706a <UART_SetConfig+0x2fe>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec6:	e0d0      	b.n	800706a <UART_SetConfig+0x2fe>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ece:	e0cc      	b.n	800706a <UART_SetConfig+0x2fe>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed6:	e0c8      	b.n	800706a <UART_SetConfig+0x2fe>
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5e      	ldr	r2, [pc, #376]	@ (8007058 <UART_SetConfig+0x2ec>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d125      	bne.n	8006f2e <UART_SetConfig+0x1c2>
 8006ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8007050 <UART_SetConfig+0x2e4>)
 8006ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006eec:	2b30      	cmp	r3, #48	@ 0x30
 8006eee:	d016      	beq.n	8006f1e <UART_SetConfig+0x1b2>
 8006ef0:	2b30      	cmp	r3, #48	@ 0x30
 8006ef2:	d818      	bhi.n	8006f26 <UART_SetConfig+0x1ba>
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d00a      	beq.n	8006f0e <UART_SetConfig+0x1a2>
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d814      	bhi.n	8006f26 <UART_SetConfig+0x1ba>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <UART_SetConfig+0x19a>
 8006f00:	2b10      	cmp	r3, #16
 8006f02:	d008      	beq.n	8006f16 <UART_SetConfig+0x1aa>
 8006f04:	e00f      	b.n	8006f26 <UART_SetConfig+0x1ba>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0c:	e0ad      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f14:	e0a9      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f16:	2304      	movs	r3, #4
 8006f18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1c:	e0a5      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f24:	e0a1      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f26:	2310      	movs	r3, #16
 8006f28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2c:	e09d      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a4a      	ldr	r2, [pc, #296]	@ (800705c <UART_SetConfig+0x2f0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d125      	bne.n	8006f84 <UART_SetConfig+0x218>
 8006f38:	4b45      	ldr	r3, [pc, #276]	@ (8007050 <UART_SetConfig+0x2e4>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f42:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f44:	d016      	beq.n	8006f74 <UART_SetConfig+0x208>
 8006f46:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f48:	d818      	bhi.n	8006f7c <UART_SetConfig+0x210>
 8006f4a:	2b80      	cmp	r3, #128	@ 0x80
 8006f4c:	d00a      	beq.n	8006f64 <UART_SetConfig+0x1f8>
 8006f4e:	2b80      	cmp	r3, #128	@ 0x80
 8006f50:	d814      	bhi.n	8006f7c <UART_SetConfig+0x210>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <UART_SetConfig+0x1f0>
 8006f56:	2b40      	cmp	r3, #64	@ 0x40
 8006f58:	d008      	beq.n	8006f6c <UART_SetConfig+0x200>
 8006f5a:	e00f      	b.n	8006f7c <UART_SetConfig+0x210>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f62:	e082      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f64:	2302      	movs	r3, #2
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6a:	e07e      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f72:	e07a      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f74:	2308      	movs	r3, #8
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e076      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e072      	b.n	800706a <UART_SetConfig+0x2fe>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a35      	ldr	r2, [pc, #212]	@ (8007060 <UART_SetConfig+0x2f4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d12a      	bne.n	8006fe4 <UART_SetConfig+0x278>
 8006f8e:	4b30      	ldr	r3, [pc, #192]	@ (8007050 <UART_SetConfig+0x2e4>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f9c:	d01a      	beq.n	8006fd4 <UART_SetConfig+0x268>
 8006f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fa2:	d81b      	bhi.n	8006fdc <UART_SetConfig+0x270>
 8006fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa8:	d00c      	beq.n	8006fc4 <UART_SetConfig+0x258>
 8006faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fae:	d815      	bhi.n	8006fdc <UART_SetConfig+0x270>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <UART_SetConfig+0x250>
 8006fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb8:	d008      	beq.n	8006fcc <UART_SetConfig+0x260>
 8006fba:	e00f      	b.n	8006fdc <UART_SetConfig+0x270>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc2:	e052      	b.n	800706a <UART_SetConfig+0x2fe>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fca:	e04e      	b.n	800706a <UART_SetConfig+0x2fe>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd2:	e04a      	b.n	800706a <UART_SetConfig+0x2fe>
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e046      	b.n	800706a <UART_SetConfig+0x2fe>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e042      	b.n	800706a <UART_SetConfig+0x2fe>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a17      	ldr	r2, [pc, #92]	@ (8007048 <UART_SetConfig+0x2dc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d13a      	bne.n	8007064 <UART_SetConfig+0x2f8>
 8006fee:	4b18      	ldr	r3, [pc, #96]	@ (8007050 <UART_SetConfig+0x2e4>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ff8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ffc:	d01a      	beq.n	8007034 <UART_SetConfig+0x2c8>
 8006ffe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007002:	d81b      	bhi.n	800703c <UART_SetConfig+0x2d0>
 8007004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007008:	d00c      	beq.n	8007024 <UART_SetConfig+0x2b8>
 800700a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800700e:	d815      	bhi.n	800703c <UART_SetConfig+0x2d0>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <UART_SetConfig+0x2b0>
 8007014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007018:	d008      	beq.n	800702c <UART_SetConfig+0x2c0>
 800701a:	e00f      	b.n	800703c <UART_SetConfig+0x2d0>
 800701c:	2300      	movs	r3, #0
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e022      	b.n	800706a <UART_SetConfig+0x2fe>
 8007024:	2302      	movs	r3, #2
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702a:	e01e      	b.n	800706a <UART_SetConfig+0x2fe>
 800702c:	2304      	movs	r3, #4
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007032:	e01a      	b.n	800706a <UART_SetConfig+0x2fe>
 8007034:	2308      	movs	r3, #8
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703a:	e016      	b.n	800706a <UART_SetConfig+0x2fe>
 800703c:	2310      	movs	r3, #16
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e012      	b.n	800706a <UART_SetConfig+0x2fe>
 8007044:	cfff69f3 	.word	0xcfff69f3
 8007048:	40008000 	.word	0x40008000
 800704c:	40013800 	.word	0x40013800
 8007050:	40021000 	.word	0x40021000
 8007054:	40004400 	.word	0x40004400
 8007058:	40004800 	.word	0x40004800
 800705c:	40004c00 	.word	0x40004c00
 8007060:	40005000 	.word	0x40005000
 8007064:	2310      	movs	r3, #16
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4aae      	ldr	r2, [pc, #696]	@ (8007328 <UART_SetConfig+0x5bc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	f040 8097 	bne.w	80071a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007076:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800707a:	2b08      	cmp	r3, #8
 800707c:	d823      	bhi.n	80070c6 <UART_SetConfig+0x35a>
 800707e:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <UART_SetConfig+0x318>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070c7 	.word	0x080070c7
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070c7 	.word	0x080070c7
 8007094:	080070b7 	.word	0x080070b7
 8007098:	080070c7 	.word	0x080070c7
 800709c:	080070c7 	.word	0x080070c7
 80070a0:	080070c7 	.word	0x080070c7
 80070a4:	080070bf 	.word	0x080070bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fe fbbe 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80070ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070ae:	e010      	b.n	80070d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b0:	4b9e      	ldr	r3, [pc, #632]	@ (800732c <UART_SetConfig+0x5c0>)
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070b4:	e00d      	b.n	80070d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b6:	f7fe fb49 	bl	800574c <HAL_RCC_GetSysClockFreq>
 80070ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070bc:	e009      	b.n	80070d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070c4:	e005      	b.n	80070d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8130 	beq.w	800733a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	4a94      	ldr	r2, [pc, #592]	@ (8007330 <UART_SetConfig+0x5c4>)
 80070e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d305      	bcc.n	800710a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	429a      	cmp	r2, r3
 8007108:	d903      	bls.n	8007112 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007110:	e113      	b.n	800733a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	2200      	movs	r2, #0
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	60fa      	str	r2, [r7, #12]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	4a84      	ldr	r2, [pc, #528]	@ (8007330 <UART_SetConfig+0x5c4>)
 8007120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007124:	b29b      	uxth	r3, r3
 8007126:	2200      	movs	r2, #0
 8007128:	603b      	str	r3, [r7, #0]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007130:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007134:	f7f9 fd60 	bl	8000bf8 <__aeabi_uldivmod>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4610      	mov	r0, r2
 800713e:	4619      	mov	r1, r3
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	020b      	lsls	r3, r1, #8
 800714a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800714e:	0202      	lsls	r2, r0, #8
 8007150:	6979      	ldr	r1, [r7, #20]
 8007152:	6849      	ldr	r1, [r1, #4]
 8007154:	0849      	lsrs	r1, r1, #1
 8007156:	2000      	movs	r0, #0
 8007158:	460c      	mov	r4, r1
 800715a:	4605      	mov	r5, r0
 800715c:	eb12 0804 	adds.w	r8, r2, r4
 8007160:	eb43 0905 	adc.w	r9, r3, r5
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	469a      	mov	sl, r3
 800716c:	4693      	mov	fp, r2
 800716e:	4652      	mov	r2, sl
 8007170:	465b      	mov	r3, fp
 8007172:	4640      	mov	r0, r8
 8007174:	4649      	mov	r1, r9
 8007176:	f7f9 fd3f 	bl	8000bf8 <__aeabi_uldivmod>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4613      	mov	r3, r2
 8007180:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007188:	d308      	bcc.n	800719c <UART_SetConfig+0x430>
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007190:	d204      	bcs.n	800719c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a3a      	ldr	r2, [r7, #32]
 8007198:	60da      	str	r2, [r3, #12]
 800719a:	e0ce      	b.n	800733a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071a2:	e0ca      	b.n	800733a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071ac:	d166      	bne.n	800727c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80071ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d827      	bhi.n	8007206 <UART_SetConfig+0x49a>
 80071b6:	a201      	add	r2, pc, #4	@ (adr r2, 80071bc <UART_SetConfig+0x450>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	080071e9 	.word	0x080071e9
 80071c4:	080071f1 	.word	0x080071f1
 80071c8:	08007207 	.word	0x08007207
 80071cc:	080071f7 	.word	0x080071f7
 80071d0:	08007207 	.word	0x08007207
 80071d4:	08007207 	.word	0x08007207
 80071d8:	08007207 	.word	0x08007207
 80071dc:	080071ff 	.word	0x080071ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e0:	f7fe fb22 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80071e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071e6:	e014      	b.n	8007212 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e8:	f7fe fb34 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 80071ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071ee:	e010      	b.n	8007212 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f0:	4b4e      	ldr	r3, [pc, #312]	@ (800732c <UART_SetConfig+0x5c0>)
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071f4:	e00d      	b.n	8007212 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f6:	f7fe faa9 	bl	800574c <HAL_RCC_GetSysClockFreq>
 80071fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071fc:	e009      	b.n	8007212 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007204:	e005      	b.n	8007212 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007210:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8090 	beq.w	800733a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	4a44      	ldr	r2, [pc, #272]	@ (8007330 <UART_SetConfig+0x5c4>)
 8007220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007224:	461a      	mov	r2, r3
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	fbb3 f3f2 	udiv	r3, r3, r2
 800722c:	005a      	lsls	r2, r3, #1
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	441a      	add	r2, r3
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	fbb2 f3f3 	udiv	r3, r2, r3
 800723e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	2b0f      	cmp	r3, #15
 8007244:	d916      	bls.n	8007274 <UART_SetConfig+0x508>
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800724c:	d212      	bcs.n	8007274 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f023 030f 	bic.w	r3, r3, #15
 8007256:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	b29a      	uxth	r2, r3
 8007264:	8bfb      	ldrh	r3, [r7, #30]
 8007266:	4313      	orrs	r3, r2
 8007268:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	8bfa      	ldrh	r2, [r7, #30]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	e062      	b.n	800733a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800727a:	e05e      	b.n	800733a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800727c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007280:	2b08      	cmp	r3, #8
 8007282:	d828      	bhi.n	80072d6 <UART_SetConfig+0x56a>
 8007284:	a201      	add	r2, pc, #4	@ (adr r2, 800728c <UART_SetConfig+0x520>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072b9 	.word	0x080072b9
 8007294:	080072c1 	.word	0x080072c1
 8007298:	080072d7 	.word	0x080072d7
 800729c:	080072c7 	.word	0x080072c7
 80072a0:	080072d7 	.word	0x080072d7
 80072a4:	080072d7 	.word	0x080072d7
 80072a8:	080072d7 	.word	0x080072d7
 80072ac:	080072cf 	.word	0x080072cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b0:	f7fe faba 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80072b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b6:	e014      	b.n	80072e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b8:	f7fe facc 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 80072bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072be:	e010      	b.n	80072e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072c0:	4b1a      	ldr	r3, [pc, #104]	@ (800732c <UART_SetConfig+0x5c0>)
 80072c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072c4:	e00d      	b.n	80072e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c6:	f7fe fa41 	bl	800574c <HAL_RCC_GetSysClockFreq>
 80072ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072cc:	e009      	b.n	80072e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072d4:	e005      	b.n	80072e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072e0:	bf00      	nop
    }

    if (pclk != 0U)
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d028      	beq.n	800733a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	4a10      	ldr	r2, [pc, #64]	@ (8007330 <UART_SetConfig+0x5c4>)
 80072ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072f2:	461a      	mov	r2, r3
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	441a      	add	r2, r3
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	fbb2 f3f3 	udiv	r3, r2, r3
 800730a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d910      	bls.n	8007334 <UART_SetConfig+0x5c8>
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007318:	d20c      	bcs.n	8007334 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	b29a      	uxth	r2, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60da      	str	r2, [r3, #12]
 8007324:	e009      	b.n	800733a <UART_SetConfig+0x5ce>
 8007326:	bf00      	nop
 8007328:	40008000 	.word	0x40008000
 800732c:	00f42400 	.word	0x00f42400
 8007330:	0800b554 	.word	0x0800b554
      }
      else
      {
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2201      	movs	r2, #1
 800733e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2201      	movs	r2, #1
 8007346:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2200      	movs	r2, #0
 800734e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2200      	movs	r2, #0
 8007354:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007356:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800735a:	4618      	mov	r0, r3
 800735c:	3730      	adds	r7, #48	@ 0x30
 800735e:	46bd      	mov	sp, r7
 8007360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007370:	f003 0308 	and.w	r3, r3, #8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01a      	beq.n	800747a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007462:	d10a      	bne.n	800747a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b098      	sub	sp, #96	@ 0x60
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074b8:	f7fb f8a0 	bl	80025fc <HAL_GetTick>
 80074bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d12f      	bne.n	800752c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d4:	2200      	movs	r2, #0
 80074d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f88e 	bl	80075fc <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d022      	beq.n	800752c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007504:	647b      	str	r3, [r7, #68]	@ 0x44
 8007506:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800750a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e063      	b.n	80075f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b04      	cmp	r3, #4
 8007538:	d149      	bne.n	80075ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800753a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007542:	2200      	movs	r2, #0
 8007544:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f857 	bl	80075fc <UART_WaitOnFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d03c      	beq.n	80075ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	623b      	str	r3, [r7, #32]
   return(result);
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007568:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007572:	633b      	str	r3, [r7, #48]	@ 0x30
 8007574:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e6      	bne.n	8007554 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	60fb      	str	r3, [r7, #12]
   return(result);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f023 0301 	bic.w	r3, r3, #1
 800759c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a6:	61fa      	str	r2, [r7, #28]
 80075a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	69b9      	ldr	r1, [r7, #24]
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	617b      	str	r3, [r7, #20]
   return(result);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e5      	bne.n	8007586 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e012      	b.n	80075f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3758      	adds	r7, #88	@ 0x58
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	4613      	mov	r3, r2
 800760a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800760c:	e04f      	b.n	80076ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007614:	d04b      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007616:	f7fa fff1 	bl	80025fc <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	429a      	cmp	r2, r3
 8007624:	d302      	bcc.n	800762c <UART_WaitOnFlagUntilTimeout+0x30>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e04e      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d037      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b80      	cmp	r3, #128	@ 0x80
 8007642:	d034      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b40      	cmp	r3, #64	@ 0x40
 8007648:	d031      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b08      	cmp	r3, #8
 8007656:	d110      	bne.n	800767a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2208      	movs	r2, #8
 800765e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f838 	bl	80076d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2208      	movs	r2, #8
 800766a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e029      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007688:	d111      	bne.n	80076ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f81e 	bl	80076d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e00f      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69da      	ldr	r2, [r3, #28]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4013      	ands	r3, r2
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d0a0      	beq.n	800760e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b095      	sub	sp, #84	@ 0x54
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80076fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800770a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e6      	bne.n	80076de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007726:	f023 0301 	bic.w	r3, r3, #1
 800772a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800773a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e3      	bne.n	8007710 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d118      	bne.n	8007782 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	60bb      	str	r3, [r7, #8]
   return(result);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f023 0310 	bic.w	r3, r3, #16
 8007764:	647b      	str	r3, [r7, #68]	@ 0x44
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800776e:	61bb      	str	r3, [r7, #24]
 8007770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6979      	ldr	r1, [r7, #20]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	613b      	str	r3, [r7, #16]
   return(result);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e6      	bne.n	8007750 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2220      	movs	r2, #32
 8007786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007796:	bf00      	nop
 8007798:	3754      	adds	r7, #84	@ 0x54
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
	...

080077a4 <arm_rfft_32_fast_init_f32>:
 80077a4:	b178      	cbz	r0, 80077c6 <arm_rfft_32_fast_init_f32+0x22>
 80077a6:	b430      	push	{r4, r5}
 80077a8:	4908      	ldr	r1, [pc, #32]	@ (80077cc <arm_rfft_32_fast_init_f32+0x28>)
 80077aa:	4a09      	ldr	r2, [pc, #36]	@ (80077d0 <arm_rfft_32_fast_init_f32+0x2c>)
 80077ac:	2310      	movs	r3, #16
 80077ae:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80077b2:	8003      	strh	r3, [r0, #0]
 80077b4:	2520      	movs	r5, #32
 80077b6:	2414      	movs	r4, #20
 80077b8:	4b06      	ldr	r3, [pc, #24]	@ (80077d4 <arm_rfft_32_fast_init_f32+0x30>)
 80077ba:	8205      	strh	r5, [r0, #16]
 80077bc:	8184      	strh	r4, [r0, #12]
 80077be:	6143      	str	r3, [r0, #20]
 80077c0:	bc30      	pop	{r4, r5}
 80077c2:	2000      	movs	r0, #0
 80077c4:	4770      	bx	lr
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077ca:	4770      	bx	lr
 80077cc:	0800c51c 	.word	0x0800c51c
 80077d0:	08010e54 	.word	0x08010e54
 80077d4:	08019bd4 	.word	0x08019bd4

080077d8 <arm_rfft_64_fast_init_f32>:
 80077d8:	b178      	cbz	r0, 80077fa <arm_rfft_64_fast_init_f32+0x22>
 80077da:	b430      	push	{r4, r5}
 80077dc:	4908      	ldr	r1, [pc, #32]	@ (8007800 <arm_rfft_64_fast_init_f32+0x28>)
 80077de:	4a09      	ldr	r2, [pc, #36]	@ (8007804 <arm_rfft_64_fast_init_f32+0x2c>)
 80077e0:	2320      	movs	r3, #32
 80077e2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80077e6:	8003      	strh	r3, [r0, #0]
 80077e8:	2540      	movs	r5, #64	@ 0x40
 80077ea:	2430      	movs	r4, #48	@ 0x30
 80077ec:	4b06      	ldr	r3, [pc, #24]	@ (8007808 <arm_rfft_64_fast_init_f32+0x30>)
 80077ee:	8205      	strh	r5, [r0, #16]
 80077f0:	8184      	strh	r4, [r0, #12]
 80077f2:	6143      	str	r3, [r0, #20]
 80077f4:	bc30      	pop	{r4, r5}
 80077f6:	2000      	movs	r0, #0
 80077f8:	4770      	bx	lr
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077fe:	4770      	bx	lr
 8007800:	0800e674 	.word	0x0800e674
 8007804:	080156d4 	.word	0x080156d4
 8007808:	0801e454 	.word	0x0801e454

0800780c <arm_rfft_256_fast_init_f32>:
 800780c:	b180      	cbz	r0, 8007830 <arm_rfft_256_fast_init_f32+0x24>
 800780e:	b430      	push	{r4, r5}
 8007810:	4909      	ldr	r1, [pc, #36]	@ (8007838 <arm_rfft_256_fast_init_f32+0x2c>)
 8007812:	4a0a      	ldr	r2, [pc, #40]	@ (800783c <arm_rfft_256_fast_init_f32+0x30>)
 8007814:	2380      	movs	r3, #128	@ 0x80
 8007816:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800781a:	8003      	strh	r3, [r0, #0]
 800781c:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8007820:	24d0      	movs	r4, #208	@ 0xd0
 8007822:	4b07      	ldr	r3, [pc, #28]	@ (8007840 <arm_rfft_256_fast_init_f32+0x34>)
 8007824:	8205      	strh	r5, [r0, #16]
 8007826:	8184      	strh	r4, [r0, #12]
 8007828:	6143      	str	r3, [r0, #20]
 800782a:	bc30      	pop	{r4, r5}
 800782c:	2000      	movs	r0, #0
 800782e:	4770      	bx	lr
 8007830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	0800c37c 	.word	0x0800c37c
 800783c:	08010a54 	.word	0x08010a54
 8007840:	080197d4 	.word	0x080197d4

08007844 <arm_rfft_512_fast_init_f32>:
 8007844:	b190      	cbz	r0, 800786c <arm_rfft_512_fast_init_f32+0x28>
 8007846:	b430      	push	{r4, r5}
 8007848:	490a      	ldr	r1, [pc, #40]	@ (8007874 <arm_rfft_512_fast_init_f32+0x30>)
 800784a:	4a0b      	ldr	r2, [pc, #44]	@ (8007878 <arm_rfft_512_fast_init_f32+0x34>)
 800784c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007850:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007854:	8003      	strh	r3, [r0, #0]
 8007856:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800785a:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800785e:	4b07      	ldr	r3, [pc, #28]	@ (800787c <arm_rfft_512_fast_init_f32+0x38>)
 8007860:	8205      	strh	r5, [r0, #16]
 8007862:	8184      	strh	r4, [r0, #12]
 8007864:	6143      	str	r3, [r0, #20]
 8007866:	bc30      	pop	{r4, r5}
 8007868:	2000      	movs	r0, #0
 800786a:	4770      	bx	lr
 800786c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	0800e304 	.word	0x0800e304
 8007878:	08014ed4 	.word	0x08014ed4
 800787c:	0801dc54 	.word	0x0801dc54

08007880 <arm_rfft_1024_fast_init_f32>:
 8007880:	b190      	cbz	r0, 80078a8 <arm_rfft_1024_fast_init_f32+0x28>
 8007882:	b430      	push	{r4, r5}
 8007884:	490a      	ldr	r1, [pc, #40]	@ (80078b0 <arm_rfft_1024_fast_init_f32+0x30>)
 8007886:	4a0b      	ldr	r2, [pc, #44]	@ (80078b4 <arm_rfft_1024_fast_init_f32+0x34>)
 8007888:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800788c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007890:	8003      	strh	r3, [r0, #0]
 8007892:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8007896:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800789a:	4b07      	ldr	r3, [pc, #28]	@ (80078b8 <arm_rfft_1024_fast_init_f32+0x38>)
 800789c:	8205      	strh	r5, [r0, #16]
 800789e:	8184      	strh	r4, [r0, #12]
 80078a0:	6143      	str	r3, [r0, #20]
 80078a2:	bc30      	pop	{r4, r5}
 80078a4:	2000      	movs	r0, #0
 80078a6:	4770      	bx	lr
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	0800e6d4 	.word	0x0800e6d4
 80078b4:	080157d4 	.word	0x080157d4
 80078b8:	080167d4 	.word	0x080167d4

080078bc <arm_rfft_2048_fast_init_f32>:
 80078bc:	b190      	cbz	r0, 80078e4 <arm_rfft_2048_fast_init_f32+0x28>
 80078be:	b430      	push	{r4, r5}
 80078c0:	490a      	ldr	r1, [pc, #40]	@ (80078ec <arm_rfft_2048_fast_init_f32+0x30>)
 80078c2:	4a0b      	ldr	r2, [pc, #44]	@ (80078f0 <arm_rfft_2048_fast_init_f32+0x34>)
 80078c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078c8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80078cc:	8003      	strh	r3, [r0, #0]
 80078ce:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80078d2:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80078d6:	4b07      	ldr	r3, [pc, #28]	@ (80078f4 <arm_rfft_2048_fast_init_f32+0x38>)
 80078d8:	8205      	strh	r5, [r0, #16]
 80078da:	8184      	strh	r4, [r0, #12]
 80078dc:	6143      	str	r3, [r0, #20]
 80078de:	bc30      	pop	{r4, r5}
 80078e0:	2000      	movs	r0, #0
 80078e2:	4770      	bx	lr
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	0800b56c 	.word	0x0800b56c
 80078f0:	0800ea54 	.word	0x0800ea54
 80078f4:	080177d4 	.word	0x080177d4

080078f8 <arm_rfft_4096_fast_init_f32>:
 80078f8:	b190      	cbz	r0, 8007920 <arm_rfft_4096_fast_init_f32+0x28>
 80078fa:	b430      	push	{r4, r5}
 80078fc:	490a      	ldr	r1, [pc, #40]	@ (8007928 <arm_rfft_4096_fast_init_f32+0x30>)
 80078fe:	4a0b      	ldr	r2, [pc, #44]	@ (800792c <arm_rfft_4096_fast_init_f32+0x34>)
 8007900:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007904:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007908:	8003      	strh	r3, [r0, #0]
 800790a:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800790e:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8007912:	4b07      	ldr	r3, [pc, #28]	@ (8007930 <arm_rfft_4096_fast_init_f32+0x38>)
 8007914:	8205      	strh	r5, [r0, #16]
 8007916:	8184      	strh	r4, [r0, #12]
 8007918:	6143      	str	r3, [r0, #20]
 800791a:	bc30      	pop	{r4, r5}
 800791c:	2000      	movs	r0, #0
 800791e:	4770      	bx	lr
 8007920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	0800c544 	.word	0x0800c544
 800792c:	08010ed4 	.word	0x08010ed4
 8007930:	08019c54 	.word	0x08019c54

08007934 <arm_rfft_fast_init_f32>:
 8007934:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007938:	d01f      	beq.n	800797a <arm_rfft_fast_init_f32+0x46>
 800793a:	d90b      	bls.n	8007954 <arm_rfft_fast_init_f32+0x20>
 800793c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007940:	d019      	beq.n	8007976 <arm_rfft_fast_init_f32+0x42>
 8007942:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007946:	d012      	beq.n	800796e <arm_rfft_fast_init_f32+0x3a>
 8007948:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800794c:	d00d      	beq.n	800796a <arm_rfft_fast_init_f32+0x36>
 800794e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007952:	4770      	bx	lr
 8007954:	2940      	cmp	r1, #64	@ 0x40
 8007956:	d00c      	beq.n	8007972 <arm_rfft_fast_init_f32+0x3e>
 8007958:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800795c:	d003      	beq.n	8007966 <arm_rfft_fast_init_f32+0x32>
 800795e:	2920      	cmp	r1, #32
 8007960:	d1f5      	bne.n	800794e <arm_rfft_fast_init_f32+0x1a>
 8007962:	4b07      	ldr	r3, [pc, #28]	@ (8007980 <arm_rfft_fast_init_f32+0x4c>)
 8007964:	4718      	bx	r3
 8007966:	4b07      	ldr	r3, [pc, #28]	@ (8007984 <arm_rfft_fast_init_f32+0x50>)
 8007968:	4718      	bx	r3
 800796a:	4b07      	ldr	r3, [pc, #28]	@ (8007988 <arm_rfft_fast_init_f32+0x54>)
 800796c:	4718      	bx	r3
 800796e:	4b07      	ldr	r3, [pc, #28]	@ (800798c <arm_rfft_fast_init_f32+0x58>)
 8007970:	4718      	bx	r3
 8007972:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <arm_rfft_fast_init_f32+0x5c>)
 8007974:	e7f6      	b.n	8007964 <arm_rfft_fast_init_f32+0x30>
 8007976:	4b07      	ldr	r3, [pc, #28]	@ (8007994 <arm_rfft_fast_init_f32+0x60>)
 8007978:	e7f4      	b.n	8007964 <arm_rfft_fast_init_f32+0x30>
 800797a:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <arm_rfft_fast_init_f32+0x64>)
 800797c:	e7f2      	b.n	8007964 <arm_rfft_fast_init_f32+0x30>
 800797e:	bf00      	nop
 8007980:	080077a5 	.word	0x080077a5
 8007984:	0800780d 	.word	0x0800780d
 8007988:	08007881 	.word	0x08007881
 800798c:	080078f9 	.word	0x080078f9
 8007990:	080077d9 	.word	0x080077d9
 8007994:	080078bd 	.word	0x080078bd
 8007998:	08007845 	.word	0x08007845

0800799c <stage_rfft_f32>:
 800799c:	b410      	push	{r4}
 800799e:	edd1 7a00 	vldr	s15, [r1]
 80079a2:	ed91 7a01 	vldr	s14, [r1, #4]
 80079a6:	8804      	ldrh	r4, [r0, #0]
 80079a8:	6940      	ldr	r0, [r0, #20]
 80079aa:	ee37 7a07 	vadd.f32	s14, s14, s14
 80079ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80079b2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80079b6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80079ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079be:	3c01      	subs	r4, #1
 80079c0:	ee26 7a84 	vmul.f32	s14, s13, s8
 80079c4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80079c8:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80079cc:	ed82 7a00 	vstr	s14, [r2]
 80079d0:	edc2 7a01 	vstr	s15, [r2, #4]
 80079d4:	3010      	adds	r0, #16
 80079d6:	3210      	adds	r2, #16
 80079d8:	3b08      	subs	r3, #8
 80079da:	3110      	adds	r1, #16
 80079dc:	ed11 5a02 	vldr	s10, [r1, #-8]
 80079e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80079e4:	ed50 6a02 	vldr	s13, [r0, #-8]
 80079e8:	edd3 4a03 	vldr	s9, [r3, #12]
 80079ec:	ed51 7a01 	vldr	s15, [r1, #-4]
 80079f0:	ed10 6a01 	vldr	s12, [r0, #-4]
 80079f4:	ee77 5a45 	vsub.f32	s11, s14, s10
 80079f8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80079fc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007a00:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007a04:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007a08:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007a0c:	ee37 7a23 	vadd.f32	s14, s14, s7
 8007a10:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007a14:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007a18:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007a1c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007a20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a24:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007a28:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007a2c:	3c01      	subs	r4, #1
 8007a2e:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007a32:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007a36:	f1a3 0308 	sub.w	r3, r3, #8
 8007a3a:	f101 0108 	add.w	r1, r1, #8
 8007a3e:	f100 0008 	add.w	r0, r0, #8
 8007a42:	f102 0208 	add.w	r2, r2, #8
 8007a46:	d1c9      	bne.n	80079dc <stage_rfft_f32+0x40>
 8007a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <merge_rfft_f32>:
 8007a50:	b410      	push	{r4}
 8007a52:	edd1 7a00 	vldr	s15, [r1]
 8007a56:	edd1 6a01 	vldr	s13, [r1, #4]
 8007a5a:	8804      	ldrh	r4, [r0, #0]
 8007a5c:	6940      	ldr	r0, [r0, #20]
 8007a5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a66:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8007a6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007a6e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007a72:	3c01      	subs	r4, #1
 8007a74:	ed82 7a00 	vstr	s14, [r2]
 8007a78:	edc2 7a01 	vstr	s15, [r2, #4]
 8007a7c:	b3dc      	cbz	r4, 8007af6 <merge_rfft_f32+0xa6>
 8007a7e:	00e3      	lsls	r3, r4, #3
 8007a80:	3b08      	subs	r3, #8
 8007a82:	440b      	add	r3, r1
 8007a84:	3010      	adds	r0, #16
 8007a86:	3210      	adds	r2, #16
 8007a88:	3110      	adds	r1, #16
 8007a8a:	ed11 5a02 	vldr	s10, [r1, #-8]
 8007a8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007a92:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007a96:	edd3 4a03 	vldr	s9, [r3, #12]
 8007a9a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007a9e:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007aa2:	ee75 5a47 	vsub.f32	s11, s10, s14
 8007aa6:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007aaa:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007aae:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007ab2:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007ab6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007aba:	ee37 7a63 	vsub.f32	s14, s14, s7
 8007abe:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007ac2:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007ac6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007aca:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007ace:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ad2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007ad6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007ada:	3c01      	subs	r4, #1
 8007adc:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007ae0:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007ae4:	f1a3 0308 	sub.w	r3, r3, #8
 8007ae8:	f101 0108 	add.w	r1, r1, #8
 8007aec:	f100 0008 	add.w	r0, r0, #8
 8007af0:	f102 0208 	add.w	r2, r2, #8
 8007af4:	d1c9      	bne.n	8007a8a <merge_rfft_f32+0x3a>
 8007af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <arm_rfft_fast_f32>:
 8007afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	8a05      	ldrh	r5, [r0, #16]
 8007b02:	086d      	lsrs	r5, r5, #1
 8007b04:	8005      	strh	r5, [r0, #0]
 8007b06:	4604      	mov	r4, r0
 8007b08:	4616      	mov	r6, r2
 8007b0a:	461d      	mov	r5, r3
 8007b0c:	b14b      	cbz	r3, 8007b22 <arm_rfft_fast_f32+0x26>
 8007b0e:	f7ff ff9f 	bl	8007a50 <merge_rfft_f32>
 8007b12:	462a      	mov	r2, r5
 8007b14:	4631      	mov	r1, r6
 8007b16:	4620      	mov	r0, r4
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	f000 bb33 	b.w	8008188 <arm_cfft_f32>
 8007b22:	460f      	mov	r7, r1
 8007b24:	461a      	mov	r2, r3
 8007b26:	2301      	movs	r3, #1
 8007b28:	f000 fb2e 	bl	8008188 <arm_cfft_f32>
 8007b2c:	4632      	mov	r2, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4620      	mov	r0, r4
 8007b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b36:	f7ff bf31 	b.w	800799c <stage_rfft_f32>
 8007b3a:	bf00      	nop

08007b3c <arm_cfft_radix8by2_f32>:
 8007b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b40:	ed2d 8b08 	vpush	{d8-d11}
 8007b44:	4607      	mov	r7, r0
 8007b46:	4608      	mov	r0, r1
 8007b48:	f8b7 c000 	ldrh.w	ip, [r7]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8007b52:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8007b56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007b5a:	f000 80b0 	beq.w	8007cbe <arm_cfft_radix8by2_f32+0x182>
 8007b5e:	008c      	lsls	r4, r1, #2
 8007b60:	3410      	adds	r4, #16
 8007b62:	f100 0310 	add.w	r3, r0, #16
 8007b66:	1906      	adds	r6, r0, r4
 8007b68:	3210      	adds	r2, #16
 8007b6a:	4444      	add	r4, r8
 8007b6c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8007b70:	f108 0510 	add.w	r5, r8, #16
 8007b74:	ed15 2a04 	vldr	s4, [r5, #-16]
 8007b78:	ed55 2a03 	vldr	s5, [r5, #-12]
 8007b7c:	ed54 4a04 	vldr	s9, [r4, #-16]
 8007b80:	ed14 4a03 	vldr	s8, [r4, #-12]
 8007b84:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007b88:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007b8c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8007b90:	ed15 0a02 	vldr	s0, [r5, #-8]
 8007b94:	ed55 0a01 	vldr	s1, [r5, #-4]
 8007b98:	ed56 6a04 	vldr	s13, [r6, #-16]
 8007b9c:	ed16 3a03 	vldr	s6, [r6, #-12]
 8007ba0:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007ba4:	ed13 5a02 	vldr	s10, [r3, #-8]
 8007ba8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007bac:	ed16 1a02 	vldr	s2, [r6, #-8]
 8007bb0:	ed56 1a01 	vldr	s3, [r6, #-4]
 8007bb4:	ee73 ba82 	vadd.f32	s23, s7, s4
 8007bb8:	ee37 ba22 	vadd.f32	s22, s14, s5
 8007bbc:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8007bc0:	ee33 9a04 	vadd.f32	s18, s6, s8
 8007bc4:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8007bc8:	ee75 aa00 	vadd.f32	s21, s10, s0
 8007bcc:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8007bd0:	ee71 8a06 	vadd.f32	s17, s2, s12
 8007bd4:	ed43 ba04 	vstr	s23, [r3, #-16]
 8007bd8:	ed03 ba03 	vstr	s22, [r3, #-12]
 8007bdc:	ed43 aa02 	vstr	s21, [r3, #-8]
 8007be0:	ed03 aa01 	vstr	s20, [r3, #-4]
 8007be4:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007be8:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007bec:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007bf0:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007bf4:	ee37 7a62 	vsub.f32	s14, s14, s5
 8007bf8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007bfc:	ee34 4a43 	vsub.f32	s8, s8, s6
 8007c00:	ed52 6a03 	vldr	s13, [r2, #-12]
 8007c04:	ed12 3a04 	vldr	s6, [r2, #-16]
 8007c08:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8007c0c:	ee27 8a26 	vmul.f32	s16, s14, s13
 8007c10:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8007c14:	ee23 2a83 	vmul.f32	s4, s7, s6
 8007c18:	ee64 4a83 	vmul.f32	s9, s9, s6
 8007c1c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8007c20:	ee27 7a03 	vmul.f32	s14, s14, s6
 8007c24:	ee64 6a26 	vmul.f32	s13, s8, s13
 8007c28:	ee24 4a03 	vmul.f32	s8, s8, s6
 8007c2c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8007c30:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007c34:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8007c38:	ee32 3a08 	vadd.f32	s6, s4, s16
 8007c3c:	ed05 7a03 	vstr	s14, [r5, #-12]
 8007c40:	ed05 3a04 	vstr	s6, [r5, #-16]
 8007c44:	ed04 4a04 	vstr	s8, [r4, #-16]
 8007c48:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007c4c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007c50:	ee76 6a41 	vsub.f32	s13, s12, s2
 8007c54:	ee35 5a40 	vsub.f32	s10, s10, s0
 8007c58:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8007c5c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007c60:	ed52 5a02 	vldr	s11, [r2, #-8]
 8007c64:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007c68:	ee66 4a87 	vmul.f32	s9, s13, s14
 8007c6c:	ee25 4a25 	vmul.f32	s8, s10, s11
 8007c70:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007c74:	ee25 5a07 	vmul.f32	s10, s10, s14
 8007c78:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007c7c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007c80:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007c84:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007c88:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007c8c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8007c90:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007c94:	3310      	adds	r3, #16
 8007c96:	4563      	cmp	r3, ip
 8007c98:	ed45 5a02 	vstr	s11, [r5, #-8]
 8007c9c:	f106 0610 	add.w	r6, r6, #16
 8007ca0:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007ca4:	f102 0210 	add.w	r2, r2, #16
 8007ca8:	ed04 6a02 	vstr	s12, [r4, #-8]
 8007cac:	ed04 7a01 	vstr	s14, [r4, #-4]
 8007cb0:	f105 0510 	add.w	r5, r5, #16
 8007cb4:	f104 0410 	add.w	r4, r4, #16
 8007cb8:	f47f af5c 	bne.w	8007b74 <arm_cfft_radix8by2_f32+0x38>
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	b28c      	uxth	r4, r1
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	f000 fc1c 	bl	8008500 <arm_radix8_butterfly_f32>
 8007cc8:	ecbd 8b08 	vpop	{d8-d11}
 8007ccc:	4621      	mov	r1, r4
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	f000 bc12 	b.w	8008500 <arm_radix8_butterfly_f32>

08007cdc <arm_cfft_radix8by4_f32>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	ed2d 8b0a 	vpush	{d8-d12}
 8007ce4:	b08d      	sub	sp, #52	@ 0x34
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007cea:	8801      	ldrh	r1, [r0, #0]
 8007cec:	6842      	ldr	r2, [r0, #4]
 8007cee:	900a      	str	r0, [sp, #40]	@ 0x28
 8007cf0:	0849      	lsrs	r1, r1, #1
 8007cf2:	008b      	lsls	r3, r1, #2
 8007cf4:	18ee      	adds	r6, r5, r3
 8007cf6:	18f0      	adds	r0, r6, r3
 8007cf8:	edd0 5a00 	vldr	s11, [r0]
 8007cfc:	edd5 7a00 	vldr	s15, [r5]
 8007d00:	ed96 7a00 	vldr	s14, [r6]
 8007d04:	edd0 3a01 	vldr	s7, [r0, #4]
 8007d08:	ed96 4a01 	vldr	s8, [r6, #4]
 8007d0c:	ed95 5a01 	vldr	s10, [r5, #4]
 8007d10:	9008      	str	r0, [sp, #32]
 8007d12:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8007d16:	18c7      	adds	r7, r0, r3
 8007d18:	edd7 4a00 	vldr	s9, [r7]
 8007d1c:	ed97 3a01 	vldr	s6, [r7, #4]
 8007d20:	9701      	str	r7, [sp, #4]
 8007d22:	ee77 6a06 	vadd.f32	s13, s14, s12
 8007d26:	462c      	mov	r4, r5
 8007d28:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007d2c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007d30:	ee16 ca90 	vmov	ip, s13
 8007d34:	f844 cb08 	str.w	ip, [r4], #8
 8007d38:	ee75 6a23 	vadd.f32	s13, s10, s7
 8007d3c:	edd6 5a01 	vldr	s11, [r6, #4]
 8007d40:	edd7 2a01 	vldr	s5, [r7, #4]
 8007d44:	9404      	str	r4, [sp, #16]
 8007d46:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007d4a:	ee74 3a27 	vadd.f32	s7, s8, s15
 8007d4e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007d52:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8007d56:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8007d5a:	0849      	lsrs	r1, r1, #1
 8007d5c:	f102 0e08 	add.w	lr, r2, #8
 8007d60:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8007d64:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8007d68:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d6a:	ee35 4a47 	vsub.f32	s8, s10, s14
 8007d6e:	f1a1 0902 	sub.w	r9, r1, #2
 8007d72:	f8cd e00c 	str.w	lr, [sp, #12]
 8007d76:	4631      	mov	r1, r6
 8007d78:	ee13 ea90 	vmov	lr, s7
 8007d7c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8007d80:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8007d84:	4604      	mov	r4, r0
 8007d86:	edc5 5a01 	vstr	s11, [r5, #4]
 8007d8a:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007d8e:	f841 eb08 	str.w	lr, [r1], #8
 8007d92:	ee34 5a24 	vadd.f32	s10, s8, s9
 8007d96:	ee16 ea10 	vmov	lr, s12
 8007d9a:	ed86 5a01 	vstr	s10, [r6, #4]
 8007d9e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007da2:	f844 eb08 	str.w	lr, [r4], #8
 8007da6:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007daa:	edc0 6a01 	vstr	s13, [r0, #4]
 8007dae:	9405      	str	r4, [sp, #20]
 8007db0:	4604      	mov	r4, r0
 8007db2:	ee17 0a90 	vmov	r0, s15
 8007db6:	9106      	str	r1, [sp, #24]
 8007db8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007dbc:	f102 0110 	add.w	r1, r2, #16
 8007dc0:	46bc      	mov	ip, r7
 8007dc2:	9100      	str	r1, [sp, #0]
 8007dc4:	f847 0b08 	str.w	r0, [r7], #8
 8007dc8:	f102 0118 	add.w	r1, r2, #24
 8007dcc:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8007dd0:	9102      	str	r1, [sp, #8]
 8007dd2:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007dd6:	9007      	str	r0, [sp, #28]
 8007dd8:	f000 8134 	beq.w	8008044 <arm_cfft_radix8by4_f32+0x368>
 8007ddc:	f102 0920 	add.w	r9, r2, #32
 8007de0:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8007de4:	9a01      	ldr	r2, [sp, #4]
 8007de6:	f8dd a000 	ldr.w	sl, [sp]
 8007dea:	3b0c      	subs	r3, #12
 8007dec:	4683      	mov	fp, r0
 8007dee:	4463      	add	r3, ip
 8007df0:	f105 0e10 	add.w	lr, r5, #16
 8007df4:	f1a4 010c 	sub.w	r1, r4, #12
 8007df8:	f104 0510 	add.w	r5, r4, #16
 8007dfc:	f1a6 0c0c 	sub.w	ip, r6, #12
 8007e00:	f1a2 040c 	sub.w	r4, r2, #12
 8007e04:	f106 0010 	add.w	r0, r6, #16
 8007e08:	3210      	adds	r2, #16
 8007e0a:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8007e0e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007e12:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007e16:	ed52 1a02 	vldr	s3, [r2, #-8]
 8007e1a:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007e1e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8007e22:	ed12 1a01 	vldr	s2, [r2, #-4]
 8007e26:	ed10 8a01 	vldr	s16, [r0, #-4]
 8007e2a:	ee35 4a25 	vadd.f32	s8, s10, s11
 8007e2e:	ee30 6a26 	vadd.f32	s12, s0, s13
 8007e32:	ee37 7a84 	vadd.f32	s14, s15, s8
 8007e36:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007e3a:	ee37 7a21 	vadd.f32	s14, s14, s3
 8007e3e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007e42:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8007e46:	ed10 7a01 	vldr	s14, [r0, #-4]
 8007e4a:	ed52 6a01 	vldr	s13, [r2, #-4]
 8007e4e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007e52:	ee78 aa25 	vadd.f32	s21, s16, s11
 8007e56:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007e5a:	ee70 3a67 	vsub.f32	s7, s0, s15
 8007e5e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8007e62:	ed94 7a02 	vldr	s14, [r4, #8]
 8007e66:	ed9c 2a02 	vldr	s4, [ip, #8]
 8007e6a:	ed91 ba02 	vldr	s22, [r1, #8]
 8007e6e:	edd3 9a02 	vldr	s19, [r3, #8]
 8007e72:	edd4 2a01 	vldr	s5, [r4, #4]
 8007e76:	ed9c 9a01 	vldr	s18, [ip, #4]
 8007e7a:	ed93 5a01 	vldr	s10, [r3, #4]
 8007e7e:	edd1 0a01 	vldr	s1, [r1, #4]
 8007e82:	ee72 6a07 	vadd.f32	s13, s4, s14
 8007e86:	ee32 2a47 	vsub.f32	s4, s4, s14
 8007e8a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8007e8e:	ee79 4a22 	vadd.f32	s9, s18, s5
 8007e92:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8007e96:	ee79 2a62 	vsub.f32	s5, s18, s5
 8007e9a:	ed8c 7a02 	vstr	s14, [ip, #8]
 8007e9e:	ed91 7a01 	vldr	s14, [r1, #4]
 8007ea2:	edd3 8a01 	vldr	s17, [r3, #4]
 8007ea6:	ee34 7a87 	vadd.f32	s14, s9, s14
 8007eaa:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8007eae:	ee37 7a28 	vadd.f32	s14, s14, s17
 8007eb2:	ee32 9a60 	vsub.f32	s18, s4, s1
 8007eb6:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007eba:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8007ebe:	ed1a aa02 	vldr	s20, [sl, #-8]
 8007ec2:	ee73 8a22 	vadd.f32	s17, s6, s5
 8007ec6:	ee39 9a05 	vadd.f32	s18, s18, s10
 8007eca:	ee7a aac1 	vsub.f32	s21, s21, s2
 8007ece:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007ed2:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8007ed6:	ee69 ba07 	vmul.f32	s23, s18, s14
 8007eda:	ee6a aa87 	vmul.f32	s21, s21, s14
 8007ede:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8007ee2:	ee63 ca87 	vmul.f32	s25, s7, s14
 8007ee6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8007eea:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8007eee:	ee68 8a87 	vmul.f32	s17, s17, s14
 8007ef2:	ee73 3aea 	vsub.f32	s7, s7, s21
 8007ef6:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007efa:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8007efe:	ee3b aaca 	vsub.f32	s20, s23, s20
 8007f02:	ee34 4a67 	vsub.f32	s8, s8, s15
 8007f06:	ee76 6acb 	vsub.f32	s13, s13, s22
 8007f0a:	ee36 6a48 	vsub.f32	s12, s12, s16
 8007f0e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8007f12:	ed00 7a02 	vstr	s14, [r0, #-8]
 8007f16:	ed40 3a01 	vstr	s7, [r0, #-4]
 8007f1a:	edc1 8a01 	vstr	s17, [r1, #4]
 8007f1e:	ed81 aa02 	vstr	s20, [r1, #8]
 8007f22:	ed59 3a04 	vldr	s7, [r9, #-16]
 8007f26:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8007f2a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8007f2e:	ed59 6a03 	vldr	s13, [r9, #-12]
 8007f32:	ee34 4a61 	vsub.f32	s8, s8, s3
 8007f36:	ee36 6a41 	vsub.f32	s12, s12, s2
 8007f3a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8007f3e:	ee66 9a26 	vmul.f32	s19, s12, s13
 8007f42:	ee24 9a23 	vmul.f32	s18, s8, s7
 8007f46:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007f4a:	ee24 4a26 	vmul.f32	s8, s8, s13
 8007f4e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007f52:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007f56:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8007f5a:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007f5e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007f62:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8007f66:	ee79 3a29 	vadd.f32	s7, s18, s19
 8007f6a:	ee75 6a60 	vsub.f32	s13, s10, s1
 8007f6e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8007f72:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007f76:	ed45 3a02 	vstr	s7, [r5, #-8]
 8007f7a:	ed05 6a01 	vstr	s12, [r5, #-4]
 8007f7e:	ed84 7a01 	vstr	s14, [r4, #4]
 8007f82:	ed84 4a02 	vstr	s8, [r4, #8]
 8007f86:	ee35 6a81 	vadd.f32	s12, s11, s2
 8007f8a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8007f8e:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8007f92:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8007f96:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007f9a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8007f9e:	ee67 2a26 	vmul.f32	s5, s14, s13
 8007fa2:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8007fa6:	ee26 5a25 	vmul.f32	s10, s12, s11
 8007faa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007fae:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007fb2:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007fb6:	ee63 6a26 	vmul.f32	s13, s6, s13
 8007fba:	ee23 3a25 	vmul.f32	s6, s6, s11
 8007fbe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007fc2:	ee75 5a24 	vadd.f32	s11, s10, s9
 8007fc6:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8007fca:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007fce:	f1bb 0b01 	subs.w	fp, fp, #1
 8007fd2:	ed42 5a02 	vstr	s11, [r2, #-8]
 8007fd6:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007fda:	f10e 0e08 	add.w	lr, lr, #8
 8007fde:	ed83 3a02 	vstr	s6, [r3, #8]
 8007fe2:	ed83 7a01 	vstr	s14, [r3, #4]
 8007fe6:	f1ac 0c08 	sub.w	ip, ip, #8
 8007fea:	f10a 0a08 	add.w	sl, sl, #8
 8007fee:	f100 0008 	add.w	r0, r0, #8
 8007ff2:	f1a1 0108 	sub.w	r1, r1, #8
 8007ff6:	f109 0910 	add.w	r9, r9, #16
 8007ffa:	f105 0508 	add.w	r5, r5, #8
 8007ffe:	f1a4 0408 	sub.w	r4, r4, #8
 8008002:	f108 0818 	add.w	r8, r8, #24
 8008006:	f102 0208 	add.w	r2, r2, #8
 800800a:	f1a3 0308 	sub.w	r3, r3, #8
 800800e:	f47f aefc 	bne.w	8007e0a <arm_cfft_radix8by4_f32+0x12e>
 8008012:	9907      	ldr	r1, [sp, #28]
 8008014:	9800      	ldr	r0, [sp, #0]
 8008016:	00cb      	lsls	r3, r1, #3
 8008018:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800801c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008020:	9100      	str	r1, [sp, #0]
 8008022:	9904      	ldr	r1, [sp, #16]
 8008024:	4419      	add	r1, r3
 8008026:	9104      	str	r1, [sp, #16]
 8008028:	9903      	ldr	r1, [sp, #12]
 800802a:	4419      	add	r1, r3
 800802c:	9103      	str	r1, [sp, #12]
 800802e:	9906      	ldr	r1, [sp, #24]
 8008030:	4419      	add	r1, r3
 8008032:	9106      	str	r1, [sp, #24]
 8008034:	9905      	ldr	r1, [sp, #20]
 8008036:	441f      	add	r7, r3
 8008038:	4419      	add	r1, r3
 800803a:	9b02      	ldr	r3, [sp, #8]
 800803c:	9105      	str	r1, [sp, #20]
 800803e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	9904      	ldr	r1, [sp, #16]
 8008046:	9805      	ldr	r0, [sp, #20]
 8008048:	ed91 4a00 	vldr	s8, [r1]
 800804c:	edd0 6a00 	vldr	s13, [r0]
 8008050:	9b06      	ldr	r3, [sp, #24]
 8008052:	ed97 3a00 	vldr	s6, [r7]
 8008056:	edd3 7a00 	vldr	s15, [r3]
 800805a:	edd0 4a01 	vldr	s9, [r0, #4]
 800805e:	edd1 3a01 	vldr	s7, [r1, #4]
 8008062:	ed97 2a01 	vldr	s4, [r7, #4]
 8008066:	ed93 7a01 	vldr	s14, [r3, #4]
 800806a:	9a03      	ldr	r2, [sp, #12]
 800806c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8008070:	ee34 6a26 	vadd.f32	s12, s8, s13
 8008074:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8008078:	ee37 5a86 	vadd.f32	s10, s15, s12
 800807c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008080:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008084:	ee74 6a66 	vsub.f32	s13, s8, s13
 8008088:	ed81 5a00 	vstr	s10, [r1]
 800808c:	ed93 5a01 	vldr	s10, [r3, #4]
 8008090:	edd7 4a01 	vldr	s9, [r7, #4]
 8008094:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008098:	ee37 4a26 	vadd.f32	s8, s14, s13
 800809c:	ee35 5a24 	vadd.f32	s10, s10, s9
 80080a0:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80080a4:	ed81 5a01 	vstr	s10, [r1, #4]
 80080a8:	edd2 1a00 	vldr	s3, [r2]
 80080ac:	edd2 2a01 	vldr	s5, [r2, #4]
 80080b0:	ee34 5a83 	vadd.f32	s10, s9, s6
 80080b4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80080b8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80080bc:	ee64 4a21 	vmul.f32	s9, s8, s3
 80080c0:	ee24 4a22 	vmul.f32	s8, s8, s5
 80080c4:	ee65 2a22 	vmul.f32	s5, s10, s5
 80080c8:	ee25 5a21 	vmul.f32	s10, s10, s3
 80080cc:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80080d0:	ee35 5a44 	vsub.f32	s10, s10, s8
 80080d4:	edc3 2a00 	vstr	s5, [r3]
 80080d8:	ed83 5a01 	vstr	s10, [r3, #4]
 80080dc:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80080e0:	9b00      	ldr	r3, [sp, #0]
 80080e2:	ee36 6a43 	vsub.f32	s12, s12, s6
 80080e6:	ed93 4a01 	vldr	s8, [r3, #4]
 80080ea:	ed93 5a00 	vldr	s10, [r3]
 80080ee:	9b02      	ldr	r3, [sp, #8]
 80080f0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80080f4:	ee66 4a05 	vmul.f32	s9, s12, s10
 80080f8:	ee25 5a85 	vmul.f32	s10, s11, s10
 80080fc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008100:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008104:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008108:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800810c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008110:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008114:	ed80 6a01 	vstr	s12, [r0, #4]
 8008118:	edc0 5a00 	vstr	s11, [r0]
 800811c:	edd3 5a01 	vldr	s11, [r3, #4]
 8008120:	edd3 6a00 	vldr	s13, [r3]
 8008124:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008128:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800812c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8008130:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008134:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008138:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800813c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008140:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008144:	ed87 7a01 	vstr	s14, [r7, #4]
 8008148:	edc7 7a00 	vstr	s15, [r7]
 800814c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8008150:	4621      	mov	r1, r4
 8008152:	686a      	ldr	r2, [r5, #4]
 8008154:	2304      	movs	r3, #4
 8008156:	f000 f9d3 	bl	8008500 <arm_radix8_butterfly_f32>
 800815a:	4630      	mov	r0, r6
 800815c:	4621      	mov	r1, r4
 800815e:	686a      	ldr	r2, [r5, #4]
 8008160:	2304      	movs	r3, #4
 8008162:	f000 f9cd 	bl	8008500 <arm_radix8_butterfly_f32>
 8008166:	9808      	ldr	r0, [sp, #32]
 8008168:	686a      	ldr	r2, [r5, #4]
 800816a:	4621      	mov	r1, r4
 800816c:	2304      	movs	r3, #4
 800816e:	f000 f9c7 	bl	8008500 <arm_radix8_butterfly_f32>
 8008172:	686a      	ldr	r2, [r5, #4]
 8008174:	9801      	ldr	r0, [sp, #4]
 8008176:	4621      	mov	r1, r4
 8008178:	2304      	movs	r3, #4
 800817a:	b00d      	add	sp, #52	@ 0x34
 800817c:	ecbd 8b0a 	vpop	{d8-d12}
 8008180:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	f000 b9bc 	b.w	8008500 <arm_radix8_butterfly_f32>

08008188 <arm_cfft_f32>:
 8008188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818c:	2a01      	cmp	r2, #1
 800818e:	4606      	mov	r6, r0
 8008190:	4617      	mov	r7, r2
 8008192:	460c      	mov	r4, r1
 8008194:	4698      	mov	r8, r3
 8008196:	8805      	ldrh	r5, [r0, #0]
 8008198:	d056      	beq.n	8008248 <arm_cfft_f32+0xc0>
 800819a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800819e:	d063      	beq.n	8008268 <arm_cfft_f32+0xe0>
 80081a0:	d916      	bls.n	80081d0 <arm_cfft_f32+0x48>
 80081a2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80081a6:	d01a      	beq.n	80081de <arm_cfft_f32+0x56>
 80081a8:	d947      	bls.n	800823a <arm_cfft_f32+0xb2>
 80081aa:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80081ae:	d05b      	beq.n	8008268 <arm_cfft_f32+0xe0>
 80081b0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80081b4:	d105      	bne.n	80081c2 <arm_cfft_f32+0x3a>
 80081b6:	2301      	movs	r3, #1
 80081b8:	6872      	ldr	r2, [r6, #4]
 80081ba:	4629      	mov	r1, r5
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 f99f 	bl	8008500 <arm_radix8_butterfly_f32>
 80081c2:	f1b8 0f00 	cmp.w	r8, #0
 80081c6:	d111      	bne.n	80081ec <arm_cfft_f32+0x64>
 80081c8:	2f01      	cmp	r7, #1
 80081ca:	d016      	beq.n	80081fa <arm_cfft_f32+0x72>
 80081cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d0:	2d20      	cmp	r5, #32
 80081d2:	d049      	beq.n	8008268 <arm_cfft_f32+0xe0>
 80081d4:	d935      	bls.n	8008242 <arm_cfft_f32+0xba>
 80081d6:	2d40      	cmp	r5, #64	@ 0x40
 80081d8:	d0ed      	beq.n	80081b6 <arm_cfft_f32+0x2e>
 80081da:	2d80      	cmp	r5, #128	@ 0x80
 80081dc:	d1f1      	bne.n	80081c2 <arm_cfft_f32+0x3a>
 80081de:	4621      	mov	r1, r4
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff fcab 	bl	8007b3c <arm_cfft_radix8by2_f32>
 80081e6:	f1b8 0f00 	cmp.w	r8, #0
 80081ea:	d0ed      	beq.n	80081c8 <arm_cfft_f32+0x40>
 80081ec:	68b2      	ldr	r2, [r6, #8]
 80081ee:	89b1      	ldrh	r1, [r6, #12]
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 f841 	bl	8008278 <arm_bitreversal_32>
 80081f6:	2f01      	cmp	r7, #1
 80081f8:	d1e8      	bne.n	80081cc <arm_cfft_f32+0x44>
 80081fa:	ee07 5a90 	vmov	s15, r5
 80081fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008206:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800820a:	2d00      	cmp	r5, #0
 800820c:	d0de      	beq.n	80081cc <arm_cfft_f32+0x44>
 800820e:	f104 0108 	add.w	r1, r4, #8
 8008212:	2300      	movs	r3, #0
 8008214:	3301      	adds	r3, #1
 8008216:	429d      	cmp	r5, r3
 8008218:	f101 0108 	add.w	r1, r1, #8
 800821c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008220:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008224:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008228:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800822c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008230:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008234:	d1ee      	bne.n	8008214 <arm_cfft_f32+0x8c>
 8008236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800823e:	d0ba      	beq.n	80081b6 <arm_cfft_f32+0x2e>
 8008240:	e7bf      	b.n	80081c2 <arm_cfft_f32+0x3a>
 8008242:	2d10      	cmp	r5, #16
 8008244:	d0cb      	beq.n	80081de <arm_cfft_f32+0x56>
 8008246:	e7bc      	b.n	80081c2 <arm_cfft_f32+0x3a>
 8008248:	b19d      	cbz	r5, 8008272 <arm_cfft_f32+0xea>
 800824a:	f101 030c 	add.w	r3, r1, #12
 800824e:	2200      	movs	r2, #0
 8008250:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008254:	3201      	adds	r2, #1
 8008256:	eef1 7a67 	vneg.f32	s15, s15
 800825a:	4295      	cmp	r5, r2
 800825c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008260:	f103 0308 	add.w	r3, r3, #8
 8008264:	d1f4      	bne.n	8008250 <arm_cfft_f32+0xc8>
 8008266:	e798      	b.n	800819a <arm_cfft_f32+0x12>
 8008268:	4621      	mov	r1, r4
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff fd36 	bl	8007cdc <arm_cfft_radix8by4_f32>
 8008270:	e7a7      	b.n	80081c2 <arm_cfft_f32+0x3a>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0aa      	beq.n	80081cc <arm_cfft_f32+0x44>
 8008276:	e7b9      	b.n	80081ec <arm_cfft_f32+0x64>

08008278 <arm_bitreversal_32>:
 8008278:	b1e9      	cbz	r1, 80082b6 <arm_bitreversal_32+0x3e>
 800827a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827c:	2500      	movs	r5, #0
 800827e:	f102 0e02 	add.w	lr, r2, #2
 8008282:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8008286:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800828a:	08a4      	lsrs	r4, r4, #2
 800828c:	089b      	lsrs	r3, r3, #2
 800828e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8008292:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8008296:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800829a:	00a6      	lsls	r6, r4, #2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80082a2:	3304      	adds	r3, #4
 80082a4:	1d34      	adds	r4, r6, #4
 80082a6:	3502      	adds	r5, #2
 80082a8:	58c6      	ldr	r6, [r0, r3]
 80082aa:	5907      	ldr	r7, [r0, r4]
 80082ac:	50c7      	str	r7, [r0, r3]
 80082ae:	428d      	cmp	r5, r1
 80082b0:	5106      	str	r6, [r0, r4]
 80082b2:	d3e6      	bcc.n	8008282 <arm_bitreversal_32+0xa>
 80082b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b6:	4770      	bx	lr

080082b8 <arm_cmplx_mag_f32>:
 80082b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082bc:	ed2d 8b02 	vpush	{d8}
 80082c0:	0897      	lsrs	r7, r2, #2
 80082c2:	b084      	sub	sp, #16
 80082c4:	d077      	beq.n	80083b6 <arm_cmplx_mag_f32+0xfe>
 80082c6:	f04f 0800 	mov.w	r8, #0
 80082ca:	f100 0420 	add.w	r4, r0, #32
 80082ce:	f101 0510 	add.w	r5, r1, #16
 80082d2:	463e      	mov	r6, r7
 80082d4:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 80082d8:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 80082dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80082e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f0:	f2c0 80c5 	blt.w	800847e <arm_cmplx_mag_f32+0x1c6>
 80082f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80082f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008300:	f100 80cb 	bmi.w	800849a <arm_cmplx_mag_f32+0x1e2>
 8008304:	ed05 8a04 	vstr	s16, [r5, #-16]
 8008308:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800830c:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8008310:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008314:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008318:	ee30 0a27 	vadd.f32	s0, s0, s15
 800831c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008324:	f2c0 80a8 	blt.w	8008478 <arm_cmplx_mag_f32+0x1c0>
 8008328:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800832c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008330:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008334:	f100 80a8 	bmi.w	8008488 <arm_cmplx_mag_f32+0x1d0>
 8008338:	ed05 8a03 	vstr	s16, [r5, #-12]
 800833c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8008340:	ed54 7a03 	vldr	s15, [r4, #-12]
 8008344:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008348:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800834c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008350:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008358:	f2c0 808b 	blt.w	8008472 <arm_cmplx_mag_f32+0x1ba>
 800835c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008364:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008368:	f100 80a9 	bmi.w	80084be <arm_cmplx_mag_f32+0x206>
 800836c:	ed05 8a02 	vstr	s16, [r5, #-8]
 8008370:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008374:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008378:	ee20 0a00 	vmul.f32	s0, s0, s0
 800837c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008380:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008384:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838c:	db6e      	blt.n	800846c <arm_cmplx_mag_f32+0x1b4>
 800838e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008396:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800839a:	f100 8087 	bmi.w	80084ac <arm_cmplx_mag_f32+0x1f4>
 800839e:	ed05 8a01 	vstr	s16, [r5, #-4]
 80083a2:	3e01      	subs	r6, #1
 80083a4:	f104 0420 	add.w	r4, r4, #32
 80083a8:	f105 0510 	add.w	r5, r5, #16
 80083ac:	d192      	bne.n	80082d4 <arm_cmplx_mag_f32+0x1c>
 80083ae:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80083b2:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80083b6:	f012 0203 	ands.w	r2, r2, #3
 80083ba:	d052      	beq.n	8008462 <arm_cmplx_mag_f32+0x1aa>
 80083bc:	ed90 0a00 	vldr	s0, [r0]
 80083c0:	edd0 7a01 	vldr	s15, [r0, #4]
 80083c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083cc:	2300      	movs	r3, #0
 80083ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 80083d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083da:	bfb8      	it	lt
 80083dc:	600b      	strlt	r3, [r1, #0]
 80083de:	db08      	blt.n	80083f2 <arm_cmplx_mag_f32+0x13a>
 80083e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80083e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80083ec:	d479      	bmi.n	80084e2 <arm_cmplx_mag_f32+0x22a>
 80083ee:	ed81 8a00 	vstr	s16, [r1]
 80083f2:	3a01      	subs	r2, #1
 80083f4:	d035      	beq.n	8008462 <arm_cmplx_mag_f32+0x1aa>
 80083f6:	ed90 0a02 	vldr	s0, [r0, #8]
 80083fa:	edd0 7a03 	vldr	s15, [r0, #12]
 80083fe:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008402:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008406:	2300      	movs	r3, #0
 8008408:	ee37 0a80 	vadd.f32	s0, s15, s0
 800840c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008414:	bfb8      	it	lt
 8008416:	604b      	strlt	r3, [r1, #4]
 8008418:	db08      	blt.n	800842c <arm_cmplx_mag_f32+0x174>
 800841a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008422:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008426:	d453      	bmi.n	80084d0 <arm_cmplx_mag_f32+0x218>
 8008428:	ed81 8a01 	vstr	s16, [r1, #4]
 800842c:	2a01      	cmp	r2, #1
 800842e:	d018      	beq.n	8008462 <arm_cmplx_mag_f32+0x1aa>
 8008430:	ed90 0a04 	vldr	s0, [r0, #16]
 8008434:	edd0 7a05 	vldr	s15, [r0, #20]
 8008438:	ee20 0a00 	vmul.f32	s0, s0, s0
 800843c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008440:	2300      	movs	r3, #0
 8008442:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008446:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800844a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844e:	db19      	blt.n	8008484 <arm_cmplx_mag_f32+0x1cc>
 8008450:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800845c:	d44a      	bmi.n	80084f4 <arm_cmplx_mag_f32+0x23c>
 800845e:	ed81 8a02 	vstr	s16, [r1, #8]
 8008462:	b004      	add	sp, #16
 8008464:	ecbd 8b02 	vpop	{d8}
 8008468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800846c:	f845 8c04 	str.w	r8, [r5, #-4]
 8008470:	e797      	b.n	80083a2 <arm_cmplx_mag_f32+0xea>
 8008472:	f845 8c08 	str.w	r8, [r5, #-8]
 8008476:	e77b      	b.n	8008370 <arm_cmplx_mag_f32+0xb8>
 8008478:	f845 8c0c 	str.w	r8, [r5, #-12]
 800847c:	e75e      	b.n	800833c <arm_cmplx_mag_f32+0x84>
 800847e:	f845 8c10 	str.w	r8, [r5, #-16]
 8008482:	e741      	b.n	8008308 <arm_cmplx_mag_f32+0x50>
 8008484:	608b      	str	r3, [r1, #8]
 8008486:	e7ec      	b.n	8008462 <arm_cmplx_mag_f32+0x1aa>
 8008488:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800848c:	9001      	str	r0, [sp, #4]
 800848e:	f002 ffd5 	bl	800b43c <sqrtf>
 8008492:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008496:	9801      	ldr	r0, [sp, #4]
 8008498:	e74e      	b.n	8008338 <arm_cmplx_mag_f32+0x80>
 800849a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800849e:	9001      	str	r0, [sp, #4]
 80084a0:	f002 ffcc 	bl	800b43c <sqrtf>
 80084a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80084a8:	9801      	ldr	r0, [sp, #4]
 80084aa:	e72b      	b.n	8008304 <arm_cmplx_mag_f32+0x4c>
 80084ac:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80084b0:	9001      	str	r0, [sp, #4]
 80084b2:	f002 ffc3 	bl	800b43c <sqrtf>
 80084b6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80084ba:	9801      	ldr	r0, [sp, #4]
 80084bc:	e76f      	b.n	800839e <arm_cmplx_mag_f32+0xe6>
 80084be:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80084c2:	9001      	str	r0, [sp, #4]
 80084c4:	f002 ffba 	bl	800b43c <sqrtf>
 80084c8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80084cc:	9801      	ldr	r0, [sp, #4]
 80084ce:	e74d      	b.n	800836c <arm_cmplx_mag_f32+0xb4>
 80084d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d4:	9201      	str	r2, [sp, #4]
 80084d6:	f002 ffb1 	bl	800b43c <sqrtf>
 80084da:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80084de:	9903      	ldr	r1, [sp, #12]
 80084e0:	e7a2      	b.n	8008428 <arm_cmplx_mag_f32+0x170>
 80084e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e6:	9201      	str	r2, [sp, #4]
 80084e8:	f002 ffa8 	bl	800b43c <sqrtf>
 80084ec:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80084f0:	9903      	ldr	r1, [sp, #12]
 80084f2:	e77c      	b.n	80083ee <arm_cmplx_mag_f32+0x136>
 80084f4:	9101      	str	r1, [sp, #4]
 80084f6:	f002 ffa1 	bl	800b43c <sqrtf>
 80084fa:	9901      	ldr	r1, [sp, #4]
 80084fc:	e7af      	b.n	800845e <arm_cmplx_mag_f32+0x1a6>
 80084fe:	bf00      	nop

08008500 <arm_radix8_butterfly_f32>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	ed2d 8b10 	vpush	{d8-d15}
 8008508:	b095      	sub	sp, #84	@ 0x54
 800850a:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800850e:	4603      	mov	r3, r0
 8008510:	3304      	adds	r3, #4
 8008512:	ed9f bab9 	vldr	s22, [pc, #740]	@ 80087f8 <arm_radix8_butterfly_f32+0x2f8>
 8008516:	9012      	str	r0, [sp, #72]	@ 0x48
 8008518:	468b      	mov	fp, r1
 800851a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800851c:	4689      	mov	r9, r1
 800851e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8008522:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008524:	960f      	str	r6, [sp, #60]	@ 0x3c
 8008526:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800852a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800852e:	eb03 0508 	add.w	r5, r3, r8
 8008532:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8008536:	eb05 040e 	add.w	r4, r5, lr
 800853a:	0137      	lsls	r7, r6, #4
 800853c:	eba6 030a 	sub.w	r3, r6, sl
 8008540:	eb04 000e 	add.w	r0, r4, lr
 8008544:	44b2      	add	sl, r6
 8008546:	1d3a      	adds	r2, r7, #4
 8008548:	9702      	str	r7, [sp, #8]
 800854a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800854e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8008552:	ebae 0c06 	sub.w	ip, lr, r6
 8008556:	9703      	str	r7, [sp, #12]
 8008558:	eb03 0708 	add.w	r7, r3, r8
 800855c:	9701      	str	r7, [sp, #4]
 800855e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8008562:	9706      	str	r7, [sp, #24]
 8008564:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8008566:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800856a:	f10e 0104 	add.w	r1, lr, #4
 800856e:	4439      	add	r1, r7
 8008570:	443a      	add	r2, r7
 8008572:	0137      	lsls	r7, r6, #4
 8008574:	00f6      	lsls	r6, r6, #3
 8008576:	9704      	str	r7, [sp, #16]
 8008578:	9605      	str	r6, [sp, #20]
 800857a:	9f01      	ldr	r7, [sp, #4]
 800857c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800857e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8008582:	f04f 0c00 	mov.w	ip, #0
 8008586:	edd4 6a00 	vldr	s13, [r4]
 800858a:	edd7 1a00 	vldr	s3, [r7]
 800858e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8008592:	edd5 5a00 	vldr	s11, [r5]
 8008596:	ed52 9a01 	vldr	s19, [r2, #-4]
 800859a:	ed90 6a00 	vldr	s12, [r0]
 800859e:	ed51 7a01 	vldr	s15, [r1, #-4]
 80085a2:	ed93 3a00 	vldr	s6, [r3]
 80085a6:	ee39 0a86 	vadd.f32	s0, s19, s12
 80085aa:	ee33 2a21 	vadd.f32	s4, s6, s3
 80085ae:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80085b2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80085b6:	ee35 7a02 	vadd.f32	s14, s10, s4
 80085ba:	ee34 4a80 	vadd.f32	s8, s9, s0
 80085be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085c2:	ee74 6a07 	vadd.f32	s13, s8, s14
 80085c6:	ee34 4a47 	vsub.f32	s8, s8, s14
 80085ca:	ed46 6a01 	vstr	s13, [r6, #-4]
 80085ce:	ed85 4a00 	vstr	s8, [r5]
 80085d2:	edd1 6a00 	vldr	s13, [r1]
 80085d6:	ed94 9a01 	vldr	s18, [r4, #4]
 80085da:	edd3 2a01 	vldr	s5, [r3, #4]
 80085de:	edd7 8a01 	vldr	s17, [r7, #4]
 80085e2:	edd6 0a00 	vldr	s1, [r6]
 80085e6:	edd5 3a01 	vldr	s7, [r5, #4]
 80085ea:	ed90 8a01 	vldr	s16, [r0, #4]
 80085ee:	ed92 7a00 	vldr	s14, [r2]
 80085f2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80085f6:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80085fa:	ee72 aae8 	vsub.f32	s21, s5, s17
 80085fe:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8008602:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8008606:	ee77 7a83 	vadd.f32	s15, s15, s6
 800860a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800860e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8008612:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8008616:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800861a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800861e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8008622:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8008626:	ee37 7a48 	vsub.f32	s14, s14, s16
 800862a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800862e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8008632:	ee76 6a89 	vadd.f32	s13, s13, s18
 8008636:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800863a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800863e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008642:	ee35 5a42 	vsub.f32	s10, s10, s4
 8008646:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800864a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800864e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008652:	ee33 3a60 	vsub.f32	s6, s6, s1
 8008656:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800865a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800865e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8008662:	ee37 7a41 	vsub.f32	s14, s14, s2
 8008666:	ee73 1a84 	vadd.f32	s3, s7, s8
 800866a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800866e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8008672:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008676:	ee32 8a00 	vadd.f32	s16, s4, s0
 800867a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800867e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8008682:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008686:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800868a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800868e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008692:	ee34 6a67 	vsub.f32	s12, s8, s15
 8008696:	ee75 4a87 	vadd.f32	s9, s11, s14
 800869a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800869e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80086a2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80086a6:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80086aa:	44dc      	add	ip, fp
 80086ac:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80086b0:	45e1      	cmp	r9, ip
 80086b2:	ed86 8a00 	vstr	s16, [r6]
 80086b6:	ed85 2a01 	vstr	s4, [r5, #4]
 80086ba:	4456      	add	r6, sl
 80086bc:	ed02 0a01 	vstr	s0, [r2, #-4]
 80086c0:	4455      	add	r5, sl
 80086c2:	edc0 6a00 	vstr	s13, [r0]
 80086c6:	ed82 1a00 	vstr	s2, [r2]
 80086ca:	ed80 5a01 	vstr	s10, [r0, #4]
 80086ce:	4452      	add	r2, sl
 80086d0:	ed01 3a01 	vstr	s6, [r1, #-4]
 80086d4:	4450      	add	r0, sl
 80086d6:	edc7 2a00 	vstr	s5, [r7]
 80086da:	edc4 4a00 	vstr	s9, [r4]
 80086de:	ed83 7a00 	vstr	s14, [r3]
 80086e2:	edc1 5a00 	vstr	s11, [r1]
 80086e6:	edc7 3a01 	vstr	s7, [r7, #4]
 80086ea:	4451      	add	r1, sl
 80086ec:	ed84 6a01 	vstr	s12, [r4, #4]
 80086f0:	4457      	add	r7, sl
 80086f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80086f6:	4454      	add	r4, sl
 80086f8:	4453      	add	r3, sl
 80086fa:	f63f af44 	bhi.w	8008586 <arm_radix8_butterfly_f32+0x86>
 80086fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008700:	2b07      	cmp	r3, #7
 8008702:	f240 81b7 	bls.w	8008a74 <arm_radix8_butterfly_f32+0x574>
 8008706:	9b06      	ldr	r3, [sp, #24]
 8008708:	9903      	ldr	r1, [sp, #12]
 800870a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800870c:	9e05      	ldr	r6, [sp, #20]
 800870e:	9a04      	ldr	r2, [sp, #16]
 8008710:	f103 0c08 	add.w	ip, r3, #8
 8008714:	9b02      	ldr	r3, [sp, #8]
 8008716:	3108      	adds	r1, #8
 8008718:	f108 0808 	add.w	r8, r8, #8
 800871c:	1841      	adds	r1, r0, r1
 800871e:	3608      	adds	r6, #8
 8008720:	330c      	adds	r3, #12
 8008722:	4604      	mov	r4, r0
 8008724:	4444      	add	r4, r8
 8008726:	18c3      	adds	r3, r0, r3
 8008728:	9109      	str	r1, [sp, #36]	@ 0x24
 800872a:	1981      	adds	r1, r0, r6
 800872c:	f10e 0e08 	add.w	lr, lr, #8
 8008730:	3208      	adds	r2, #8
 8008732:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008734:	9107      	str	r1, [sp, #28]
 8008736:	4604      	mov	r4, r0
 8008738:	4601      	mov	r1, r0
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	f100 030c 	add.w	r3, r0, #12
 8008740:	4474      	add	r4, lr
 8008742:	f04f 0801 	mov.w	r8, #1
 8008746:	1882      	adds	r2, r0, r2
 8008748:	4461      	add	r1, ip
 800874a:	9305      	str	r3, [sp, #20]
 800874c:	464b      	mov	r3, r9
 800874e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008750:	46c1      	mov	r9, r8
 8008752:	9208      	str	r2, [sp, #32]
 8008754:	46d8      	mov	r8, fp
 8008756:	9106      	str	r1, [sp, #24]
 8008758:	f04f 0e00 	mov.w	lr, #0
 800875c:	469b      	mov	fp, r3
 800875e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008760:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008762:	449e      	add	lr, r3
 8008764:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8008768:	441a      	add	r2, r3
 800876a:	920e      	str	r2, [sp, #56]	@ 0x38
 800876c:	441a      	add	r2, r3
 800876e:	18d4      	adds	r4, r2, r3
 8008770:	18e5      	adds	r5, r4, r3
 8008772:	18ee      	adds	r6, r5, r3
 8008774:	18f7      	adds	r7, r6, r3
 8008776:	eb07 0c03 	add.w	ip, r7, r3
 800877a:	920d      	str	r2, [sp, #52]	@ 0x34
 800877c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8008780:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8008784:	910c      	str	r1, [sp, #48]	@ 0x30
 8008786:	4419      	add	r1, r3
 8008788:	9103      	str	r1, [sp, #12]
 800878a:	4419      	add	r1, r3
 800878c:	18ca      	adds	r2, r1, r3
 800878e:	9202      	str	r2, [sp, #8]
 8008790:	441a      	add	r2, r3
 8008792:	18d0      	adds	r0, r2, r3
 8008794:	ed92 ea01 	vldr	s28, [r2, #4]
 8008798:	9a02      	ldr	r2, [sp, #8]
 800879a:	edd4 7a00 	vldr	s15, [r4]
 800879e:	edd2 da01 	vldr	s27, [r2, #4]
 80087a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80087a4:	ed91 da01 	vldr	s26, [r1, #4]
 80087a8:	ed92 ca01 	vldr	s24, [r2, #4]
 80087ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087ae:	9903      	ldr	r1, [sp, #12]
 80087b0:	edcd 7a03 	vstr	s15, [sp, #12]
 80087b4:	edd2 7a00 	vldr	s15, [r2]
 80087b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ba:	edcd 7a02 	vstr	s15, [sp, #8]
 80087be:	edd2 7a00 	vldr	s15, [r2]
 80087c2:	edd0 ea01 	vldr	s29, [r0, #4]
 80087c6:	edd1 ca01 	vldr	s25, [r1, #4]
 80087ca:	eddc ba00 	vldr	s23, [ip]
 80087ce:	edd7 aa00 	vldr	s21, [r7]
 80087d2:	ed96 aa00 	vldr	s20, [r6]
 80087d6:	edd5 9a00 	vldr	s19, [r5]
 80087da:	edcd 7a01 	vstr	s15, [sp, #4]
 80087de:	4403      	add	r3, r0
 80087e0:	ed93 fa01 	vldr	s30, [r3, #4]
 80087e4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80087e8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80087ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80087f4:	46cc      	mov	ip, r9
 80087f6:	e001      	b.n	80087fc <arm_radix8_butterfly_f32+0x2fc>
 80087f8:	3f3504f3 	.word	0x3f3504f3
 80087fc:	ed91 6a00 	vldr	s12, [r1]
 8008800:	ed93 5a00 	vldr	s10, [r3]
 8008804:	edd0 fa00 	vldr	s31, [r0]
 8008808:	edd4 7a00 	vldr	s15, [r4]
 800880c:	ed95 7a00 	vldr	s14, [r5]
 8008810:	ed56 3a01 	vldr	s7, [r6, #-4]
 8008814:	ed17 3a01 	vldr	s6, [r7, #-4]
 8008818:	ed92 2a00 	vldr	s4, [r2]
 800881c:	ed96 0a00 	vldr	s0, [r6]
 8008820:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008824:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008828:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800882c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008830:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008834:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008838:	ee32 2a46 	vsub.f32	s4, s4, s12
 800883c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008844:	ed06 6a01 	vstr	s12, [r6, #-4]
 8008848:	edd4 8a01 	vldr	s17, [r4, #4]
 800884c:	ed92 9a01 	vldr	s18, [r2, #4]
 8008850:	edd7 0a00 	vldr	s1, [r7]
 8008854:	edd1 2a01 	vldr	s5, [r1, #4]
 8008858:	ed95 7a01 	vldr	s14, [r5, #4]
 800885c:	ed93 6a01 	vldr	s12, [r3, #4]
 8008860:	edd0 5a01 	vldr	s11, [r0, #4]
 8008864:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008868:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800886c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008870:	ee78 fac7 	vsub.f32	s31, s17, s14
 8008874:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008878:	ee38 7a87 	vadd.f32	s14, s17, s14
 800887c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008880:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008884:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008888:	ee72 7a67 	vsub.f32	s15, s4, s15
 800888c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008890:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8008894:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008898:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800889c:	ee32 1a08 	vadd.f32	s2, s4, s16
 80088a0:	ee72 fa87 	vadd.f32	s31, s5, s14
 80088a4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80088a8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80088ac:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80088b0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80088b4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80088b8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80088bc:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80088c0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80088c4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80088c8:	ee30 6a46 	vsub.f32	s12, s0, s12
 80088cc:	ee74 0a22 	vadd.f32	s1, s8, s5
 80088d0:	ee36 0a28 	vadd.f32	s0, s12, s17
 80088d4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80088d8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80088dc:	ee32 4a64 	vsub.f32	s8, s4, s9
 80088e0:	ee73 8a09 	vadd.f32	s17, s6, s18
 80088e4:	ee74 4a82 	vadd.f32	s9, s9, s4
 80088e8:	ee33 9a49 	vsub.f32	s18, s6, s18
 80088ec:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80088f0:	ee35 3a85 	vadd.f32	s6, s11, s10
 80088f4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80088f8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80088fc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008900:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8008904:	ee30 7a68 	vsub.f32	s14, s0, s17
 8008908:	ee35 8a03 	vadd.f32	s16, s10, s6
 800890c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8008910:	ee73 3a82 	vadd.f32	s7, s7, s4
 8008914:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8008918:	ed9d 2a01 	vldr	s4, [sp, #4]
 800891c:	eddd 1a02 	vldr	s3, [sp, #8]
 8008920:	ee35 5a43 	vsub.f32	s10, s10, s6
 8008924:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8008928:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800892c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8008930:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008934:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8008938:	ee76 5a49 	vsub.f32	s11, s12, s18
 800893c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8008940:	ee39 6a06 	vadd.f32	s12, s18, s12
 8008944:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8008948:	ee21 4a84 	vmul.f32	s8, s3, s8
 800894c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8008950:	ee22 7a07 	vmul.f32	s14, s4, s14
 8008954:	ee22 2a08 	vmul.f32	s4, s4, s16
 8008958:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800895c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8008960:	ee31 1a09 	vadd.f32	s2, s2, s18
 8008964:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8008968:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800896c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8008970:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008974:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8008978:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800897c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8008980:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8008984:	ee38 2a89 	vadd.f32	s4, s17, s18
 8008988:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800898c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8008990:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8008994:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8008998:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800899c:	eddd 5a03 	vldr	s11, [sp, #12]
 80089a0:	edc6 fa00 	vstr	s31, [r6]
 80089a4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80089a8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80089ac:	ee30 0a45 	vsub.f32	s0, s0, s10
 80089b0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80089b4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80089b8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80089bc:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80089c0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80089c4:	ee25 6a86 	vmul.f32	s12, s11, s12
 80089c8:	ee74 4a89 	vadd.f32	s9, s9, s18
 80089cc:	ee34 3a43 	vsub.f32	s6, s8, s6
 80089d0:	ee78 8a85 	vadd.f32	s17, s17, s10
 80089d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80089d8:	44c4      	add	ip, r8
 80089da:	45e3      	cmp	fp, ip
 80089dc:	edc3 3a00 	vstr	s7, [r3]
 80089e0:	edc3 6a01 	vstr	s13, [r3, #4]
 80089e4:	4456      	add	r6, sl
 80089e6:	ed07 1a01 	vstr	s2, [r7, #-4]
 80089ea:	edc7 0a00 	vstr	s1, [r7]
 80089ee:	4453      	add	r3, sl
 80089f0:	ed80 2a00 	vstr	s4, [r0]
 80089f4:	edc0 2a01 	vstr	s5, [r0, #4]
 80089f8:	4457      	add	r7, sl
 80089fa:	edc2 1a00 	vstr	s3, [r2]
 80089fe:	ed82 7a01 	vstr	s14, [r2, #4]
 8008a02:	4450      	add	r0, sl
 8008a04:	ed85 8a00 	vstr	s16, [r5]
 8008a08:	ed85 0a01 	vstr	s0, [r5, #4]
 8008a0c:	4452      	add	r2, sl
 8008a0e:	edc1 4a00 	vstr	s9, [r1]
 8008a12:	4455      	add	r5, sl
 8008a14:	ed81 3a01 	vstr	s6, [r1, #4]
 8008a18:	edc4 8a00 	vstr	s17, [r4]
 8008a1c:	ed84 6a01 	vstr	s12, [r4, #4]
 8008a20:	4451      	add	r1, sl
 8008a22:	4454      	add	r4, sl
 8008a24:	f63f aeea 	bhi.w	80087fc <arm_radix8_butterfly_f32+0x2fc>
 8008a28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a30:	3308      	adds	r3, #8
 8008a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a36:	3308      	adds	r3, #8
 8008a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a3a:	9b08      	ldr	r3, [sp, #32]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	9308      	str	r3, [sp, #32]
 8008a40:	9b07      	ldr	r3, [sp, #28]
 8008a42:	3308      	adds	r3, #8
 8008a44:	9307      	str	r3, [sp, #28]
 8008a46:	9b06      	ldr	r3, [sp, #24]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	9306      	str	r3, [sp, #24]
 8008a4c:	9b05      	ldr	r3, [sp, #20]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	9305      	str	r3, [sp, #20]
 8008a52:	9b04      	ldr	r3, [sp, #16]
 8008a54:	3308      	adds	r3, #8
 8008a56:	9304      	str	r3, [sp, #16]
 8008a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a5a:	f109 0901 	add.w	r9, r9, #1
 8008a5e:	454b      	cmp	r3, r9
 8008a60:	f47f ae7d 	bne.w	800875e <arm_radix8_butterfly_f32+0x25e>
 8008a64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	46d9      	mov	r9, fp
 8008a6c:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a6e:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8008a72:	e554      	b.n	800851e <arm_radix8_butterfly_f32+0x1e>
 8008a74:	b015      	add	sp, #84	@ 0x54
 8008a76:	ecbd 8b10 	vpop	{d8-d15}
 8008a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7e:	bf00      	nop

08008a80 <__cvt>:
 8008a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	ec57 6b10 	vmov	r6, r7, d0
 8008a88:	2f00      	cmp	r7, #0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	463b      	mov	r3, r7
 8008a90:	bfbb      	ittet	lt
 8008a92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008a96:	461f      	movlt	r7, r3
 8008a98:	2300      	movge	r3, #0
 8008a9a:	232d      	movlt	r3, #45	@ 0x2d
 8008a9c:	700b      	strb	r3, [r1, #0]
 8008a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008aa4:	4691      	mov	r9, r2
 8008aa6:	f023 0820 	bic.w	r8, r3, #32
 8008aaa:	bfbc      	itt	lt
 8008aac:	4632      	movlt	r2, r6
 8008aae:	4616      	movlt	r6, r2
 8008ab0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ab4:	d005      	beq.n	8008ac2 <__cvt+0x42>
 8008ab6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008aba:	d100      	bne.n	8008abe <__cvt+0x3e>
 8008abc:	3401      	adds	r4, #1
 8008abe:	2102      	movs	r1, #2
 8008ac0:	e000      	b.n	8008ac4 <__cvt+0x44>
 8008ac2:	2103      	movs	r1, #3
 8008ac4:	ab03      	add	r3, sp, #12
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	ab02      	add	r3, sp, #8
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	ec47 6b10 	vmov	d0, r6, r7
 8008ad0:	4653      	mov	r3, sl
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	f000 fe10 	bl	80096f8 <_dtoa_r>
 8008ad8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008adc:	4605      	mov	r5, r0
 8008ade:	d119      	bne.n	8008b14 <__cvt+0x94>
 8008ae0:	f019 0f01 	tst.w	r9, #1
 8008ae4:	d00e      	beq.n	8008b04 <__cvt+0x84>
 8008ae6:	eb00 0904 	add.w	r9, r0, r4
 8008aea:	2200      	movs	r2, #0
 8008aec:	2300      	movs	r3, #0
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f8 f811 	bl	8000b18 <__aeabi_dcmpeq>
 8008af6:	b108      	cbz	r0, 8008afc <__cvt+0x7c>
 8008af8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008afc:	2230      	movs	r2, #48	@ 0x30
 8008afe:	9b03      	ldr	r3, [sp, #12]
 8008b00:	454b      	cmp	r3, r9
 8008b02:	d31e      	bcc.n	8008b42 <__cvt+0xc2>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b08:	1b5b      	subs	r3, r3, r5
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	b004      	add	sp, #16
 8008b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b18:	eb00 0904 	add.w	r9, r0, r4
 8008b1c:	d1e5      	bne.n	8008aea <__cvt+0x6a>
 8008b1e:	7803      	ldrb	r3, [r0, #0]
 8008b20:	2b30      	cmp	r3, #48	@ 0x30
 8008b22:	d10a      	bne.n	8008b3a <__cvt+0xba>
 8008b24:	2200      	movs	r2, #0
 8008b26:	2300      	movs	r3, #0
 8008b28:	4630      	mov	r0, r6
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	f7f7 fff4 	bl	8000b18 <__aeabi_dcmpeq>
 8008b30:	b918      	cbnz	r0, 8008b3a <__cvt+0xba>
 8008b32:	f1c4 0401 	rsb	r4, r4, #1
 8008b36:	f8ca 4000 	str.w	r4, [sl]
 8008b3a:	f8da 3000 	ldr.w	r3, [sl]
 8008b3e:	4499      	add	r9, r3
 8008b40:	e7d3      	b.n	8008aea <__cvt+0x6a>
 8008b42:	1c59      	adds	r1, r3, #1
 8008b44:	9103      	str	r1, [sp, #12]
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	e7d9      	b.n	8008afe <__cvt+0x7e>

08008b4a <__exponent>:
 8008b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	bfba      	itte	lt
 8008b50:	4249      	neglt	r1, r1
 8008b52:	232d      	movlt	r3, #45	@ 0x2d
 8008b54:	232b      	movge	r3, #43	@ 0x2b
 8008b56:	2909      	cmp	r1, #9
 8008b58:	7002      	strb	r2, [r0, #0]
 8008b5a:	7043      	strb	r3, [r0, #1]
 8008b5c:	dd29      	ble.n	8008bb2 <__exponent+0x68>
 8008b5e:	f10d 0307 	add.w	r3, sp, #7
 8008b62:	461d      	mov	r5, r3
 8008b64:	270a      	movs	r7, #10
 8008b66:	461a      	mov	r2, r3
 8008b68:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b6c:	fb07 1416 	mls	r4, r7, r6, r1
 8008b70:	3430      	adds	r4, #48	@ 0x30
 8008b72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b76:	460c      	mov	r4, r1
 8008b78:	2c63      	cmp	r4, #99	@ 0x63
 8008b7a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008b7e:	4631      	mov	r1, r6
 8008b80:	dcf1      	bgt.n	8008b66 <__exponent+0x1c>
 8008b82:	3130      	adds	r1, #48	@ 0x30
 8008b84:	1e94      	subs	r4, r2, #2
 8008b86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b8a:	1c41      	adds	r1, r0, #1
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	42ab      	cmp	r3, r5
 8008b90:	d30a      	bcc.n	8008ba8 <__exponent+0x5e>
 8008b92:	f10d 0309 	add.w	r3, sp, #9
 8008b96:	1a9b      	subs	r3, r3, r2
 8008b98:	42ac      	cmp	r4, r5
 8008b9a:	bf88      	it	hi
 8008b9c:	2300      	movhi	r3, #0
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	4403      	add	r3, r0
 8008ba2:	1a18      	subs	r0, r3, r0
 8008ba4:	b003      	add	sp, #12
 8008ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008bac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008bb0:	e7ed      	b.n	8008b8e <__exponent+0x44>
 8008bb2:	2330      	movs	r3, #48	@ 0x30
 8008bb4:	3130      	adds	r1, #48	@ 0x30
 8008bb6:	7083      	strb	r3, [r0, #2]
 8008bb8:	70c1      	strb	r1, [r0, #3]
 8008bba:	1d03      	adds	r3, r0, #4
 8008bbc:	e7f1      	b.n	8008ba2 <__exponent+0x58>
	...

08008bc0 <_printf_float>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	b08d      	sub	sp, #52	@ 0x34
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008bcc:	4616      	mov	r6, r2
 8008bce:	461f      	mov	r7, r3
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	f000 fcd5 	bl	8009580 <_localeconv_r>
 8008bd6:	6803      	ldr	r3, [r0, #0]
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f7 fb70 	bl	80002c0 <strlen>
 8008be0:	2300      	movs	r3, #0
 8008be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be4:	f8d8 3000 	ldr.w	r3, [r8]
 8008be8:	9005      	str	r0, [sp, #20]
 8008bea:	3307      	adds	r3, #7
 8008bec:	f023 0307 	bic.w	r3, r3, #7
 8008bf0:	f103 0208 	add.w	r2, r3, #8
 8008bf4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008bf8:	f8d4 b000 	ldr.w	fp, [r4]
 8008bfc:	f8c8 2000 	str.w	r2, [r8]
 8008c00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c08:	9307      	str	r3, [sp, #28]
 8008c0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c16:	4b9c      	ldr	r3, [pc, #624]	@ (8008e88 <_printf_float+0x2c8>)
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c1c:	f7f7 ffae 	bl	8000b7c <__aeabi_dcmpun>
 8008c20:	bb70      	cbnz	r0, 8008c80 <_printf_float+0xc0>
 8008c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c26:	4b98      	ldr	r3, [pc, #608]	@ (8008e88 <_printf_float+0x2c8>)
 8008c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c2c:	f7f7 ff88 	bl	8000b40 <__aeabi_dcmple>
 8008c30:	bb30      	cbnz	r0, 8008c80 <_printf_float+0xc0>
 8008c32:	2200      	movs	r2, #0
 8008c34:	2300      	movs	r3, #0
 8008c36:	4640      	mov	r0, r8
 8008c38:	4649      	mov	r1, r9
 8008c3a:	f7f7 ff77 	bl	8000b2c <__aeabi_dcmplt>
 8008c3e:	b110      	cbz	r0, 8008c46 <_printf_float+0x86>
 8008c40:	232d      	movs	r3, #45	@ 0x2d
 8008c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c46:	4a91      	ldr	r2, [pc, #580]	@ (8008e8c <_printf_float+0x2cc>)
 8008c48:	4b91      	ldr	r3, [pc, #580]	@ (8008e90 <_printf_float+0x2d0>)
 8008c4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c4e:	bf94      	ite	ls
 8008c50:	4690      	movls	r8, r2
 8008c52:	4698      	movhi	r8, r3
 8008c54:	2303      	movs	r3, #3
 8008c56:	6123      	str	r3, [r4, #16]
 8008c58:	f02b 0304 	bic.w	r3, fp, #4
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	f04f 0900 	mov.w	r9, #0
 8008c62:	9700      	str	r7, [sp, #0]
 8008c64:	4633      	mov	r3, r6
 8008c66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 f9d2 	bl	8009014 <_printf_common>
 8008c70:	3001      	adds	r0, #1
 8008c72:	f040 808d 	bne.w	8008d90 <_printf_float+0x1d0>
 8008c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c7a:	b00d      	add	sp, #52	@ 0x34
 8008c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c80:	4642      	mov	r2, r8
 8008c82:	464b      	mov	r3, r9
 8008c84:	4640      	mov	r0, r8
 8008c86:	4649      	mov	r1, r9
 8008c88:	f7f7 ff78 	bl	8000b7c <__aeabi_dcmpun>
 8008c8c:	b140      	cbz	r0, 8008ca0 <_printf_float+0xe0>
 8008c8e:	464b      	mov	r3, r9
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfbc      	itt	lt
 8008c94:	232d      	movlt	r3, #45	@ 0x2d
 8008c96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8008e94 <_printf_float+0x2d4>)
 8008c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8008e98 <_printf_float+0x2d8>)
 8008c9e:	e7d4      	b.n	8008c4a <_printf_float+0x8a>
 8008ca0:	6863      	ldr	r3, [r4, #4]
 8008ca2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008ca6:	9206      	str	r2, [sp, #24]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	d13b      	bne.n	8008d24 <_printf_float+0x164>
 8008cac:	2306      	movs	r3, #6
 8008cae:	6063      	str	r3, [r4, #4]
 8008cb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6022      	str	r2, [r4, #0]
 8008cb8:	9303      	str	r3, [sp, #12]
 8008cba:	ab0a      	add	r3, sp, #40	@ 0x28
 8008cbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008cc0:	ab09      	add	r3, sp, #36	@ 0x24
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	6861      	ldr	r1, [r4, #4]
 8008cc6:	ec49 8b10 	vmov	d0, r8, r9
 8008cca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f7ff fed6 	bl	8008a80 <__cvt>
 8008cd4:	9b06      	ldr	r3, [sp, #24]
 8008cd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cd8:	2b47      	cmp	r3, #71	@ 0x47
 8008cda:	4680      	mov	r8, r0
 8008cdc:	d129      	bne.n	8008d32 <_printf_float+0x172>
 8008cde:	1cc8      	adds	r0, r1, #3
 8008ce0:	db02      	blt.n	8008ce8 <_printf_float+0x128>
 8008ce2:	6863      	ldr	r3, [r4, #4]
 8008ce4:	4299      	cmp	r1, r3
 8008ce6:	dd41      	ble.n	8008d6c <_printf_float+0x1ac>
 8008ce8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008cec:	fa5f fa8a 	uxtb.w	sl, sl
 8008cf0:	3901      	subs	r1, #1
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008cf8:	9109      	str	r1, [sp, #36]	@ 0x24
 8008cfa:	f7ff ff26 	bl	8008b4a <__exponent>
 8008cfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d00:	1813      	adds	r3, r2, r0
 8008d02:	2a01      	cmp	r2, #1
 8008d04:	4681      	mov	r9, r0
 8008d06:	6123      	str	r3, [r4, #16]
 8008d08:	dc02      	bgt.n	8008d10 <_printf_float+0x150>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	07d2      	lsls	r2, r2, #31
 8008d0e:	d501      	bpl.n	8008d14 <_printf_float+0x154>
 8008d10:	3301      	adds	r3, #1
 8008d12:	6123      	str	r3, [r4, #16]
 8008d14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0a2      	beq.n	8008c62 <_printf_float+0xa2>
 8008d1c:	232d      	movs	r3, #45	@ 0x2d
 8008d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d22:	e79e      	b.n	8008c62 <_printf_float+0xa2>
 8008d24:	9a06      	ldr	r2, [sp, #24]
 8008d26:	2a47      	cmp	r2, #71	@ 0x47
 8008d28:	d1c2      	bne.n	8008cb0 <_printf_float+0xf0>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1c0      	bne.n	8008cb0 <_printf_float+0xf0>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e7bd      	b.n	8008cae <_printf_float+0xee>
 8008d32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d36:	d9db      	bls.n	8008cf0 <_printf_float+0x130>
 8008d38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d3c:	d118      	bne.n	8008d70 <_printf_float+0x1b0>
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	dd0b      	ble.n	8008d5c <_printf_float+0x19c>
 8008d44:	6121      	str	r1, [r4, #16]
 8008d46:	b913      	cbnz	r3, 8008d4e <_printf_float+0x18e>
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	07d0      	lsls	r0, r2, #31
 8008d4c:	d502      	bpl.n	8008d54 <_printf_float+0x194>
 8008d4e:	3301      	adds	r3, #1
 8008d50:	440b      	add	r3, r1
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d56:	f04f 0900 	mov.w	r9, #0
 8008d5a:	e7db      	b.n	8008d14 <_printf_float+0x154>
 8008d5c:	b913      	cbnz	r3, 8008d64 <_printf_float+0x1a4>
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	07d2      	lsls	r2, r2, #31
 8008d62:	d501      	bpl.n	8008d68 <_printf_float+0x1a8>
 8008d64:	3302      	adds	r3, #2
 8008d66:	e7f4      	b.n	8008d52 <_printf_float+0x192>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e7f2      	b.n	8008d52 <_printf_float+0x192>
 8008d6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d72:	4299      	cmp	r1, r3
 8008d74:	db05      	blt.n	8008d82 <_printf_float+0x1c2>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	6121      	str	r1, [r4, #16]
 8008d7a:	07d8      	lsls	r0, r3, #31
 8008d7c:	d5ea      	bpl.n	8008d54 <_printf_float+0x194>
 8008d7e:	1c4b      	adds	r3, r1, #1
 8008d80:	e7e7      	b.n	8008d52 <_printf_float+0x192>
 8008d82:	2900      	cmp	r1, #0
 8008d84:	bfd4      	ite	le
 8008d86:	f1c1 0202 	rsble	r2, r1, #2
 8008d8a:	2201      	movgt	r2, #1
 8008d8c:	4413      	add	r3, r2
 8008d8e:	e7e0      	b.n	8008d52 <_printf_float+0x192>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	055a      	lsls	r2, r3, #21
 8008d94:	d407      	bmi.n	8008da6 <_printf_float+0x1e6>
 8008d96:	6923      	ldr	r3, [r4, #16]
 8008d98:	4642      	mov	r2, r8
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	d12b      	bne.n	8008dfc <_printf_float+0x23c>
 8008da4:	e767      	b.n	8008c76 <_printf_float+0xb6>
 8008da6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008daa:	f240 80dd 	bls.w	8008f68 <_printf_float+0x3a8>
 8008dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008db2:	2200      	movs	r2, #0
 8008db4:	2300      	movs	r3, #0
 8008db6:	f7f7 feaf 	bl	8000b18 <__aeabi_dcmpeq>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d033      	beq.n	8008e26 <_printf_float+0x266>
 8008dbe:	4a37      	ldr	r2, [pc, #220]	@ (8008e9c <_printf_float+0x2dc>)
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	47b8      	blx	r7
 8008dc8:	3001      	adds	r0, #1
 8008dca:	f43f af54 	beq.w	8008c76 <_printf_float+0xb6>
 8008dce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008dd2:	4543      	cmp	r3, r8
 8008dd4:	db02      	blt.n	8008ddc <_printf_float+0x21c>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	07d8      	lsls	r0, r3, #31
 8008dda:	d50f      	bpl.n	8008dfc <_printf_float+0x23c>
 8008ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008de0:	4631      	mov	r1, r6
 8008de2:	4628      	mov	r0, r5
 8008de4:	47b8      	blx	r7
 8008de6:	3001      	adds	r0, #1
 8008de8:	f43f af45 	beq.w	8008c76 <_printf_float+0xb6>
 8008dec:	f04f 0900 	mov.w	r9, #0
 8008df0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008df4:	f104 0a1a 	add.w	sl, r4, #26
 8008df8:	45c8      	cmp	r8, r9
 8008dfa:	dc09      	bgt.n	8008e10 <_printf_float+0x250>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	f100 8103 	bmi.w	800900a <_printf_float+0x44a>
 8008e04:	68e0      	ldr	r0, [r4, #12]
 8008e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e08:	4298      	cmp	r0, r3
 8008e0a:	bfb8      	it	lt
 8008e0c:	4618      	movlt	r0, r3
 8008e0e:	e734      	b.n	8008c7a <_printf_float+0xba>
 8008e10:	2301      	movs	r3, #1
 8008e12:	4652      	mov	r2, sl
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b8      	blx	r7
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f43f af2b 	beq.w	8008c76 <_printf_float+0xb6>
 8008e20:	f109 0901 	add.w	r9, r9, #1
 8008e24:	e7e8      	b.n	8008df8 <_printf_float+0x238>
 8008e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	dc39      	bgt.n	8008ea0 <_printf_float+0x2e0>
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8008e9c <_printf_float+0x2dc>)
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4631      	mov	r1, r6
 8008e32:	4628      	mov	r0, r5
 8008e34:	47b8      	blx	r7
 8008e36:	3001      	adds	r0, #1
 8008e38:	f43f af1d 	beq.w	8008c76 <_printf_float+0xb6>
 8008e3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e40:	ea59 0303 	orrs.w	r3, r9, r3
 8008e44:	d102      	bne.n	8008e4c <_printf_float+0x28c>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	07d9      	lsls	r1, r3, #31
 8008e4a:	d5d7      	bpl.n	8008dfc <_printf_float+0x23c>
 8008e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e50:	4631      	mov	r1, r6
 8008e52:	4628      	mov	r0, r5
 8008e54:	47b8      	blx	r7
 8008e56:	3001      	adds	r0, #1
 8008e58:	f43f af0d 	beq.w	8008c76 <_printf_float+0xb6>
 8008e5c:	f04f 0a00 	mov.w	sl, #0
 8008e60:	f104 0b1a 	add.w	fp, r4, #26
 8008e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e66:	425b      	negs	r3, r3
 8008e68:	4553      	cmp	r3, sl
 8008e6a:	dc01      	bgt.n	8008e70 <_printf_float+0x2b0>
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	e793      	b.n	8008d98 <_printf_float+0x1d8>
 8008e70:	2301      	movs	r3, #1
 8008e72:	465a      	mov	r2, fp
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f43f aefb 	beq.w	8008c76 <_printf_float+0xb6>
 8008e80:	f10a 0a01 	add.w	sl, sl, #1
 8008e84:	e7ee      	b.n	8008e64 <_printf_float+0x2a4>
 8008e86:	bf00      	nop
 8008e88:	7fefffff 	.word	0x7fefffff
 8008e8c:	0801e554 	.word	0x0801e554
 8008e90:	0801e558 	.word	0x0801e558
 8008e94:	0801e55c 	.word	0x0801e55c
 8008e98:	0801e560 	.word	0x0801e560
 8008e9c:	0801e564 	.word	0x0801e564
 8008ea0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ea2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ea6:	4553      	cmp	r3, sl
 8008ea8:	bfa8      	it	ge
 8008eaa:	4653      	movge	r3, sl
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	4699      	mov	r9, r3
 8008eb0:	dc36      	bgt.n	8008f20 <_printf_float+0x360>
 8008eb2:	f04f 0b00 	mov.w	fp, #0
 8008eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eba:	f104 021a 	add.w	r2, r4, #26
 8008ebe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ec0:	9306      	str	r3, [sp, #24]
 8008ec2:	eba3 0309 	sub.w	r3, r3, r9
 8008ec6:	455b      	cmp	r3, fp
 8008ec8:	dc31      	bgt.n	8008f2e <_printf_float+0x36e>
 8008eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ecc:	459a      	cmp	sl, r3
 8008ece:	dc3a      	bgt.n	8008f46 <_printf_float+0x386>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	07da      	lsls	r2, r3, #31
 8008ed4:	d437      	bmi.n	8008f46 <_printf_float+0x386>
 8008ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed8:	ebaa 0903 	sub.w	r9, sl, r3
 8008edc:	9b06      	ldr	r3, [sp, #24]
 8008ede:	ebaa 0303 	sub.w	r3, sl, r3
 8008ee2:	4599      	cmp	r9, r3
 8008ee4:	bfa8      	it	ge
 8008ee6:	4699      	movge	r9, r3
 8008ee8:	f1b9 0f00 	cmp.w	r9, #0
 8008eec:	dc33      	bgt.n	8008f56 <_printf_float+0x396>
 8008eee:	f04f 0800 	mov.w	r8, #0
 8008ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ef6:	f104 0b1a 	add.w	fp, r4, #26
 8008efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efc:	ebaa 0303 	sub.w	r3, sl, r3
 8008f00:	eba3 0309 	sub.w	r3, r3, r9
 8008f04:	4543      	cmp	r3, r8
 8008f06:	f77f af79 	ble.w	8008dfc <_printf_float+0x23c>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	465a      	mov	r2, fp
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4628      	mov	r0, r5
 8008f12:	47b8      	blx	r7
 8008f14:	3001      	adds	r0, #1
 8008f16:	f43f aeae 	beq.w	8008c76 <_printf_float+0xb6>
 8008f1a:	f108 0801 	add.w	r8, r8, #1
 8008f1e:	e7ec      	b.n	8008efa <_printf_float+0x33a>
 8008f20:	4642      	mov	r2, r8
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d1c2      	bne.n	8008eb2 <_printf_float+0x2f2>
 8008f2c:	e6a3      	b.n	8008c76 <_printf_float+0xb6>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	9206      	str	r2, [sp, #24]
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	f43f ae9c 	beq.w	8008c76 <_printf_float+0xb6>
 8008f3e:	9a06      	ldr	r2, [sp, #24]
 8008f40:	f10b 0b01 	add.w	fp, fp, #1
 8008f44:	e7bb      	b.n	8008ebe <_printf_float+0x2fe>
 8008f46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	47b8      	blx	r7
 8008f50:	3001      	adds	r0, #1
 8008f52:	d1c0      	bne.n	8008ed6 <_printf_float+0x316>
 8008f54:	e68f      	b.n	8008c76 <_printf_float+0xb6>
 8008f56:	9a06      	ldr	r2, [sp, #24]
 8008f58:	464b      	mov	r3, r9
 8008f5a:	4442      	add	r2, r8
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	d1c3      	bne.n	8008eee <_printf_float+0x32e>
 8008f66:	e686      	b.n	8008c76 <_printf_float+0xb6>
 8008f68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f6c:	f1ba 0f01 	cmp.w	sl, #1
 8008f70:	dc01      	bgt.n	8008f76 <_printf_float+0x3b6>
 8008f72:	07db      	lsls	r3, r3, #31
 8008f74:	d536      	bpl.n	8008fe4 <_printf_float+0x424>
 8008f76:	2301      	movs	r3, #1
 8008f78:	4642      	mov	r2, r8
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	47b8      	blx	r7
 8008f80:	3001      	adds	r0, #1
 8008f82:	f43f ae78 	beq.w	8008c76 <_printf_float+0xb6>
 8008f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b8      	blx	r7
 8008f90:	3001      	adds	r0, #1
 8008f92:	f43f ae70 	beq.w	8008c76 <_printf_float+0xb6>
 8008f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008fa2:	f7f7 fdb9 	bl	8000b18 <__aeabi_dcmpeq>
 8008fa6:	b9c0      	cbnz	r0, 8008fda <_printf_float+0x41a>
 8008fa8:	4653      	mov	r3, sl
 8008faa:	f108 0201 	add.w	r2, r8, #1
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b8      	blx	r7
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d10c      	bne.n	8008fd2 <_printf_float+0x412>
 8008fb8:	e65d      	b.n	8008c76 <_printf_float+0xb6>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	465a      	mov	r2, fp
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	47b8      	blx	r7
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f43f ae56 	beq.w	8008c76 <_printf_float+0xb6>
 8008fca:	f108 0801 	add.w	r8, r8, #1
 8008fce:	45d0      	cmp	r8, sl
 8008fd0:	dbf3      	blt.n	8008fba <_printf_float+0x3fa>
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008fd8:	e6df      	b.n	8008d9a <_printf_float+0x1da>
 8008fda:	f04f 0800 	mov.w	r8, #0
 8008fde:	f104 0b1a 	add.w	fp, r4, #26
 8008fe2:	e7f4      	b.n	8008fce <_printf_float+0x40e>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	4642      	mov	r2, r8
 8008fe8:	e7e1      	b.n	8008fae <_printf_float+0x3ee>
 8008fea:	2301      	movs	r3, #1
 8008fec:	464a      	mov	r2, r9
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f ae3e 	beq.w	8008c76 <_printf_float+0xb6>
 8008ffa:	f108 0801 	add.w	r8, r8, #1
 8008ffe:	68e3      	ldr	r3, [r4, #12]
 8009000:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009002:	1a5b      	subs	r3, r3, r1
 8009004:	4543      	cmp	r3, r8
 8009006:	dcf0      	bgt.n	8008fea <_printf_float+0x42a>
 8009008:	e6fc      	b.n	8008e04 <_printf_float+0x244>
 800900a:	f04f 0800 	mov.w	r8, #0
 800900e:	f104 0919 	add.w	r9, r4, #25
 8009012:	e7f4      	b.n	8008ffe <_printf_float+0x43e>

08009014 <_printf_common>:
 8009014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	4616      	mov	r6, r2
 800901a:	4698      	mov	r8, r3
 800901c:	688a      	ldr	r2, [r1, #8]
 800901e:	690b      	ldr	r3, [r1, #16]
 8009020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009024:	4293      	cmp	r3, r2
 8009026:	bfb8      	it	lt
 8009028:	4613      	movlt	r3, r2
 800902a:	6033      	str	r3, [r6, #0]
 800902c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009030:	4607      	mov	r7, r0
 8009032:	460c      	mov	r4, r1
 8009034:	b10a      	cbz	r2, 800903a <_printf_common+0x26>
 8009036:	3301      	adds	r3, #1
 8009038:	6033      	str	r3, [r6, #0]
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	0699      	lsls	r1, r3, #26
 800903e:	bf42      	ittt	mi
 8009040:	6833      	ldrmi	r3, [r6, #0]
 8009042:	3302      	addmi	r3, #2
 8009044:	6033      	strmi	r3, [r6, #0]
 8009046:	6825      	ldr	r5, [r4, #0]
 8009048:	f015 0506 	ands.w	r5, r5, #6
 800904c:	d106      	bne.n	800905c <_printf_common+0x48>
 800904e:	f104 0a19 	add.w	sl, r4, #25
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	6832      	ldr	r2, [r6, #0]
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	42ab      	cmp	r3, r5
 800905a:	dc26      	bgt.n	80090aa <_printf_common+0x96>
 800905c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009060:	6822      	ldr	r2, [r4, #0]
 8009062:	3b00      	subs	r3, #0
 8009064:	bf18      	it	ne
 8009066:	2301      	movne	r3, #1
 8009068:	0692      	lsls	r2, r2, #26
 800906a:	d42b      	bmi.n	80090c4 <_printf_common+0xb0>
 800906c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009070:	4641      	mov	r1, r8
 8009072:	4638      	mov	r0, r7
 8009074:	47c8      	blx	r9
 8009076:	3001      	adds	r0, #1
 8009078:	d01e      	beq.n	80090b8 <_printf_common+0xa4>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	6922      	ldr	r2, [r4, #16]
 800907e:	f003 0306 	and.w	r3, r3, #6
 8009082:	2b04      	cmp	r3, #4
 8009084:	bf02      	ittt	eq
 8009086:	68e5      	ldreq	r5, [r4, #12]
 8009088:	6833      	ldreq	r3, [r6, #0]
 800908a:	1aed      	subeq	r5, r5, r3
 800908c:	68a3      	ldr	r3, [r4, #8]
 800908e:	bf0c      	ite	eq
 8009090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009094:	2500      	movne	r5, #0
 8009096:	4293      	cmp	r3, r2
 8009098:	bfc4      	itt	gt
 800909a:	1a9b      	subgt	r3, r3, r2
 800909c:	18ed      	addgt	r5, r5, r3
 800909e:	2600      	movs	r6, #0
 80090a0:	341a      	adds	r4, #26
 80090a2:	42b5      	cmp	r5, r6
 80090a4:	d11a      	bne.n	80090dc <_printf_common+0xc8>
 80090a6:	2000      	movs	r0, #0
 80090a8:	e008      	b.n	80090bc <_printf_common+0xa8>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4652      	mov	r2, sl
 80090ae:	4641      	mov	r1, r8
 80090b0:	4638      	mov	r0, r7
 80090b2:	47c8      	blx	r9
 80090b4:	3001      	adds	r0, #1
 80090b6:	d103      	bne.n	80090c0 <_printf_common+0xac>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c0:	3501      	adds	r5, #1
 80090c2:	e7c6      	b.n	8009052 <_printf_common+0x3e>
 80090c4:	18e1      	adds	r1, r4, r3
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	2030      	movs	r0, #48	@ 0x30
 80090ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090ce:	4422      	add	r2, r4
 80090d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090d8:	3302      	adds	r3, #2
 80090da:	e7c7      	b.n	800906c <_printf_common+0x58>
 80090dc:	2301      	movs	r3, #1
 80090de:	4622      	mov	r2, r4
 80090e0:	4641      	mov	r1, r8
 80090e2:	4638      	mov	r0, r7
 80090e4:	47c8      	blx	r9
 80090e6:	3001      	adds	r0, #1
 80090e8:	d0e6      	beq.n	80090b8 <_printf_common+0xa4>
 80090ea:	3601      	adds	r6, #1
 80090ec:	e7d9      	b.n	80090a2 <_printf_common+0x8e>
	...

080090f0 <_printf_i>:
 80090f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090f4:	7e0f      	ldrb	r7, [r1, #24]
 80090f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090f8:	2f78      	cmp	r7, #120	@ 0x78
 80090fa:	4691      	mov	r9, r2
 80090fc:	4680      	mov	r8, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	469a      	mov	sl, r3
 8009102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009106:	d807      	bhi.n	8009118 <_printf_i+0x28>
 8009108:	2f62      	cmp	r7, #98	@ 0x62
 800910a:	d80a      	bhi.n	8009122 <_printf_i+0x32>
 800910c:	2f00      	cmp	r7, #0
 800910e:	f000 80d2 	beq.w	80092b6 <_printf_i+0x1c6>
 8009112:	2f58      	cmp	r7, #88	@ 0x58
 8009114:	f000 80b9 	beq.w	800928a <_printf_i+0x19a>
 8009118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800911c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009120:	e03a      	b.n	8009198 <_printf_i+0xa8>
 8009122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009126:	2b15      	cmp	r3, #21
 8009128:	d8f6      	bhi.n	8009118 <_printf_i+0x28>
 800912a:	a101      	add	r1, pc, #4	@ (adr r1, 8009130 <_printf_i+0x40>)
 800912c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009130:	08009189 	.word	0x08009189
 8009134:	0800919d 	.word	0x0800919d
 8009138:	08009119 	.word	0x08009119
 800913c:	08009119 	.word	0x08009119
 8009140:	08009119 	.word	0x08009119
 8009144:	08009119 	.word	0x08009119
 8009148:	0800919d 	.word	0x0800919d
 800914c:	08009119 	.word	0x08009119
 8009150:	08009119 	.word	0x08009119
 8009154:	08009119 	.word	0x08009119
 8009158:	08009119 	.word	0x08009119
 800915c:	0800929d 	.word	0x0800929d
 8009160:	080091c7 	.word	0x080091c7
 8009164:	08009257 	.word	0x08009257
 8009168:	08009119 	.word	0x08009119
 800916c:	08009119 	.word	0x08009119
 8009170:	080092bf 	.word	0x080092bf
 8009174:	08009119 	.word	0x08009119
 8009178:	080091c7 	.word	0x080091c7
 800917c:	08009119 	.word	0x08009119
 8009180:	08009119 	.word	0x08009119
 8009184:	0800925f 	.word	0x0800925f
 8009188:	6833      	ldr	r3, [r6, #0]
 800918a:	1d1a      	adds	r2, r3, #4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6032      	str	r2, [r6, #0]
 8009190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009198:	2301      	movs	r3, #1
 800919a:	e09d      	b.n	80092d8 <_printf_i+0x1e8>
 800919c:	6833      	ldr	r3, [r6, #0]
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	1d19      	adds	r1, r3, #4
 80091a2:	6031      	str	r1, [r6, #0]
 80091a4:	0606      	lsls	r6, r0, #24
 80091a6:	d501      	bpl.n	80091ac <_printf_i+0xbc>
 80091a8:	681d      	ldr	r5, [r3, #0]
 80091aa:	e003      	b.n	80091b4 <_printf_i+0xc4>
 80091ac:	0645      	lsls	r5, r0, #25
 80091ae:	d5fb      	bpl.n	80091a8 <_printf_i+0xb8>
 80091b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	da03      	bge.n	80091c0 <_printf_i+0xd0>
 80091b8:	232d      	movs	r3, #45	@ 0x2d
 80091ba:	426d      	negs	r5, r5
 80091bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091c0:	4859      	ldr	r0, [pc, #356]	@ (8009328 <_printf_i+0x238>)
 80091c2:	230a      	movs	r3, #10
 80091c4:	e011      	b.n	80091ea <_printf_i+0xfa>
 80091c6:	6821      	ldr	r1, [r4, #0]
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	0608      	lsls	r0, r1, #24
 80091cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80091d0:	d402      	bmi.n	80091d8 <_printf_i+0xe8>
 80091d2:	0649      	lsls	r1, r1, #25
 80091d4:	bf48      	it	mi
 80091d6:	b2ad      	uxthmi	r5, r5
 80091d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80091da:	4853      	ldr	r0, [pc, #332]	@ (8009328 <_printf_i+0x238>)
 80091dc:	6033      	str	r3, [r6, #0]
 80091de:	bf14      	ite	ne
 80091e0:	230a      	movne	r3, #10
 80091e2:	2308      	moveq	r3, #8
 80091e4:	2100      	movs	r1, #0
 80091e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091ea:	6866      	ldr	r6, [r4, #4]
 80091ec:	60a6      	str	r6, [r4, #8]
 80091ee:	2e00      	cmp	r6, #0
 80091f0:	bfa2      	ittt	ge
 80091f2:	6821      	ldrge	r1, [r4, #0]
 80091f4:	f021 0104 	bicge.w	r1, r1, #4
 80091f8:	6021      	strge	r1, [r4, #0]
 80091fa:	b90d      	cbnz	r5, 8009200 <_printf_i+0x110>
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	d04b      	beq.n	8009298 <_printf_i+0x1a8>
 8009200:	4616      	mov	r6, r2
 8009202:	fbb5 f1f3 	udiv	r1, r5, r3
 8009206:	fb03 5711 	mls	r7, r3, r1, r5
 800920a:	5dc7      	ldrb	r7, [r0, r7]
 800920c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009210:	462f      	mov	r7, r5
 8009212:	42bb      	cmp	r3, r7
 8009214:	460d      	mov	r5, r1
 8009216:	d9f4      	bls.n	8009202 <_printf_i+0x112>
 8009218:	2b08      	cmp	r3, #8
 800921a:	d10b      	bne.n	8009234 <_printf_i+0x144>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	07df      	lsls	r7, r3, #31
 8009220:	d508      	bpl.n	8009234 <_printf_i+0x144>
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	6861      	ldr	r1, [r4, #4]
 8009226:	4299      	cmp	r1, r3
 8009228:	bfde      	ittt	le
 800922a:	2330      	movle	r3, #48	@ 0x30
 800922c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009230:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009234:	1b92      	subs	r2, r2, r6
 8009236:	6122      	str	r2, [r4, #16]
 8009238:	f8cd a000 	str.w	sl, [sp]
 800923c:	464b      	mov	r3, r9
 800923e:	aa03      	add	r2, sp, #12
 8009240:	4621      	mov	r1, r4
 8009242:	4640      	mov	r0, r8
 8009244:	f7ff fee6 	bl	8009014 <_printf_common>
 8009248:	3001      	adds	r0, #1
 800924a:	d14a      	bne.n	80092e2 <_printf_i+0x1f2>
 800924c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009250:	b004      	add	sp, #16
 8009252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	f043 0320 	orr.w	r3, r3, #32
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	4833      	ldr	r0, [pc, #204]	@ (800932c <_printf_i+0x23c>)
 8009260:	2778      	movs	r7, #120	@ 0x78
 8009262:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	6831      	ldr	r1, [r6, #0]
 800926a:	061f      	lsls	r7, r3, #24
 800926c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009270:	d402      	bmi.n	8009278 <_printf_i+0x188>
 8009272:	065f      	lsls	r7, r3, #25
 8009274:	bf48      	it	mi
 8009276:	b2ad      	uxthmi	r5, r5
 8009278:	6031      	str	r1, [r6, #0]
 800927a:	07d9      	lsls	r1, r3, #31
 800927c:	bf44      	itt	mi
 800927e:	f043 0320 	orrmi.w	r3, r3, #32
 8009282:	6023      	strmi	r3, [r4, #0]
 8009284:	b11d      	cbz	r5, 800928e <_printf_i+0x19e>
 8009286:	2310      	movs	r3, #16
 8009288:	e7ac      	b.n	80091e4 <_printf_i+0xf4>
 800928a:	4827      	ldr	r0, [pc, #156]	@ (8009328 <_printf_i+0x238>)
 800928c:	e7e9      	b.n	8009262 <_printf_i+0x172>
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	f023 0320 	bic.w	r3, r3, #32
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	e7f6      	b.n	8009286 <_printf_i+0x196>
 8009298:	4616      	mov	r6, r2
 800929a:	e7bd      	b.n	8009218 <_printf_i+0x128>
 800929c:	6833      	ldr	r3, [r6, #0]
 800929e:	6825      	ldr	r5, [r4, #0]
 80092a0:	6961      	ldr	r1, [r4, #20]
 80092a2:	1d18      	adds	r0, r3, #4
 80092a4:	6030      	str	r0, [r6, #0]
 80092a6:	062e      	lsls	r6, r5, #24
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	d501      	bpl.n	80092b0 <_printf_i+0x1c0>
 80092ac:	6019      	str	r1, [r3, #0]
 80092ae:	e002      	b.n	80092b6 <_printf_i+0x1c6>
 80092b0:	0668      	lsls	r0, r5, #25
 80092b2:	d5fb      	bpl.n	80092ac <_printf_i+0x1bc>
 80092b4:	8019      	strh	r1, [r3, #0]
 80092b6:	2300      	movs	r3, #0
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	4616      	mov	r6, r2
 80092bc:	e7bc      	b.n	8009238 <_printf_i+0x148>
 80092be:	6833      	ldr	r3, [r6, #0]
 80092c0:	1d1a      	adds	r2, r3, #4
 80092c2:	6032      	str	r2, [r6, #0]
 80092c4:	681e      	ldr	r6, [r3, #0]
 80092c6:	6862      	ldr	r2, [r4, #4]
 80092c8:	2100      	movs	r1, #0
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7f6 ffa8 	bl	8000220 <memchr>
 80092d0:	b108      	cbz	r0, 80092d6 <_printf_i+0x1e6>
 80092d2:	1b80      	subs	r0, r0, r6
 80092d4:	6060      	str	r0, [r4, #4]
 80092d6:	6863      	ldr	r3, [r4, #4]
 80092d8:	6123      	str	r3, [r4, #16]
 80092da:	2300      	movs	r3, #0
 80092dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092e0:	e7aa      	b.n	8009238 <_printf_i+0x148>
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	4632      	mov	r2, r6
 80092e6:	4649      	mov	r1, r9
 80092e8:	4640      	mov	r0, r8
 80092ea:	47d0      	blx	sl
 80092ec:	3001      	adds	r0, #1
 80092ee:	d0ad      	beq.n	800924c <_printf_i+0x15c>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	079b      	lsls	r3, r3, #30
 80092f4:	d413      	bmi.n	800931e <_printf_i+0x22e>
 80092f6:	68e0      	ldr	r0, [r4, #12]
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	4298      	cmp	r0, r3
 80092fc:	bfb8      	it	lt
 80092fe:	4618      	movlt	r0, r3
 8009300:	e7a6      	b.n	8009250 <_printf_i+0x160>
 8009302:	2301      	movs	r3, #1
 8009304:	4632      	mov	r2, r6
 8009306:	4649      	mov	r1, r9
 8009308:	4640      	mov	r0, r8
 800930a:	47d0      	blx	sl
 800930c:	3001      	adds	r0, #1
 800930e:	d09d      	beq.n	800924c <_printf_i+0x15c>
 8009310:	3501      	adds	r5, #1
 8009312:	68e3      	ldr	r3, [r4, #12]
 8009314:	9903      	ldr	r1, [sp, #12]
 8009316:	1a5b      	subs	r3, r3, r1
 8009318:	42ab      	cmp	r3, r5
 800931a:	dcf2      	bgt.n	8009302 <_printf_i+0x212>
 800931c:	e7eb      	b.n	80092f6 <_printf_i+0x206>
 800931e:	2500      	movs	r5, #0
 8009320:	f104 0619 	add.w	r6, r4, #25
 8009324:	e7f5      	b.n	8009312 <_printf_i+0x222>
 8009326:	bf00      	nop
 8009328:	0801e566 	.word	0x0801e566
 800932c:	0801e577 	.word	0x0801e577

08009330 <std>:
 8009330:	2300      	movs	r3, #0
 8009332:	b510      	push	{r4, lr}
 8009334:	4604      	mov	r4, r0
 8009336:	e9c0 3300 	strd	r3, r3, [r0]
 800933a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800933e:	6083      	str	r3, [r0, #8]
 8009340:	8181      	strh	r1, [r0, #12]
 8009342:	6643      	str	r3, [r0, #100]	@ 0x64
 8009344:	81c2      	strh	r2, [r0, #14]
 8009346:	6183      	str	r3, [r0, #24]
 8009348:	4619      	mov	r1, r3
 800934a:	2208      	movs	r2, #8
 800934c:	305c      	adds	r0, #92	@ 0x5c
 800934e:	f000 f90f 	bl	8009570 <memset>
 8009352:	4b0d      	ldr	r3, [pc, #52]	@ (8009388 <std+0x58>)
 8009354:	6263      	str	r3, [r4, #36]	@ 0x24
 8009356:	4b0d      	ldr	r3, [pc, #52]	@ (800938c <std+0x5c>)
 8009358:	62a3      	str	r3, [r4, #40]	@ 0x28
 800935a:	4b0d      	ldr	r3, [pc, #52]	@ (8009390 <std+0x60>)
 800935c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800935e:	4b0d      	ldr	r3, [pc, #52]	@ (8009394 <std+0x64>)
 8009360:	6323      	str	r3, [r4, #48]	@ 0x30
 8009362:	4b0d      	ldr	r3, [pc, #52]	@ (8009398 <std+0x68>)
 8009364:	6224      	str	r4, [r4, #32]
 8009366:	429c      	cmp	r4, r3
 8009368:	d006      	beq.n	8009378 <std+0x48>
 800936a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800936e:	4294      	cmp	r4, r2
 8009370:	d002      	beq.n	8009378 <std+0x48>
 8009372:	33d0      	adds	r3, #208	@ 0xd0
 8009374:	429c      	cmp	r4, r3
 8009376:	d105      	bne.n	8009384 <std+0x54>
 8009378:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800937c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009380:	f000 b92c 	b.w	80095dc <__retarget_lock_init_recursive>
 8009384:	bd10      	pop	{r4, pc}
 8009386:	bf00      	nop
 8009388:	0800ac49 	.word	0x0800ac49
 800938c:	0800ac6b 	.word	0x0800ac6b
 8009390:	0800aca3 	.word	0x0800aca3
 8009394:	0800acc7 	.word	0x0800acc7
 8009398:	200017dc 	.word	0x200017dc

0800939c <stdio_exit_handler>:
 800939c:	4a02      	ldr	r2, [pc, #8]	@ (80093a8 <stdio_exit_handler+0xc>)
 800939e:	4903      	ldr	r1, [pc, #12]	@ (80093ac <stdio_exit_handler+0x10>)
 80093a0:	4803      	ldr	r0, [pc, #12]	@ (80093b0 <stdio_exit_handler+0x14>)
 80093a2:	f000 b869 	b.w	8009478 <_fwalk_sglue>
 80093a6:	bf00      	nop
 80093a8:	20000050 	.word	0x20000050
 80093ac:	0800a4dd 	.word	0x0800a4dd
 80093b0:	20000060 	.word	0x20000060

080093b4 <cleanup_stdio>:
 80093b4:	6841      	ldr	r1, [r0, #4]
 80093b6:	4b0c      	ldr	r3, [pc, #48]	@ (80093e8 <cleanup_stdio+0x34>)
 80093b8:	4299      	cmp	r1, r3
 80093ba:	b510      	push	{r4, lr}
 80093bc:	4604      	mov	r4, r0
 80093be:	d001      	beq.n	80093c4 <cleanup_stdio+0x10>
 80093c0:	f001 f88c 	bl	800a4dc <_fflush_r>
 80093c4:	68a1      	ldr	r1, [r4, #8]
 80093c6:	4b09      	ldr	r3, [pc, #36]	@ (80093ec <cleanup_stdio+0x38>)
 80093c8:	4299      	cmp	r1, r3
 80093ca:	d002      	beq.n	80093d2 <cleanup_stdio+0x1e>
 80093cc:	4620      	mov	r0, r4
 80093ce:	f001 f885 	bl	800a4dc <_fflush_r>
 80093d2:	68e1      	ldr	r1, [r4, #12]
 80093d4:	4b06      	ldr	r3, [pc, #24]	@ (80093f0 <cleanup_stdio+0x3c>)
 80093d6:	4299      	cmp	r1, r3
 80093d8:	d004      	beq.n	80093e4 <cleanup_stdio+0x30>
 80093da:	4620      	mov	r0, r4
 80093dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e0:	f001 b87c 	b.w	800a4dc <_fflush_r>
 80093e4:	bd10      	pop	{r4, pc}
 80093e6:	bf00      	nop
 80093e8:	200017dc 	.word	0x200017dc
 80093ec:	20001844 	.word	0x20001844
 80093f0:	200018ac 	.word	0x200018ac

080093f4 <global_stdio_init.part.0>:
 80093f4:	b510      	push	{r4, lr}
 80093f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009424 <global_stdio_init.part.0+0x30>)
 80093f8:	4c0b      	ldr	r4, [pc, #44]	@ (8009428 <global_stdio_init.part.0+0x34>)
 80093fa:	4a0c      	ldr	r2, [pc, #48]	@ (800942c <global_stdio_init.part.0+0x38>)
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	4620      	mov	r0, r4
 8009400:	2200      	movs	r2, #0
 8009402:	2104      	movs	r1, #4
 8009404:	f7ff ff94 	bl	8009330 <std>
 8009408:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800940c:	2201      	movs	r2, #1
 800940e:	2109      	movs	r1, #9
 8009410:	f7ff ff8e 	bl	8009330 <std>
 8009414:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009418:	2202      	movs	r2, #2
 800941a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800941e:	2112      	movs	r1, #18
 8009420:	f7ff bf86 	b.w	8009330 <std>
 8009424:	20001914 	.word	0x20001914
 8009428:	200017dc 	.word	0x200017dc
 800942c:	0800939d 	.word	0x0800939d

08009430 <__sfp_lock_acquire>:
 8009430:	4801      	ldr	r0, [pc, #4]	@ (8009438 <__sfp_lock_acquire+0x8>)
 8009432:	f000 b8d4 	b.w	80095de <__retarget_lock_acquire_recursive>
 8009436:	bf00      	nop
 8009438:	20001919 	.word	0x20001919

0800943c <__sfp_lock_release>:
 800943c:	4801      	ldr	r0, [pc, #4]	@ (8009444 <__sfp_lock_release+0x8>)
 800943e:	f000 b8cf 	b.w	80095e0 <__retarget_lock_release_recursive>
 8009442:	bf00      	nop
 8009444:	20001919 	.word	0x20001919

08009448 <__sinit>:
 8009448:	b510      	push	{r4, lr}
 800944a:	4604      	mov	r4, r0
 800944c:	f7ff fff0 	bl	8009430 <__sfp_lock_acquire>
 8009450:	6a23      	ldr	r3, [r4, #32]
 8009452:	b11b      	cbz	r3, 800945c <__sinit+0x14>
 8009454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009458:	f7ff bff0 	b.w	800943c <__sfp_lock_release>
 800945c:	4b04      	ldr	r3, [pc, #16]	@ (8009470 <__sinit+0x28>)
 800945e:	6223      	str	r3, [r4, #32]
 8009460:	4b04      	ldr	r3, [pc, #16]	@ (8009474 <__sinit+0x2c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1f5      	bne.n	8009454 <__sinit+0xc>
 8009468:	f7ff ffc4 	bl	80093f4 <global_stdio_init.part.0>
 800946c:	e7f2      	b.n	8009454 <__sinit+0xc>
 800946e:	bf00      	nop
 8009470:	080093b5 	.word	0x080093b5
 8009474:	20001914 	.word	0x20001914

08009478 <_fwalk_sglue>:
 8009478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800947c:	4607      	mov	r7, r0
 800947e:	4688      	mov	r8, r1
 8009480:	4614      	mov	r4, r2
 8009482:	2600      	movs	r6, #0
 8009484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009488:	f1b9 0901 	subs.w	r9, r9, #1
 800948c:	d505      	bpl.n	800949a <_fwalk_sglue+0x22>
 800948e:	6824      	ldr	r4, [r4, #0]
 8009490:	2c00      	cmp	r4, #0
 8009492:	d1f7      	bne.n	8009484 <_fwalk_sglue+0xc>
 8009494:	4630      	mov	r0, r6
 8009496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d907      	bls.n	80094b0 <_fwalk_sglue+0x38>
 80094a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094a4:	3301      	adds	r3, #1
 80094a6:	d003      	beq.n	80094b0 <_fwalk_sglue+0x38>
 80094a8:	4629      	mov	r1, r5
 80094aa:	4638      	mov	r0, r7
 80094ac:	47c0      	blx	r8
 80094ae:	4306      	orrs	r6, r0
 80094b0:	3568      	adds	r5, #104	@ 0x68
 80094b2:	e7e9      	b.n	8009488 <_fwalk_sglue+0x10>

080094b4 <_puts_r>:
 80094b4:	6a03      	ldr	r3, [r0, #32]
 80094b6:	b570      	push	{r4, r5, r6, lr}
 80094b8:	6884      	ldr	r4, [r0, #8]
 80094ba:	4605      	mov	r5, r0
 80094bc:	460e      	mov	r6, r1
 80094be:	b90b      	cbnz	r3, 80094c4 <_puts_r+0x10>
 80094c0:	f7ff ffc2 	bl	8009448 <__sinit>
 80094c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094c6:	07db      	lsls	r3, r3, #31
 80094c8:	d405      	bmi.n	80094d6 <_puts_r+0x22>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	0598      	lsls	r0, r3, #22
 80094ce:	d402      	bmi.n	80094d6 <_puts_r+0x22>
 80094d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094d2:	f000 f884 	bl	80095de <__retarget_lock_acquire_recursive>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	0719      	lsls	r1, r3, #28
 80094da:	d502      	bpl.n	80094e2 <_puts_r+0x2e>
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d135      	bne.n	800954e <_puts_r+0x9a>
 80094e2:	4621      	mov	r1, r4
 80094e4:	4628      	mov	r0, r5
 80094e6:	f001 fc31 	bl	800ad4c <__swsetup_r>
 80094ea:	b380      	cbz	r0, 800954e <_puts_r+0x9a>
 80094ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80094f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094f2:	07da      	lsls	r2, r3, #31
 80094f4:	d405      	bmi.n	8009502 <_puts_r+0x4e>
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	059b      	lsls	r3, r3, #22
 80094fa:	d402      	bmi.n	8009502 <_puts_r+0x4e>
 80094fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094fe:	f000 f86f 	bl	80095e0 <__retarget_lock_release_recursive>
 8009502:	4628      	mov	r0, r5
 8009504:	bd70      	pop	{r4, r5, r6, pc}
 8009506:	2b00      	cmp	r3, #0
 8009508:	da04      	bge.n	8009514 <_puts_r+0x60>
 800950a:	69a2      	ldr	r2, [r4, #24]
 800950c:	429a      	cmp	r2, r3
 800950e:	dc17      	bgt.n	8009540 <_puts_r+0x8c>
 8009510:	290a      	cmp	r1, #10
 8009512:	d015      	beq.n	8009540 <_puts_r+0x8c>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	6022      	str	r2, [r4, #0]
 800951a:	7019      	strb	r1, [r3, #0]
 800951c:	68a3      	ldr	r3, [r4, #8]
 800951e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009522:	3b01      	subs	r3, #1
 8009524:	60a3      	str	r3, [r4, #8]
 8009526:	2900      	cmp	r1, #0
 8009528:	d1ed      	bne.n	8009506 <_puts_r+0x52>
 800952a:	2b00      	cmp	r3, #0
 800952c:	da11      	bge.n	8009552 <_puts_r+0x9e>
 800952e:	4622      	mov	r2, r4
 8009530:	210a      	movs	r1, #10
 8009532:	4628      	mov	r0, r5
 8009534:	f001 fbcb 	bl	800acce <__swbuf_r>
 8009538:	3001      	adds	r0, #1
 800953a:	d0d7      	beq.n	80094ec <_puts_r+0x38>
 800953c:	250a      	movs	r5, #10
 800953e:	e7d7      	b.n	80094f0 <_puts_r+0x3c>
 8009540:	4622      	mov	r2, r4
 8009542:	4628      	mov	r0, r5
 8009544:	f001 fbc3 	bl	800acce <__swbuf_r>
 8009548:	3001      	adds	r0, #1
 800954a:	d1e7      	bne.n	800951c <_puts_r+0x68>
 800954c:	e7ce      	b.n	80094ec <_puts_r+0x38>
 800954e:	3e01      	subs	r6, #1
 8009550:	e7e4      	b.n	800951c <_puts_r+0x68>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	6022      	str	r2, [r4, #0]
 8009558:	220a      	movs	r2, #10
 800955a:	701a      	strb	r2, [r3, #0]
 800955c:	e7ee      	b.n	800953c <_puts_r+0x88>
	...

08009560 <puts>:
 8009560:	4b02      	ldr	r3, [pc, #8]	@ (800956c <puts+0xc>)
 8009562:	4601      	mov	r1, r0
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	f7ff bfa5 	b.w	80094b4 <_puts_r>
 800956a:	bf00      	nop
 800956c:	2000005c 	.word	0x2000005c

08009570 <memset>:
 8009570:	4402      	add	r2, r0
 8009572:	4603      	mov	r3, r0
 8009574:	4293      	cmp	r3, r2
 8009576:	d100      	bne.n	800957a <memset+0xa>
 8009578:	4770      	bx	lr
 800957a:	f803 1b01 	strb.w	r1, [r3], #1
 800957e:	e7f9      	b.n	8009574 <memset+0x4>

08009580 <_localeconv_r>:
 8009580:	4800      	ldr	r0, [pc, #0]	@ (8009584 <_localeconv_r+0x4>)
 8009582:	4770      	bx	lr
 8009584:	2000019c 	.word	0x2000019c

08009588 <__errno>:
 8009588:	4b01      	ldr	r3, [pc, #4]	@ (8009590 <__errno+0x8>)
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	2000005c 	.word	0x2000005c

08009594 <__libc_init_array>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	4d0d      	ldr	r5, [pc, #52]	@ (80095cc <__libc_init_array+0x38>)
 8009598:	4c0d      	ldr	r4, [pc, #52]	@ (80095d0 <__libc_init_array+0x3c>)
 800959a:	1b64      	subs	r4, r4, r5
 800959c:	10a4      	asrs	r4, r4, #2
 800959e:	2600      	movs	r6, #0
 80095a0:	42a6      	cmp	r6, r4
 80095a2:	d109      	bne.n	80095b8 <__libc_init_array+0x24>
 80095a4:	4d0b      	ldr	r5, [pc, #44]	@ (80095d4 <__libc_init_array+0x40>)
 80095a6:	4c0c      	ldr	r4, [pc, #48]	@ (80095d8 <__libc_init_array+0x44>)
 80095a8:	f001 ffb0 	bl	800b50c <_init>
 80095ac:	1b64      	subs	r4, r4, r5
 80095ae:	10a4      	asrs	r4, r4, #2
 80095b0:	2600      	movs	r6, #0
 80095b2:	42a6      	cmp	r6, r4
 80095b4:	d105      	bne.n	80095c2 <__libc_init_array+0x2e>
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095bc:	4798      	blx	r3
 80095be:	3601      	adds	r6, #1
 80095c0:	e7ee      	b.n	80095a0 <__libc_init_array+0xc>
 80095c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c6:	4798      	blx	r3
 80095c8:	3601      	adds	r6, #1
 80095ca:	e7f2      	b.n	80095b2 <__libc_init_array+0x1e>
 80095cc:	0801e8d0 	.word	0x0801e8d0
 80095d0:	0801e8d0 	.word	0x0801e8d0
 80095d4:	0801e8d0 	.word	0x0801e8d0
 80095d8:	0801e8d4 	.word	0x0801e8d4

080095dc <__retarget_lock_init_recursive>:
 80095dc:	4770      	bx	lr

080095de <__retarget_lock_acquire_recursive>:
 80095de:	4770      	bx	lr

080095e0 <__retarget_lock_release_recursive>:
 80095e0:	4770      	bx	lr

080095e2 <quorem>:
 80095e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e6:	6903      	ldr	r3, [r0, #16]
 80095e8:	690c      	ldr	r4, [r1, #16]
 80095ea:	42a3      	cmp	r3, r4
 80095ec:	4607      	mov	r7, r0
 80095ee:	db7e      	blt.n	80096ee <quorem+0x10c>
 80095f0:	3c01      	subs	r4, #1
 80095f2:	f101 0814 	add.w	r8, r1, #20
 80095f6:	00a3      	lsls	r3, r4, #2
 80095f8:	f100 0514 	add.w	r5, r0, #20
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800960c:	3301      	adds	r3, #1
 800960e:	429a      	cmp	r2, r3
 8009610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009614:	fbb2 f6f3 	udiv	r6, r2, r3
 8009618:	d32e      	bcc.n	8009678 <quorem+0x96>
 800961a:	f04f 0a00 	mov.w	sl, #0
 800961e:	46c4      	mov	ip, r8
 8009620:	46ae      	mov	lr, r5
 8009622:	46d3      	mov	fp, sl
 8009624:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009628:	b298      	uxth	r0, r3
 800962a:	fb06 a000 	mla	r0, r6, r0, sl
 800962e:	0c02      	lsrs	r2, r0, #16
 8009630:	0c1b      	lsrs	r3, r3, #16
 8009632:	fb06 2303 	mla	r3, r6, r3, r2
 8009636:	f8de 2000 	ldr.w	r2, [lr]
 800963a:	b280      	uxth	r0, r0
 800963c:	b292      	uxth	r2, r2
 800963e:	1a12      	subs	r2, r2, r0
 8009640:	445a      	add	r2, fp
 8009642:	f8de 0000 	ldr.w	r0, [lr]
 8009646:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800964a:	b29b      	uxth	r3, r3
 800964c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009650:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009654:	b292      	uxth	r2, r2
 8009656:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800965a:	45e1      	cmp	r9, ip
 800965c:	f84e 2b04 	str.w	r2, [lr], #4
 8009660:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009664:	d2de      	bcs.n	8009624 <quorem+0x42>
 8009666:	9b00      	ldr	r3, [sp, #0]
 8009668:	58eb      	ldr	r3, [r5, r3]
 800966a:	b92b      	cbnz	r3, 8009678 <quorem+0x96>
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	3b04      	subs	r3, #4
 8009670:	429d      	cmp	r5, r3
 8009672:	461a      	mov	r2, r3
 8009674:	d32f      	bcc.n	80096d6 <quorem+0xf4>
 8009676:	613c      	str	r4, [r7, #16]
 8009678:	4638      	mov	r0, r7
 800967a:	f001 f9dd 	bl	800aa38 <__mcmp>
 800967e:	2800      	cmp	r0, #0
 8009680:	db25      	blt.n	80096ce <quorem+0xec>
 8009682:	4629      	mov	r1, r5
 8009684:	2000      	movs	r0, #0
 8009686:	f858 2b04 	ldr.w	r2, [r8], #4
 800968a:	f8d1 c000 	ldr.w	ip, [r1]
 800968e:	fa1f fe82 	uxth.w	lr, r2
 8009692:	fa1f f38c 	uxth.w	r3, ip
 8009696:	eba3 030e 	sub.w	r3, r3, lr
 800969a:	4403      	add	r3, r0
 800969c:	0c12      	lsrs	r2, r2, #16
 800969e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096ac:	45c1      	cmp	r9, r8
 80096ae:	f841 3b04 	str.w	r3, [r1], #4
 80096b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096b6:	d2e6      	bcs.n	8009686 <quorem+0xa4>
 80096b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096c0:	b922      	cbnz	r2, 80096cc <quorem+0xea>
 80096c2:	3b04      	subs	r3, #4
 80096c4:	429d      	cmp	r5, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	d30b      	bcc.n	80096e2 <quorem+0x100>
 80096ca:	613c      	str	r4, [r7, #16]
 80096cc:	3601      	adds	r6, #1
 80096ce:	4630      	mov	r0, r6
 80096d0:	b003      	add	sp, #12
 80096d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d6:	6812      	ldr	r2, [r2, #0]
 80096d8:	3b04      	subs	r3, #4
 80096da:	2a00      	cmp	r2, #0
 80096dc:	d1cb      	bne.n	8009676 <quorem+0x94>
 80096de:	3c01      	subs	r4, #1
 80096e0:	e7c6      	b.n	8009670 <quorem+0x8e>
 80096e2:	6812      	ldr	r2, [r2, #0]
 80096e4:	3b04      	subs	r3, #4
 80096e6:	2a00      	cmp	r2, #0
 80096e8:	d1ef      	bne.n	80096ca <quorem+0xe8>
 80096ea:	3c01      	subs	r4, #1
 80096ec:	e7ea      	b.n	80096c4 <quorem+0xe2>
 80096ee:	2000      	movs	r0, #0
 80096f0:	e7ee      	b.n	80096d0 <quorem+0xee>
 80096f2:	0000      	movs	r0, r0
 80096f4:	0000      	movs	r0, r0
	...

080096f8 <_dtoa_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	69c7      	ldr	r7, [r0, #28]
 80096fe:	b099      	sub	sp, #100	@ 0x64
 8009700:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009704:	ec55 4b10 	vmov	r4, r5, d0
 8009708:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800970a:	9109      	str	r1, [sp, #36]	@ 0x24
 800970c:	4683      	mov	fp, r0
 800970e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009710:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009712:	b97f      	cbnz	r7, 8009734 <_dtoa_r+0x3c>
 8009714:	2010      	movs	r0, #16
 8009716:	f000 fdb3 	bl	800a280 <malloc>
 800971a:	4602      	mov	r2, r0
 800971c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009720:	b920      	cbnz	r0, 800972c <_dtoa_r+0x34>
 8009722:	4ba7      	ldr	r3, [pc, #668]	@ (80099c0 <_dtoa_r+0x2c8>)
 8009724:	21ef      	movs	r1, #239	@ 0xef
 8009726:	48a7      	ldr	r0, [pc, #668]	@ (80099c4 <_dtoa_r+0x2cc>)
 8009728:	f001 fc4e 	bl	800afc8 <__assert_func>
 800972c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009730:	6007      	str	r7, [r0, #0]
 8009732:	60c7      	str	r7, [r0, #12]
 8009734:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009738:	6819      	ldr	r1, [r3, #0]
 800973a:	b159      	cbz	r1, 8009754 <_dtoa_r+0x5c>
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	604a      	str	r2, [r1, #4]
 8009740:	2301      	movs	r3, #1
 8009742:	4093      	lsls	r3, r2
 8009744:	608b      	str	r3, [r1, #8]
 8009746:	4658      	mov	r0, fp
 8009748:	f000 ff3c 	bl	800a5c4 <_Bfree>
 800974c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	1e2b      	subs	r3, r5, #0
 8009756:	bfb9      	ittee	lt
 8009758:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800975c:	9303      	strlt	r3, [sp, #12]
 800975e:	2300      	movge	r3, #0
 8009760:	6033      	strge	r3, [r6, #0]
 8009762:	9f03      	ldr	r7, [sp, #12]
 8009764:	4b98      	ldr	r3, [pc, #608]	@ (80099c8 <_dtoa_r+0x2d0>)
 8009766:	bfbc      	itt	lt
 8009768:	2201      	movlt	r2, #1
 800976a:	6032      	strlt	r2, [r6, #0]
 800976c:	43bb      	bics	r3, r7
 800976e:	d112      	bne.n	8009796 <_dtoa_r+0x9e>
 8009770:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009772:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800977c:	4323      	orrs	r3, r4
 800977e:	f000 854d 	beq.w	800a21c <_dtoa_r+0xb24>
 8009782:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009784:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80099dc <_dtoa_r+0x2e4>
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 854f 	beq.w	800a22c <_dtoa_r+0xb34>
 800978e:	f10a 0303 	add.w	r3, sl, #3
 8009792:	f000 bd49 	b.w	800a228 <_dtoa_r+0xb30>
 8009796:	ed9d 7b02 	vldr	d7, [sp, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	ec51 0b17 	vmov	r0, r1, d7
 80097a0:	2300      	movs	r3, #0
 80097a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80097a6:	f7f7 f9b7 	bl	8000b18 <__aeabi_dcmpeq>
 80097aa:	4680      	mov	r8, r0
 80097ac:	b158      	cbz	r0, 80097c6 <_dtoa_r+0xce>
 80097ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097b0:	2301      	movs	r3, #1
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097b6:	b113      	cbz	r3, 80097be <_dtoa_r+0xc6>
 80097b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097ba:	4b84      	ldr	r3, [pc, #528]	@ (80099cc <_dtoa_r+0x2d4>)
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80099e0 <_dtoa_r+0x2e8>
 80097c2:	f000 bd33 	b.w	800a22c <_dtoa_r+0xb34>
 80097c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80097ca:	aa16      	add	r2, sp, #88	@ 0x58
 80097cc:	a917      	add	r1, sp, #92	@ 0x5c
 80097ce:	4658      	mov	r0, fp
 80097d0:	f001 f9e2 	bl	800ab98 <__d2b>
 80097d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80097d8:	4681      	mov	r9, r0
 80097da:	2e00      	cmp	r6, #0
 80097dc:	d077      	beq.n	80098ce <_dtoa_r+0x1d6>
 80097de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80097e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80097f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80097f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80097f8:	4619      	mov	r1, r3
 80097fa:	2200      	movs	r2, #0
 80097fc:	4b74      	ldr	r3, [pc, #464]	@ (80099d0 <_dtoa_r+0x2d8>)
 80097fe:	f7f6 fd6b 	bl	80002d8 <__aeabi_dsub>
 8009802:	a369      	add	r3, pc, #420	@ (adr r3, 80099a8 <_dtoa_r+0x2b0>)
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f7f6 ff1e 	bl	8000648 <__aeabi_dmul>
 800980c:	a368      	add	r3, pc, #416	@ (adr r3, 80099b0 <_dtoa_r+0x2b8>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f6 fd63 	bl	80002dc <__adddf3>
 8009816:	4604      	mov	r4, r0
 8009818:	4630      	mov	r0, r6
 800981a:	460d      	mov	r5, r1
 800981c:	f7f6 feaa 	bl	8000574 <__aeabi_i2d>
 8009820:	a365      	add	r3, pc, #404	@ (adr r3, 80099b8 <_dtoa_r+0x2c0>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 ff0f 	bl	8000648 <__aeabi_dmul>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4620      	mov	r0, r4
 8009830:	4629      	mov	r1, r5
 8009832:	f7f6 fd53 	bl	80002dc <__adddf3>
 8009836:	4604      	mov	r4, r0
 8009838:	460d      	mov	r5, r1
 800983a:	f7f7 f9b5 	bl	8000ba8 <__aeabi_d2iz>
 800983e:	2200      	movs	r2, #0
 8009840:	4607      	mov	r7, r0
 8009842:	2300      	movs	r3, #0
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f7 f970 	bl	8000b2c <__aeabi_dcmplt>
 800984c:	b140      	cbz	r0, 8009860 <_dtoa_r+0x168>
 800984e:	4638      	mov	r0, r7
 8009850:	f7f6 fe90 	bl	8000574 <__aeabi_i2d>
 8009854:	4622      	mov	r2, r4
 8009856:	462b      	mov	r3, r5
 8009858:	f7f7 f95e 	bl	8000b18 <__aeabi_dcmpeq>
 800985c:	b900      	cbnz	r0, 8009860 <_dtoa_r+0x168>
 800985e:	3f01      	subs	r7, #1
 8009860:	2f16      	cmp	r7, #22
 8009862:	d851      	bhi.n	8009908 <_dtoa_r+0x210>
 8009864:	4b5b      	ldr	r3, [pc, #364]	@ (80099d4 <_dtoa_r+0x2dc>)
 8009866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009872:	f7f7 f95b 	bl	8000b2c <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	d048      	beq.n	800990c <_dtoa_r+0x214>
 800987a:	3f01      	subs	r7, #1
 800987c:	2300      	movs	r3, #0
 800987e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009880:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009882:	1b9b      	subs	r3, r3, r6
 8009884:	1e5a      	subs	r2, r3, #1
 8009886:	bf44      	itt	mi
 8009888:	f1c3 0801 	rsbmi	r8, r3, #1
 800988c:	2300      	movmi	r3, #0
 800988e:	9208      	str	r2, [sp, #32]
 8009890:	bf54      	ite	pl
 8009892:	f04f 0800 	movpl.w	r8, #0
 8009896:	9308      	strmi	r3, [sp, #32]
 8009898:	2f00      	cmp	r7, #0
 800989a:	db39      	blt.n	8009910 <_dtoa_r+0x218>
 800989c:	9b08      	ldr	r3, [sp, #32]
 800989e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80098a0:	443b      	add	r3, r7
 80098a2:	9308      	str	r3, [sp, #32]
 80098a4:	2300      	movs	r3, #0
 80098a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098aa:	2b09      	cmp	r3, #9
 80098ac:	d864      	bhi.n	8009978 <_dtoa_r+0x280>
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	bfc4      	itt	gt
 80098b2:	3b04      	subgt	r3, #4
 80098b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80098b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b8:	f1a3 0302 	sub.w	r3, r3, #2
 80098bc:	bfcc      	ite	gt
 80098be:	2400      	movgt	r4, #0
 80098c0:	2401      	movle	r4, #1
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d863      	bhi.n	800998e <_dtoa_r+0x296>
 80098c6:	e8df f003 	tbb	[pc, r3]
 80098ca:	372a      	.short	0x372a
 80098cc:	5535      	.short	0x5535
 80098ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80098d2:	441e      	add	r6, r3
 80098d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80098d8:	2b20      	cmp	r3, #32
 80098da:	bfc1      	itttt	gt
 80098dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80098e0:	409f      	lslgt	r7, r3
 80098e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80098e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80098ea:	bfd6      	itet	le
 80098ec:	f1c3 0320 	rsble	r3, r3, #32
 80098f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80098f4:	fa04 f003 	lslle.w	r0, r4, r3
 80098f8:	f7f6 fe2c 	bl	8000554 <__aeabi_ui2d>
 80098fc:	2201      	movs	r2, #1
 80098fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009902:	3e01      	subs	r6, #1
 8009904:	9214      	str	r2, [sp, #80]	@ 0x50
 8009906:	e777      	b.n	80097f8 <_dtoa_r+0x100>
 8009908:	2301      	movs	r3, #1
 800990a:	e7b8      	b.n	800987e <_dtoa_r+0x186>
 800990c:	9012      	str	r0, [sp, #72]	@ 0x48
 800990e:	e7b7      	b.n	8009880 <_dtoa_r+0x188>
 8009910:	427b      	negs	r3, r7
 8009912:	930a      	str	r3, [sp, #40]	@ 0x28
 8009914:	2300      	movs	r3, #0
 8009916:	eba8 0807 	sub.w	r8, r8, r7
 800991a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800991c:	e7c4      	b.n	80098a8 <_dtoa_r+0x1b0>
 800991e:	2300      	movs	r3, #0
 8009920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009924:	2b00      	cmp	r3, #0
 8009926:	dc35      	bgt.n	8009994 <_dtoa_r+0x29c>
 8009928:	2301      	movs	r3, #1
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	9307      	str	r3, [sp, #28]
 800992e:	461a      	mov	r2, r3
 8009930:	920e      	str	r2, [sp, #56]	@ 0x38
 8009932:	e00b      	b.n	800994c <_dtoa_r+0x254>
 8009934:	2301      	movs	r3, #1
 8009936:	e7f3      	b.n	8009920 <_dtoa_r+0x228>
 8009938:	2300      	movs	r3, #0
 800993a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800993c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	3301      	adds	r3, #1
 8009944:	2b01      	cmp	r3, #1
 8009946:	9307      	str	r3, [sp, #28]
 8009948:	bfb8      	it	lt
 800994a:	2301      	movlt	r3, #1
 800994c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009950:	2100      	movs	r1, #0
 8009952:	2204      	movs	r2, #4
 8009954:	f102 0514 	add.w	r5, r2, #20
 8009958:	429d      	cmp	r5, r3
 800995a:	d91f      	bls.n	800999c <_dtoa_r+0x2a4>
 800995c:	6041      	str	r1, [r0, #4]
 800995e:	4658      	mov	r0, fp
 8009960:	f000 fdf0 	bl	800a544 <_Balloc>
 8009964:	4682      	mov	sl, r0
 8009966:	2800      	cmp	r0, #0
 8009968:	d13c      	bne.n	80099e4 <_dtoa_r+0x2ec>
 800996a:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <_dtoa_r+0x2e0>)
 800996c:	4602      	mov	r2, r0
 800996e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009972:	e6d8      	b.n	8009726 <_dtoa_r+0x2e>
 8009974:	2301      	movs	r3, #1
 8009976:	e7e0      	b.n	800993a <_dtoa_r+0x242>
 8009978:	2401      	movs	r4, #1
 800997a:	2300      	movs	r3, #0
 800997c:	9309      	str	r3, [sp, #36]	@ 0x24
 800997e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	9307      	str	r3, [sp, #28]
 8009988:	2200      	movs	r2, #0
 800998a:	2312      	movs	r3, #18
 800998c:	e7d0      	b.n	8009930 <_dtoa_r+0x238>
 800998e:	2301      	movs	r3, #1
 8009990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009992:	e7f5      	b.n	8009980 <_dtoa_r+0x288>
 8009994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	9307      	str	r3, [sp, #28]
 800999a:	e7d7      	b.n	800994c <_dtoa_r+0x254>
 800999c:	3101      	adds	r1, #1
 800999e:	0052      	lsls	r2, r2, #1
 80099a0:	e7d8      	b.n	8009954 <_dtoa_r+0x25c>
 80099a2:	bf00      	nop
 80099a4:	f3af 8000 	nop.w
 80099a8:	636f4361 	.word	0x636f4361
 80099ac:	3fd287a7 	.word	0x3fd287a7
 80099b0:	8b60c8b3 	.word	0x8b60c8b3
 80099b4:	3fc68a28 	.word	0x3fc68a28
 80099b8:	509f79fb 	.word	0x509f79fb
 80099bc:	3fd34413 	.word	0x3fd34413
 80099c0:	0801e595 	.word	0x0801e595
 80099c4:	0801e5ac 	.word	0x0801e5ac
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	0801e565 	.word	0x0801e565
 80099d0:	3ff80000 	.word	0x3ff80000
 80099d4:	0801e6a8 	.word	0x0801e6a8
 80099d8:	0801e604 	.word	0x0801e604
 80099dc:	0801e591 	.word	0x0801e591
 80099e0:	0801e564 	.word	0x0801e564
 80099e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099e8:	6018      	str	r0, [r3, #0]
 80099ea:	9b07      	ldr	r3, [sp, #28]
 80099ec:	2b0e      	cmp	r3, #14
 80099ee:	f200 80a4 	bhi.w	8009b3a <_dtoa_r+0x442>
 80099f2:	2c00      	cmp	r4, #0
 80099f4:	f000 80a1 	beq.w	8009b3a <_dtoa_r+0x442>
 80099f8:	2f00      	cmp	r7, #0
 80099fa:	dd33      	ble.n	8009a64 <_dtoa_r+0x36c>
 80099fc:	4bad      	ldr	r3, [pc, #692]	@ (8009cb4 <_dtoa_r+0x5bc>)
 80099fe:	f007 020f 	and.w	r2, r7, #15
 8009a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a06:	ed93 7b00 	vldr	d7, [r3]
 8009a0a:	05f8      	lsls	r0, r7, #23
 8009a0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a14:	d516      	bpl.n	8009a44 <_dtoa_r+0x34c>
 8009a16:	4ba8      	ldr	r3, [pc, #672]	@ (8009cb8 <_dtoa_r+0x5c0>)
 8009a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a20:	f7f6 ff3c 	bl	800089c <__aeabi_ddiv>
 8009a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a28:	f004 040f 	and.w	r4, r4, #15
 8009a2c:	2603      	movs	r6, #3
 8009a2e:	4da2      	ldr	r5, [pc, #648]	@ (8009cb8 <_dtoa_r+0x5c0>)
 8009a30:	b954      	cbnz	r4, 8009a48 <_dtoa_r+0x350>
 8009a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a3a:	f7f6 ff2f 	bl	800089c <__aeabi_ddiv>
 8009a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a42:	e028      	b.n	8009a96 <_dtoa_r+0x39e>
 8009a44:	2602      	movs	r6, #2
 8009a46:	e7f2      	b.n	8009a2e <_dtoa_r+0x336>
 8009a48:	07e1      	lsls	r1, r4, #31
 8009a4a:	d508      	bpl.n	8009a5e <_dtoa_r+0x366>
 8009a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a54:	f7f6 fdf8 	bl	8000648 <__aeabi_dmul>
 8009a58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	1064      	asrs	r4, r4, #1
 8009a60:	3508      	adds	r5, #8
 8009a62:	e7e5      	b.n	8009a30 <_dtoa_r+0x338>
 8009a64:	f000 80d2 	beq.w	8009c0c <_dtoa_r+0x514>
 8009a68:	427c      	negs	r4, r7
 8009a6a:	4b92      	ldr	r3, [pc, #584]	@ (8009cb4 <_dtoa_r+0x5bc>)
 8009a6c:	4d92      	ldr	r5, [pc, #584]	@ (8009cb8 <_dtoa_r+0x5c0>)
 8009a6e:	f004 020f 	and.w	r2, r4, #15
 8009a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a7e:	f7f6 fde3 	bl	8000648 <__aeabi_dmul>
 8009a82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a86:	1124      	asrs	r4, r4, #4
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2602      	movs	r6, #2
 8009a8c:	2c00      	cmp	r4, #0
 8009a8e:	f040 80b2 	bne.w	8009bf6 <_dtoa_r+0x4fe>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1d3      	bne.n	8009a3e <_dtoa_r+0x346>
 8009a96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80b7 	beq.w	8009c10 <_dtoa_r+0x518>
 8009aa2:	4b86      	ldr	r3, [pc, #536]	@ (8009cbc <_dtoa_r+0x5c4>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	f7f7 f83f 	bl	8000b2c <__aeabi_dcmplt>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f000 80ae 	beq.w	8009c10 <_dtoa_r+0x518>
 8009ab4:	9b07      	ldr	r3, [sp, #28]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80aa 	beq.w	8009c10 <_dtoa_r+0x518>
 8009abc:	9b00      	ldr	r3, [sp, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dd37      	ble.n	8009b32 <_dtoa_r+0x43a>
 8009ac2:	1e7b      	subs	r3, r7, #1
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8009cc0 <_dtoa_r+0x5c8>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	4629      	mov	r1, r5
 8009ace:	f7f6 fdbb 	bl	8000648 <__aeabi_dmul>
 8009ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad6:	9c00      	ldr	r4, [sp, #0]
 8009ad8:	3601      	adds	r6, #1
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7f6 fd4a 	bl	8000574 <__aeabi_i2d>
 8009ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ae4:	f7f6 fdb0 	bl	8000648 <__aeabi_dmul>
 8009ae8:	4b76      	ldr	r3, [pc, #472]	@ (8009cc4 <_dtoa_r+0x5cc>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	f7f6 fbf6 	bl	80002dc <__adddf3>
 8009af0:	4605      	mov	r5, r0
 8009af2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009af6:	2c00      	cmp	r4, #0
 8009af8:	f040 808d 	bne.w	8009c16 <_dtoa_r+0x51e>
 8009afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b00:	4b71      	ldr	r3, [pc, #452]	@ (8009cc8 <_dtoa_r+0x5d0>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7f6 fbe8 	bl	80002d8 <__aeabi_dsub>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b10:	462a      	mov	r2, r5
 8009b12:	4633      	mov	r3, r6
 8009b14:	f7f7 f828 	bl	8000b68 <__aeabi_dcmpgt>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	f040 828b 	bne.w	800a034 <_dtoa_r+0x93c>
 8009b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b22:	462a      	mov	r2, r5
 8009b24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b28:	f7f7 f800 	bl	8000b2c <__aeabi_dcmplt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	f040 8128 	bne.w	8009d82 <_dtoa_r+0x68a>
 8009b32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f2c0 815a 	blt.w	8009df6 <_dtoa_r+0x6fe>
 8009b42:	2f0e      	cmp	r7, #14
 8009b44:	f300 8157 	bgt.w	8009df6 <_dtoa_r+0x6fe>
 8009b48:	4b5a      	ldr	r3, [pc, #360]	@ (8009cb4 <_dtoa_r+0x5bc>)
 8009b4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b4e:	ed93 7b00 	vldr	d7, [r3]
 8009b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	ed8d 7b00 	vstr	d7, [sp]
 8009b5a:	da03      	bge.n	8009b64 <_dtoa_r+0x46c>
 8009b5c:	9b07      	ldr	r3, [sp, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f340 8101 	ble.w	8009d66 <_dtoa_r+0x66e>
 8009b64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b68:	4656      	mov	r6, sl
 8009b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7f6 fe93 	bl	800089c <__aeabi_ddiv>
 8009b76:	f7f7 f817 	bl	8000ba8 <__aeabi_d2iz>
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	f7f6 fcfa 	bl	8000574 <__aeabi_i2d>
 8009b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b84:	f7f6 fd60 	bl	8000648 <__aeabi_dmul>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b94:	f7f6 fba0 	bl	80002d8 <__aeabi_dsub>
 8009b98:	f806 4b01 	strb.w	r4, [r6], #1
 8009b9c:	9d07      	ldr	r5, [sp, #28]
 8009b9e:	eba6 040a 	sub.w	r4, r6, sl
 8009ba2:	42a5      	cmp	r5, r4
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	f040 8117 	bne.w	8009dda <_dtoa_r+0x6e2>
 8009bac:	f7f6 fb96 	bl	80002dc <__adddf3>
 8009bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	460d      	mov	r5, r1
 8009bb8:	f7f6 ffd6 	bl	8000b68 <__aeabi_dcmpgt>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f040 80f9 	bne.w	8009db4 <_dtoa_r+0x6bc>
 8009bc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f7f6 ffa5 	bl	8000b18 <__aeabi_dcmpeq>
 8009bce:	b118      	cbz	r0, 8009bd8 <_dtoa_r+0x4e0>
 8009bd0:	f018 0f01 	tst.w	r8, #1
 8009bd4:	f040 80ee 	bne.w	8009db4 <_dtoa_r+0x6bc>
 8009bd8:	4649      	mov	r1, r9
 8009bda:	4658      	mov	r0, fp
 8009bdc:	f000 fcf2 	bl	800a5c4 <_Bfree>
 8009be0:	2300      	movs	r3, #0
 8009be2:	7033      	strb	r3, [r6, #0]
 8009be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009be6:	3701      	adds	r7, #1
 8009be8:	601f      	str	r7, [r3, #0]
 8009bea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 831d 	beq.w	800a22c <_dtoa_r+0xb34>
 8009bf2:	601e      	str	r6, [r3, #0]
 8009bf4:	e31a      	b.n	800a22c <_dtoa_r+0xb34>
 8009bf6:	07e2      	lsls	r2, r4, #31
 8009bf8:	d505      	bpl.n	8009c06 <_dtoa_r+0x50e>
 8009bfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bfe:	f7f6 fd23 	bl	8000648 <__aeabi_dmul>
 8009c02:	3601      	adds	r6, #1
 8009c04:	2301      	movs	r3, #1
 8009c06:	1064      	asrs	r4, r4, #1
 8009c08:	3508      	adds	r5, #8
 8009c0a:	e73f      	b.n	8009a8c <_dtoa_r+0x394>
 8009c0c:	2602      	movs	r6, #2
 8009c0e:	e742      	b.n	8009a96 <_dtoa_r+0x39e>
 8009c10:	9c07      	ldr	r4, [sp, #28]
 8009c12:	9704      	str	r7, [sp, #16]
 8009c14:	e761      	b.n	8009ada <_dtoa_r+0x3e2>
 8009c16:	4b27      	ldr	r3, [pc, #156]	@ (8009cb4 <_dtoa_r+0x5bc>)
 8009c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c22:	4454      	add	r4, sl
 8009c24:	2900      	cmp	r1, #0
 8009c26:	d053      	beq.n	8009cd0 <_dtoa_r+0x5d8>
 8009c28:	4928      	ldr	r1, [pc, #160]	@ (8009ccc <_dtoa_r+0x5d4>)
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	f7f6 fe36 	bl	800089c <__aeabi_ddiv>
 8009c30:	4633      	mov	r3, r6
 8009c32:	462a      	mov	r2, r5
 8009c34:	f7f6 fb50 	bl	80002d8 <__aeabi_dsub>
 8009c38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c3c:	4656      	mov	r6, sl
 8009c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c42:	f7f6 ffb1 	bl	8000ba8 <__aeabi_d2iz>
 8009c46:	4605      	mov	r5, r0
 8009c48:	f7f6 fc94 	bl	8000574 <__aeabi_i2d>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c54:	f7f6 fb40 	bl	80002d8 <__aeabi_dsub>
 8009c58:	3530      	adds	r5, #48	@ 0x30
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c62:	f806 5b01 	strb.w	r5, [r6], #1
 8009c66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c6a:	f7f6 ff5f 	bl	8000b2c <__aeabi_dcmplt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d171      	bne.n	8009d56 <_dtoa_r+0x65e>
 8009c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c76:	4911      	ldr	r1, [pc, #68]	@ (8009cbc <_dtoa_r+0x5c4>)
 8009c78:	2000      	movs	r0, #0
 8009c7a:	f7f6 fb2d 	bl	80002d8 <__aeabi_dsub>
 8009c7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c82:	f7f6 ff53 	bl	8000b2c <__aeabi_dcmplt>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f040 8095 	bne.w	8009db6 <_dtoa_r+0x6be>
 8009c8c:	42a6      	cmp	r6, r4
 8009c8e:	f43f af50 	beq.w	8009b32 <_dtoa_r+0x43a>
 8009c92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c96:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc0 <_dtoa_r+0x5c8>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f7f6 fcd5 	bl	8000648 <__aeabi_dmul>
 8009c9e:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <_dtoa_r+0x5c8>)
 8009ca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009caa:	f7f6 fccd 	bl	8000648 <__aeabi_dmul>
 8009cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb2:	e7c4      	b.n	8009c3e <_dtoa_r+0x546>
 8009cb4:	0801e6a8 	.word	0x0801e6a8
 8009cb8:	0801e680 	.word	0x0801e680
 8009cbc:	3ff00000 	.word	0x3ff00000
 8009cc0:	40240000 	.word	0x40240000
 8009cc4:	401c0000 	.word	0x401c0000
 8009cc8:	40140000 	.word	0x40140000
 8009ccc:	3fe00000 	.word	0x3fe00000
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f7f6 fcb8 	bl	8000648 <__aeabi_dmul>
 8009cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cdc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009cde:	4656      	mov	r6, sl
 8009ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce4:	f7f6 ff60 	bl	8000ba8 <__aeabi_d2iz>
 8009ce8:	4605      	mov	r5, r0
 8009cea:	f7f6 fc43 	bl	8000574 <__aeabi_i2d>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf6:	f7f6 faef 	bl	80002d8 <__aeabi_dsub>
 8009cfa:	3530      	adds	r5, #48	@ 0x30
 8009cfc:	f806 5b01 	strb.w	r5, [r6], #1
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	42a6      	cmp	r6, r4
 8009d06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d0a:	f04f 0200 	mov.w	r2, #0
 8009d0e:	d124      	bne.n	8009d5a <_dtoa_r+0x662>
 8009d10:	4bac      	ldr	r3, [pc, #688]	@ (8009fc4 <_dtoa_r+0x8cc>)
 8009d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d16:	f7f6 fae1 	bl	80002dc <__adddf3>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d22:	f7f6 ff21 	bl	8000b68 <__aeabi_dcmpgt>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d145      	bne.n	8009db6 <_dtoa_r+0x6be>
 8009d2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d2e:	49a5      	ldr	r1, [pc, #660]	@ (8009fc4 <_dtoa_r+0x8cc>)
 8009d30:	2000      	movs	r0, #0
 8009d32:	f7f6 fad1 	bl	80002d8 <__aeabi_dsub>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d3e:	f7f6 fef5 	bl	8000b2c <__aeabi_dcmplt>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f aef5 	beq.w	8009b32 <_dtoa_r+0x43a>
 8009d48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009d4a:	1e73      	subs	r3, r6, #1
 8009d4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d52:	2b30      	cmp	r3, #48	@ 0x30
 8009d54:	d0f8      	beq.n	8009d48 <_dtoa_r+0x650>
 8009d56:	9f04      	ldr	r7, [sp, #16]
 8009d58:	e73e      	b.n	8009bd8 <_dtoa_r+0x4e0>
 8009d5a:	4b9b      	ldr	r3, [pc, #620]	@ (8009fc8 <_dtoa_r+0x8d0>)
 8009d5c:	f7f6 fc74 	bl	8000648 <__aeabi_dmul>
 8009d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d64:	e7bc      	b.n	8009ce0 <_dtoa_r+0x5e8>
 8009d66:	d10c      	bne.n	8009d82 <_dtoa_r+0x68a>
 8009d68:	4b98      	ldr	r3, [pc, #608]	@ (8009fcc <_dtoa_r+0x8d4>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d70:	f7f6 fc6a 	bl	8000648 <__aeabi_dmul>
 8009d74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d78:	f7f6 feec 	bl	8000b54 <__aeabi_dcmpge>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f000 8157 	beq.w	800a030 <_dtoa_r+0x938>
 8009d82:	2400      	movs	r4, #0
 8009d84:	4625      	mov	r5, r4
 8009d86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	4656      	mov	r6, sl
 8009d8e:	2700      	movs	r7, #0
 8009d90:	4621      	mov	r1, r4
 8009d92:	4658      	mov	r0, fp
 8009d94:	f000 fc16 	bl	800a5c4 <_Bfree>
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	d0dc      	beq.n	8009d56 <_dtoa_r+0x65e>
 8009d9c:	b12f      	cbz	r7, 8009daa <_dtoa_r+0x6b2>
 8009d9e:	42af      	cmp	r7, r5
 8009da0:	d003      	beq.n	8009daa <_dtoa_r+0x6b2>
 8009da2:	4639      	mov	r1, r7
 8009da4:	4658      	mov	r0, fp
 8009da6:	f000 fc0d 	bl	800a5c4 <_Bfree>
 8009daa:	4629      	mov	r1, r5
 8009dac:	4658      	mov	r0, fp
 8009dae:	f000 fc09 	bl	800a5c4 <_Bfree>
 8009db2:	e7d0      	b.n	8009d56 <_dtoa_r+0x65e>
 8009db4:	9704      	str	r7, [sp, #16]
 8009db6:	4633      	mov	r3, r6
 8009db8:	461e      	mov	r6, r3
 8009dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dbe:	2a39      	cmp	r2, #57	@ 0x39
 8009dc0:	d107      	bne.n	8009dd2 <_dtoa_r+0x6da>
 8009dc2:	459a      	cmp	sl, r3
 8009dc4:	d1f8      	bne.n	8009db8 <_dtoa_r+0x6c0>
 8009dc6:	9a04      	ldr	r2, [sp, #16]
 8009dc8:	3201      	adds	r2, #1
 8009dca:	9204      	str	r2, [sp, #16]
 8009dcc:	2230      	movs	r2, #48	@ 0x30
 8009dce:	f88a 2000 	strb.w	r2, [sl]
 8009dd2:	781a      	ldrb	r2, [r3, #0]
 8009dd4:	3201      	adds	r2, #1
 8009dd6:	701a      	strb	r2, [r3, #0]
 8009dd8:	e7bd      	b.n	8009d56 <_dtoa_r+0x65e>
 8009dda:	4b7b      	ldr	r3, [pc, #492]	@ (8009fc8 <_dtoa_r+0x8d0>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f7f6 fc33 	bl	8000648 <__aeabi_dmul>
 8009de2:	2200      	movs	r2, #0
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	460d      	mov	r5, r1
 8009dea:	f7f6 fe95 	bl	8000b18 <__aeabi_dcmpeq>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f43f aebb 	beq.w	8009b6a <_dtoa_r+0x472>
 8009df4:	e6f0      	b.n	8009bd8 <_dtoa_r+0x4e0>
 8009df6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009df8:	2a00      	cmp	r2, #0
 8009dfa:	f000 80db 	beq.w	8009fb4 <_dtoa_r+0x8bc>
 8009dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e00:	2a01      	cmp	r2, #1
 8009e02:	f300 80bf 	bgt.w	8009f84 <_dtoa_r+0x88c>
 8009e06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	f000 80b7 	beq.w	8009f7c <_dtoa_r+0x884>
 8009e0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e14:	4646      	mov	r6, r8
 8009e16:	9a08      	ldr	r2, [sp, #32]
 8009e18:	2101      	movs	r1, #1
 8009e1a:	441a      	add	r2, r3
 8009e1c:	4658      	mov	r0, fp
 8009e1e:	4498      	add	r8, r3
 8009e20:	9208      	str	r2, [sp, #32]
 8009e22:	f000 fc83 	bl	800a72c <__i2b>
 8009e26:	4605      	mov	r5, r0
 8009e28:	b15e      	cbz	r6, 8009e42 <_dtoa_r+0x74a>
 8009e2a:	9b08      	ldr	r3, [sp, #32]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dd08      	ble.n	8009e42 <_dtoa_r+0x74a>
 8009e30:	42b3      	cmp	r3, r6
 8009e32:	9a08      	ldr	r2, [sp, #32]
 8009e34:	bfa8      	it	ge
 8009e36:	4633      	movge	r3, r6
 8009e38:	eba8 0803 	sub.w	r8, r8, r3
 8009e3c:	1af6      	subs	r6, r6, r3
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e44:	b1f3      	cbz	r3, 8009e84 <_dtoa_r+0x78c>
 8009e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80b7 	beq.w	8009fbc <_dtoa_r+0x8c4>
 8009e4e:	b18c      	cbz	r4, 8009e74 <_dtoa_r+0x77c>
 8009e50:	4629      	mov	r1, r5
 8009e52:	4622      	mov	r2, r4
 8009e54:	4658      	mov	r0, fp
 8009e56:	f000 fd29 	bl	800a8ac <__pow5mult>
 8009e5a:	464a      	mov	r2, r9
 8009e5c:	4601      	mov	r1, r0
 8009e5e:	4605      	mov	r5, r0
 8009e60:	4658      	mov	r0, fp
 8009e62:	f000 fc79 	bl	800a758 <__multiply>
 8009e66:	4649      	mov	r1, r9
 8009e68:	9004      	str	r0, [sp, #16]
 8009e6a:	4658      	mov	r0, fp
 8009e6c:	f000 fbaa 	bl	800a5c4 <_Bfree>
 8009e70:	9b04      	ldr	r3, [sp, #16]
 8009e72:	4699      	mov	r9, r3
 8009e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e76:	1b1a      	subs	r2, r3, r4
 8009e78:	d004      	beq.n	8009e84 <_dtoa_r+0x78c>
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	4658      	mov	r0, fp
 8009e7e:	f000 fd15 	bl	800a8ac <__pow5mult>
 8009e82:	4681      	mov	r9, r0
 8009e84:	2101      	movs	r1, #1
 8009e86:	4658      	mov	r0, fp
 8009e88:	f000 fc50 	bl	800a72c <__i2b>
 8009e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e8e:	4604      	mov	r4, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 81cf 	beq.w	800a234 <_dtoa_r+0xb3c>
 8009e96:	461a      	mov	r2, r3
 8009e98:	4601      	mov	r1, r0
 8009e9a:	4658      	mov	r0, fp
 8009e9c:	f000 fd06 	bl	800a8ac <__pow5mult>
 8009ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	f300 8095 	bgt.w	8009fd4 <_dtoa_r+0x8dc>
 8009eaa:	9b02      	ldr	r3, [sp, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f040 8087 	bne.w	8009fc0 <_dtoa_r+0x8c8>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f040 8089 	bne.w	8009fd0 <_dtoa_r+0x8d8>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ec4:	0d1b      	lsrs	r3, r3, #20
 8009ec6:	051b      	lsls	r3, r3, #20
 8009ec8:	b12b      	cbz	r3, 8009ed6 <_dtoa_r+0x7de>
 8009eca:	9b08      	ldr	r3, [sp, #32]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	9308      	str	r3, [sp, #32]
 8009ed0:	f108 0801 	add.w	r8, r8, #1
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 81b0 	beq.w	800a240 <_dtoa_r+0xb48>
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ee6:	6918      	ldr	r0, [r3, #16]
 8009ee8:	f000 fbd4 	bl	800a694 <__hi0bits>
 8009eec:	f1c0 0020 	rsb	r0, r0, #32
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	4418      	add	r0, r3
 8009ef4:	f010 001f 	ands.w	r0, r0, #31
 8009ef8:	d077      	beq.n	8009fea <_dtoa_r+0x8f2>
 8009efa:	f1c0 0320 	rsb	r3, r0, #32
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	dd6b      	ble.n	8009fda <_dtoa_r+0x8e2>
 8009f02:	9b08      	ldr	r3, [sp, #32]
 8009f04:	f1c0 001c 	rsb	r0, r0, #28
 8009f08:	4403      	add	r3, r0
 8009f0a:	4480      	add	r8, r0
 8009f0c:	4406      	add	r6, r0
 8009f0e:	9308      	str	r3, [sp, #32]
 8009f10:	f1b8 0f00 	cmp.w	r8, #0
 8009f14:	dd05      	ble.n	8009f22 <_dtoa_r+0x82a>
 8009f16:	4649      	mov	r1, r9
 8009f18:	4642      	mov	r2, r8
 8009f1a:	4658      	mov	r0, fp
 8009f1c:	f000 fd20 	bl	800a960 <__lshift>
 8009f20:	4681      	mov	r9, r0
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd05      	ble.n	8009f34 <_dtoa_r+0x83c>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	4658      	mov	r0, fp
 8009f2e:	f000 fd17 	bl	800a960 <__lshift>
 8009f32:	4604      	mov	r4, r0
 8009f34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d059      	beq.n	8009fee <_dtoa_r+0x8f6>
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f000 fd7b 	bl	800aa38 <__mcmp>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	da53      	bge.n	8009fee <_dtoa_r+0x8f6>
 8009f46:	1e7b      	subs	r3, r7, #1
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	220a      	movs	r2, #10
 8009f50:	4658      	mov	r0, fp
 8009f52:	f000 fb59 	bl	800a608 <__multadd>
 8009f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f58:	4681      	mov	r9, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 8172 	beq.w	800a244 <_dtoa_r+0xb4c>
 8009f60:	2300      	movs	r3, #0
 8009f62:	4629      	mov	r1, r5
 8009f64:	220a      	movs	r2, #10
 8009f66:	4658      	mov	r0, fp
 8009f68:	f000 fb4e 	bl	800a608 <__multadd>
 8009f6c:	9b00      	ldr	r3, [sp, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	4605      	mov	r5, r0
 8009f72:	dc67      	bgt.n	800a044 <_dtoa_r+0x94c>
 8009f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	dc41      	bgt.n	8009ffe <_dtoa_r+0x906>
 8009f7a:	e063      	b.n	800a044 <_dtoa_r+0x94c>
 8009f7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f82:	e746      	b.n	8009e12 <_dtoa_r+0x71a>
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	1e5c      	subs	r4, r3, #1
 8009f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f8a:	42a3      	cmp	r3, r4
 8009f8c:	bfbf      	itttt	lt
 8009f8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009f92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009f94:	1ae3      	sublt	r3, r4, r3
 8009f96:	bfb4      	ite	lt
 8009f98:	18d2      	addlt	r2, r2, r3
 8009f9a:	1b1c      	subge	r4, r3, r4
 8009f9c:	9b07      	ldr	r3, [sp, #28]
 8009f9e:	bfbc      	itt	lt
 8009fa0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009fa2:	2400      	movlt	r4, #0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bfb5      	itete	lt
 8009fa8:	eba8 0603 	sublt.w	r6, r8, r3
 8009fac:	9b07      	ldrge	r3, [sp, #28]
 8009fae:	2300      	movlt	r3, #0
 8009fb0:	4646      	movge	r6, r8
 8009fb2:	e730      	b.n	8009e16 <_dtoa_r+0x71e>
 8009fb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009fb8:	4646      	mov	r6, r8
 8009fba:	e735      	b.n	8009e28 <_dtoa_r+0x730>
 8009fbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fbe:	e75c      	b.n	8009e7a <_dtoa_r+0x782>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e788      	b.n	8009ed6 <_dtoa_r+0x7de>
 8009fc4:	3fe00000 	.word	0x3fe00000
 8009fc8:	40240000 	.word	0x40240000
 8009fcc:	40140000 	.word	0x40140000
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	e780      	b.n	8009ed6 <_dtoa_r+0x7de>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fd8:	e782      	b.n	8009ee0 <_dtoa_r+0x7e8>
 8009fda:	d099      	beq.n	8009f10 <_dtoa_r+0x818>
 8009fdc:	9a08      	ldr	r2, [sp, #32]
 8009fde:	331c      	adds	r3, #28
 8009fe0:	441a      	add	r2, r3
 8009fe2:	4498      	add	r8, r3
 8009fe4:	441e      	add	r6, r3
 8009fe6:	9208      	str	r2, [sp, #32]
 8009fe8:	e792      	b.n	8009f10 <_dtoa_r+0x818>
 8009fea:	4603      	mov	r3, r0
 8009fec:	e7f6      	b.n	8009fdc <_dtoa_r+0x8e4>
 8009fee:	9b07      	ldr	r3, [sp, #28]
 8009ff0:	9704      	str	r7, [sp, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dc20      	bgt.n	800a038 <_dtoa_r+0x940>
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	dd1e      	ble.n	800a03c <_dtoa_r+0x944>
 8009ffe:	9b00      	ldr	r3, [sp, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f47f aec0 	bne.w	8009d86 <_dtoa_r+0x68e>
 800a006:	4621      	mov	r1, r4
 800a008:	2205      	movs	r2, #5
 800a00a:	4658      	mov	r0, fp
 800a00c:	f000 fafc 	bl	800a608 <__multadd>
 800a010:	4601      	mov	r1, r0
 800a012:	4604      	mov	r4, r0
 800a014:	4648      	mov	r0, r9
 800a016:	f000 fd0f 	bl	800aa38 <__mcmp>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f77f aeb3 	ble.w	8009d86 <_dtoa_r+0x68e>
 800a020:	4656      	mov	r6, sl
 800a022:	2331      	movs	r3, #49	@ 0x31
 800a024:	f806 3b01 	strb.w	r3, [r6], #1
 800a028:	9b04      	ldr	r3, [sp, #16]
 800a02a:	3301      	adds	r3, #1
 800a02c:	9304      	str	r3, [sp, #16]
 800a02e:	e6ae      	b.n	8009d8e <_dtoa_r+0x696>
 800a030:	9c07      	ldr	r4, [sp, #28]
 800a032:	9704      	str	r7, [sp, #16]
 800a034:	4625      	mov	r5, r4
 800a036:	e7f3      	b.n	800a020 <_dtoa_r+0x928>
 800a038:	9b07      	ldr	r3, [sp, #28]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 8104 	beq.w	800a24c <_dtoa_r+0xb54>
 800a044:	2e00      	cmp	r6, #0
 800a046:	dd05      	ble.n	800a054 <_dtoa_r+0x95c>
 800a048:	4629      	mov	r1, r5
 800a04a:	4632      	mov	r2, r6
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 fc87 	bl	800a960 <__lshift>
 800a052:	4605      	mov	r5, r0
 800a054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a056:	2b00      	cmp	r3, #0
 800a058:	d05a      	beq.n	800a110 <_dtoa_r+0xa18>
 800a05a:	6869      	ldr	r1, [r5, #4]
 800a05c:	4658      	mov	r0, fp
 800a05e:	f000 fa71 	bl	800a544 <_Balloc>
 800a062:	4606      	mov	r6, r0
 800a064:	b928      	cbnz	r0, 800a072 <_dtoa_r+0x97a>
 800a066:	4b84      	ldr	r3, [pc, #528]	@ (800a278 <_dtoa_r+0xb80>)
 800a068:	4602      	mov	r2, r0
 800a06a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a06e:	f7ff bb5a 	b.w	8009726 <_dtoa_r+0x2e>
 800a072:	692a      	ldr	r2, [r5, #16]
 800a074:	3202      	adds	r2, #2
 800a076:	0092      	lsls	r2, r2, #2
 800a078:	f105 010c 	add.w	r1, r5, #12
 800a07c:	300c      	adds	r0, #12
 800a07e:	f000 ff95 	bl	800afac <memcpy>
 800a082:	2201      	movs	r2, #1
 800a084:	4631      	mov	r1, r6
 800a086:	4658      	mov	r0, fp
 800a088:	f000 fc6a 	bl	800a960 <__lshift>
 800a08c:	f10a 0301 	add.w	r3, sl, #1
 800a090:	9307      	str	r3, [sp, #28]
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	4453      	add	r3, sl
 800a096:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a098:	9b02      	ldr	r3, [sp, #8]
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	462f      	mov	r7, r5
 800a0a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	9b07      	ldr	r3, [sp, #28]
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	f7ff fa98 	bl	80095e2 <quorem>
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	9002      	str	r0, [sp, #8]
 800a0b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0ba:	4648      	mov	r0, r9
 800a0bc:	f000 fcbc 	bl	800aa38 <__mcmp>
 800a0c0:	462a      	mov	r2, r5
 800a0c2:	9008      	str	r0, [sp, #32]
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f000 fcd2 	bl	800aa70 <__mdiff>
 800a0cc:	68c2      	ldr	r2, [r0, #12]
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	bb02      	cbnz	r2, 800a114 <_dtoa_r+0xa1c>
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4648      	mov	r0, r9
 800a0d6:	f000 fcaf 	bl	800aa38 <__mcmp>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4658      	mov	r0, fp
 800a0e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0e2:	f000 fa6f 	bl	800a5c4 <_Bfree>
 800a0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0ea:	9e07      	ldr	r6, [sp, #28]
 800a0ec:	ea43 0102 	orr.w	r1, r3, r2
 800a0f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0f2:	4319      	orrs	r1, r3
 800a0f4:	d110      	bne.n	800a118 <_dtoa_r+0xa20>
 800a0f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0fa:	d029      	beq.n	800a150 <_dtoa_r+0xa58>
 800a0fc:	9b08      	ldr	r3, [sp, #32]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	dd02      	ble.n	800a108 <_dtoa_r+0xa10>
 800a102:	9b02      	ldr	r3, [sp, #8]
 800a104:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	f883 8000 	strb.w	r8, [r3]
 800a10e:	e63f      	b.n	8009d90 <_dtoa_r+0x698>
 800a110:	4628      	mov	r0, r5
 800a112:	e7bb      	b.n	800a08c <_dtoa_r+0x994>
 800a114:	2201      	movs	r2, #1
 800a116:	e7e1      	b.n	800a0dc <_dtoa_r+0x9e4>
 800a118:	9b08      	ldr	r3, [sp, #32]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	db04      	blt.n	800a128 <_dtoa_r+0xa30>
 800a11e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a120:	430b      	orrs	r3, r1
 800a122:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a124:	430b      	orrs	r3, r1
 800a126:	d120      	bne.n	800a16a <_dtoa_r+0xa72>
 800a128:	2a00      	cmp	r2, #0
 800a12a:	dded      	ble.n	800a108 <_dtoa_r+0xa10>
 800a12c:	4649      	mov	r1, r9
 800a12e:	2201      	movs	r2, #1
 800a130:	4658      	mov	r0, fp
 800a132:	f000 fc15 	bl	800a960 <__lshift>
 800a136:	4621      	mov	r1, r4
 800a138:	4681      	mov	r9, r0
 800a13a:	f000 fc7d 	bl	800aa38 <__mcmp>
 800a13e:	2800      	cmp	r0, #0
 800a140:	dc03      	bgt.n	800a14a <_dtoa_r+0xa52>
 800a142:	d1e1      	bne.n	800a108 <_dtoa_r+0xa10>
 800a144:	f018 0f01 	tst.w	r8, #1
 800a148:	d0de      	beq.n	800a108 <_dtoa_r+0xa10>
 800a14a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a14e:	d1d8      	bne.n	800a102 <_dtoa_r+0xa0a>
 800a150:	9a00      	ldr	r2, [sp, #0]
 800a152:	2339      	movs	r3, #57	@ 0x39
 800a154:	7013      	strb	r3, [r2, #0]
 800a156:	4633      	mov	r3, r6
 800a158:	461e      	mov	r6, r3
 800a15a:	3b01      	subs	r3, #1
 800a15c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a160:	2a39      	cmp	r2, #57	@ 0x39
 800a162:	d052      	beq.n	800a20a <_dtoa_r+0xb12>
 800a164:	3201      	adds	r2, #1
 800a166:	701a      	strb	r2, [r3, #0]
 800a168:	e612      	b.n	8009d90 <_dtoa_r+0x698>
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	dd07      	ble.n	800a17e <_dtoa_r+0xa86>
 800a16e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a172:	d0ed      	beq.n	800a150 <_dtoa_r+0xa58>
 800a174:	9a00      	ldr	r2, [sp, #0]
 800a176:	f108 0301 	add.w	r3, r8, #1
 800a17a:	7013      	strb	r3, [r2, #0]
 800a17c:	e608      	b.n	8009d90 <_dtoa_r+0x698>
 800a17e:	9b07      	ldr	r3, [sp, #28]
 800a180:	9a07      	ldr	r2, [sp, #28]
 800a182:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a188:	4293      	cmp	r3, r2
 800a18a:	d028      	beq.n	800a1de <_dtoa_r+0xae6>
 800a18c:	4649      	mov	r1, r9
 800a18e:	2300      	movs	r3, #0
 800a190:	220a      	movs	r2, #10
 800a192:	4658      	mov	r0, fp
 800a194:	f000 fa38 	bl	800a608 <__multadd>
 800a198:	42af      	cmp	r7, r5
 800a19a:	4681      	mov	r9, r0
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	f04f 020a 	mov.w	r2, #10
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	d107      	bne.n	800a1ba <_dtoa_r+0xac2>
 800a1aa:	f000 fa2d 	bl	800a608 <__multadd>
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	9b07      	ldr	r3, [sp, #28]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	9307      	str	r3, [sp, #28]
 800a1b8:	e774      	b.n	800a0a4 <_dtoa_r+0x9ac>
 800a1ba:	f000 fa25 	bl	800a608 <__multadd>
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	220a      	movs	r2, #10
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f000 fa1e 	bl	800a608 <__multadd>
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	e7f0      	b.n	800a1b2 <_dtoa_r+0xaba>
 800a1d0:	9b00      	ldr	r3, [sp, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bfcc      	ite	gt
 800a1d6:	461e      	movgt	r6, r3
 800a1d8:	2601      	movle	r6, #1
 800a1da:	4456      	add	r6, sl
 800a1dc:	2700      	movs	r7, #0
 800a1de:	4649      	mov	r1, r9
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	4658      	mov	r0, fp
 800a1e4:	f000 fbbc 	bl	800a960 <__lshift>
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4681      	mov	r9, r0
 800a1ec:	f000 fc24 	bl	800aa38 <__mcmp>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	dcb0      	bgt.n	800a156 <_dtoa_r+0xa5e>
 800a1f4:	d102      	bne.n	800a1fc <_dtoa_r+0xb04>
 800a1f6:	f018 0f01 	tst.w	r8, #1
 800a1fa:	d1ac      	bne.n	800a156 <_dtoa_r+0xa5e>
 800a1fc:	4633      	mov	r3, r6
 800a1fe:	461e      	mov	r6, r3
 800a200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a204:	2a30      	cmp	r2, #48	@ 0x30
 800a206:	d0fa      	beq.n	800a1fe <_dtoa_r+0xb06>
 800a208:	e5c2      	b.n	8009d90 <_dtoa_r+0x698>
 800a20a:	459a      	cmp	sl, r3
 800a20c:	d1a4      	bne.n	800a158 <_dtoa_r+0xa60>
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	3301      	adds	r3, #1
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	2331      	movs	r3, #49	@ 0x31
 800a216:	f88a 3000 	strb.w	r3, [sl]
 800a21a:	e5b9      	b.n	8009d90 <_dtoa_r+0x698>
 800a21c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a21e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a27c <_dtoa_r+0xb84>
 800a222:	b11b      	cbz	r3, 800a22c <_dtoa_r+0xb34>
 800a224:	f10a 0308 	add.w	r3, sl, #8
 800a228:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	4650      	mov	r0, sl
 800a22e:	b019      	add	sp, #100	@ 0x64
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a236:	2b01      	cmp	r3, #1
 800a238:	f77f ae37 	ble.w	8009eaa <_dtoa_r+0x7b2>
 800a23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a23e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a240:	2001      	movs	r0, #1
 800a242:	e655      	b.n	8009ef0 <_dtoa_r+0x7f8>
 800a244:	9b00      	ldr	r3, [sp, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f77f aed6 	ble.w	8009ff8 <_dtoa_r+0x900>
 800a24c:	4656      	mov	r6, sl
 800a24e:	4621      	mov	r1, r4
 800a250:	4648      	mov	r0, r9
 800a252:	f7ff f9c6 	bl	80095e2 <quorem>
 800a256:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a25a:	f806 8b01 	strb.w	r8, [r6], #1
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	eba6 020a 	sub.w	r2, r6, sl
 800a264:	4293      	cmp	r3, r2
 800a266:	ddb3      	ble.n	800a1d0 <_dtoa_r+0xad8>
 800a268:	4649      	mov	r1, r9
 800a26a:	2300      	movs	r3, #0
 800a26c:	220a      	movs	r2, #10
 800a26e:	4658      	mov	r0, fp
 800a270:	f000 f9ca 	bl	800a608 <__multadd>
 800a274:	4681      	mov	r9, r0
 800a276:	e7ea      	b.n	800a24e <_dtoa_r+0xb56>
 800a278:	0801e604 	.word	0x0801e604
 800a27c:	0801e588 	.word	0x0801e588

0800a280 <malloc>:
 800a280:	4b02      	ldr	r3, [pc, #8]	@ (800a28c <malloc+0xc>)
 800a282:	4601      	mov	r1, r0
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	f000 b825 	b.w	800a2d4 <_malloc_r>
 800a28a:	bf00      	nop
 800a28c:	2000005c 	.word	0x2000005c

0800a290 <sbrk_aligned>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	4e0f      	ldr	r6, [pc, #60]	@ (800a2d0 <sbrk_aligned+0x40>)
 800a294:	460c      	mov	r4, r1
 800a296:	6831      	ldr	r1, [r6, #0]
 800a298:	4605      	mov	r5, r0
 800a29a:	b911      	cbnz	r1, 800a2a2 <sbrk_aligned+0x12>
 800a29c:	f000 fe64 	bl	800af68 <_sbrk_r>
 800a2a0:	6030      	str	r0, [r6, #0]
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f000 fe5f 	bl	800af68 <_sbrk_r>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	d103      	bne.n	800a2b6 <sbrk_aligned+0x26>
 800a2ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}
 800a2b6:	1cc4      	adds	r4, r0, #3
 800a2b8:	f024 0403 	bic.w	r4, r4, #3
 800a2bc:	42a0      	cmp	r0, r4
 800a2be:	d0f8      	beq.n	800a2b2 <sbrk_aligned+0x22>
 800a2c0:	1a21      	subs	r1, r4, r0
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f000 fe50 	bl	800af68 <_sbrk_r>
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d1f2      	bne.n	800a2b2 <sbrk_aligned+0x22>
 800a2cc:	e7ef      	b.n	800a2ae <sbrk_aligned+0x1e>
 800a2ce:	bf00      	nop
 800a2d0:	2000191c 	.word	0x2000191c

0800a2d4 <_malloc_r>:
 800a2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d8:	1ccd      	adds	r5, r1, #3
 800a2da:	f025 0503 	bic.w	r5, r5, #3
 800a2de:	3508      	adds	r5, #8
 800a2e0:	2d0c      	cmp	r5, #12
 800a2e2:	bf38      	it	cc
 800a2e4:	250c      	movcc	r5, #12
 800a2e6:	2d00      	cmp	r5, #0
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	db01      	blt.n	800a2f0 <_malloc_r+0x1c>
 800a2ec:	42a9      	cmp	r1, r5
 800a2ee:	d904      	bls.n	800a2fa <_malloc_r+0x26>
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	6033      	str	r3, [r6, #0]
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3d0 <_malloc_r+0xfc>
 800a2fe:	f000 f915 	bl	800a52c <__malloc_lock>
 800a302:	f8d8 3000 	ldr.w	r3, [r8]
 800a306:	461c      	mov	r4, r3
 800a308:	bb44      	cbnz	r4, 800a35c <_malloc_r+0x88>
 800a30a:	4629      	mov	r1, r5
 800a30c:	4630      	mov	r0, r6
 800a30e:	f7ff ffbf 	bl	800a290 <sbrk_aligned>
 800a312:	1c43      	adds	r3, r0, #1
 800a314:	4604      	mov	r4, r0
 800a316:	d158      	bne.n	800a3ca <_malloc_r+0xf6>
 800a318:	f8d8 4000 	ldr.w	r4, [r8]
 800a31c:	4627      	mov	r7, r4
 800a31e:	2f00      	cmp	r7, #0
 800a320:	d143      	bne.n	800a3aa <_malloc_r+0xd6>
 800a322:	2c00      	cmp	r4, #0
 800a324:	d04b      	beq.n	800a3be <_malloc_r+0xea>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	4639      	mov	r1, r7
 800a32a:	4630      	mov	r0, r6
 800a32c:	eb04 0903 	add.w	r9, r4, r3
 800a330:	f000 fe1a 	bl	800af68 <_sbrk_r>
 800a334:	4581      	cmp	r9, r0
 800a336:	d142      	bne.n	800a3be <_malloc_r+0xea>
 800a338:	6821      	ldr	r1, [r4, #0]
 800a33a:	1a6d      	subs	r5, r5, r1
 800a33c:	4629      	mov	r1, r5
 800a33e:	4630      	mov	r0, r6
 800a340:	f7ff ffa6 	bl	800a290 <sbrk_aligned>
 800a344:	3001      	adds	r0, #1
 800a346:	d03a      	beq.n	800a3be <_malloc_r+0xea>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	442b      	add	r3, r5
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	f8d8 3000 	ldr.w	r3, [r8]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	bb62      	cbnz	r2, 800a3b0 <_malloc_r+0xdc>
 800a356:	f8c8 7000 	str.w	r7, [r8]
 800a35a:	e00f      	b.n	800a37c <_malloc_r+0xa8>
 800a35c:	6822      	ldr	r2, [r4, #0]
 800a35e:	1b52      	subs	r2, r2, r5
 800a360:	d420      	bmi.n	800a3a4 <_malloc_r+0xd0>
 800a362:	2a0b      	cmp	r2, #11
 800a364:	d917      	bls.n	800a396 <_malloc_r+0xc2>
 800a366:	1961      	adds	r1, r4, r5
 800a368:	42a3      	cmp	r3, r4
 800a36a:	6025      	str	r5, [r4, #0]
 800a36c:	bf18      	it	ne
 800a36e:	6059      	strne	r1, [r3, #4]
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	bf08      	it	eq
 800a374:	f8c8 1000 	streq.w	r1, [r8]
 800a378:	5162      	str	r2, [r4, r5]
 800a37a:	604b      	str	r3, [r1, #4]
 800a37c:	4630      	mov	r0, r6
 800a37e:	f000 f8db 	bl	800a538 <__malloc_unlock>
 800a382:	f104 000b 	add.w	r0, r4, #11
 800a386:	1d23      	adds	r3, r4, #4
 800a388:	f020 0007 	bic.w	r0, r0, #7
 800a38c:	1ac2      	subs	r2, r0, r3
 800a38e:	bf1c      	itt	ne
 800a390:	1a1b      	subne	r3, r3, r0
 800a392:	50a3      	strne	r3, [r4, r2]
 800a394:	e7af      	b.n	800a2f6 <_malloc_r+0x22>
 800a396:	6862      	ldr	r2, [r4, #4]
 800a398:	42a3      	cmp	r3, r4
 800a39a:	bf0c      	ite	eq
 800a39c:	f8c8 2000 	streq.w	r2, [r8]
 800a3a0:	605a      	strne	r2, [r3, #4]
 800a3a2:	e7eb      	b.n	800a37c <_malloc_r+0xa8>
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	6864      	ldr	r4, [r4, #4]
 800a3a8:	e7ae      	b.n	800a308 <_malloc_r+0x34>
 800a3aa:	463c      	mov	r4, r7
 800a3ac:	687f      	ldr	r7, [r7, #4]
 800a3ae:	e7b6      	b.n	800a31e <_malloc_r+0x4a>
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	d1fb      	bne.n	800a3b0 <_malloc_r+0xdc>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	6053      	str	r3, [r2, #4]
 800a3bc:	e7de      	b.n	800a37c <_malloc_r+0xa8>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	6033      	str	r3, [r6, #0]
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f000 f8b8 	bl	800a538 <__malloc_unlock>
 800a3c8:	e794      	b.n	800a2f4 <_malloc_r+0x20>
 800a3ca:	6005      	str	r5, [r0, #0]
 800a3cc:	e7d6      	b.n	800a37c <_malloc_r+0xa8>
 800a3ce:	bf00      	nop
 800a3d0:	20001920 	.word	0x20001920

0800a3d4 <__sflush_r>:
 800a3d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3dc:	0716      	lsls	r6, r2, #28
 800a3de:	4605      	mov	r5, r0
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	d454      	bmi.n	800a48e <__sflush_r+0xba>
 800a3e4:	684b      	ldr	r3, [r1, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	dc02      	bgt.n	800a3f0 <__sflush_r+0x1c>
 800a3ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dd48      	ble.n	800a482 <__sflush_r+0xae>
 800a3f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3f2:	2e00      	cmp	r6, #0
 800a3f4:	d045      	beq.n	800a482 <__sflush_r+0xae>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3fc:	682f      	ldr	r7, [r5, #0]
 800a3fe:	6a21      	ldr	r1, [r4, #32]
 800a400:	602b      	str	r3, [r5, #0]
 800a402:	d030      	beq.n	800a466 <__sflush_r+0x92>
 800a404:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	0759      	lsls	r1, r3, #29
 800a40a:	d505      	bpl.n	800a418 <__sflush_r+0x44>
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	1ad2      	subs	r2, r2, r3
 800a410:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a412:	b10b      	cbz	r3, 800a418 <__sflush_r+0x44>
 800a414:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a416:	1ad2      	subs	r2, r2, r3
 800a418:	2300      	movs	r3, #0
 800a41a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a41c:	6a21      	ldr	r1, [r4, #32]
 800a41e:	4628      	mov	r0, r5
 800a420:	47b0      	blx	r6
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	d106      	bne.n	800a436 <__sflush_r+0x62>
 800a428:	6829      	ldr	r1, [r5, #0]
 800a42a:	291d      	cmp	r1, #29
 800a42c:	d82b      	bhi.n	800a486 <__sflush_r+0xb2>
 800a42e:	4a2a      	ldr	r2, [pc, #168]	@ (800a4d8 <__sflush_r+0x104>)
 800a430:	410a      	asrs	r2, r1
 800a432:	07d6      	lsls	r6, r2, #31
 800a434:	d427      	bmi.n	800a486 <__sflush_r+0xb2>
 800a436:	2200      	movs	r2, #0
 800a438:	6062      	str	r2, [r4, #4]
 800a43a:	04d9      	lsls	r1, r3, #19
 800a43c:	6922      	ldr	r2, [r4, #16]
 800a43e:	6022      	str	r2, [r4, #0]
 800a440:	d504      	bpl.n	800a44c <__sflush_r+0x78>
 800a442:	1c42      	adds	r2, r0, #1
 800a444:	d101      	bne.n	800a44a <__sflush_r+0x76>
 800a446:	682b      	ldr	r3, [r5, #0]
 800a448:	b903      	cbnz	r3, 800a44c <__sflush_r+0x78>
 800a44a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a44c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a44e:	602f      	str	r7, [r5, #0]
 800a450:	b1b9      	cbz	r1, 800a482 <__sflush_r+0xae>
 800a452:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a456:	4299      	cmp	r1, r3
 800a458:	d002      	beq.n	800a460 <__sflush_r+0x8c>
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 fde6 	bl	800b02c <_free_r>
 800a460:	2300      	movs	r3, #0
 800a462:	6363      	str	r3, [r4, #52]	@ 0x34
 800a464:	e00d      	b.n	800a482 <__sflush_r+0xae>
 800a466:	2301      	movs	r3, #1
 800a468:	4628      	mov	r0, r5
 800a46a:	47b0      	blx	r6
 800a46c:	4602      	mov	r2, r0
 800a46e:	1c50      	adds	r0, r2, #1
 800a470:	d1c9      	bne.n	800a406 <__sflush_r+0x32>
 800a472:	682b      	ldr	r3, [r5, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0c6      	beq.n	800a406 <__sflush_r+0x32>
 800a478:	2b1d      	cmp	r3, #29
 800a47a:	d001      	beq.n	800a480 <__sflush_r+0xac>
 800a47c:	2b16      	cmp	r3, #22
 800a47e:	d11e      	bne.n	800a4be <__sflush_r+0xea>
 800a480:	602f      	str	r7, [r5, #0]
 800a482:	2000      	movs	r0, #0
 800a484:	e022      	b.n	800a4cc <__sflush_r+0xf8>
 800a486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a48a:	b21b      	sxth	r3, r3
 800a48c:	e01b      	b.n	800a4c6 <__sflush_r+0xf2>
 800a48e:	690f      	ldr	r7, [r1, #16]
 800a490:	2f00      	cmp	r7, #0
 800a492:	d0f6      	beq.n	800a482 <__sflush_r+0xae>
 800a494:	0793      	lsls	r3, r2, #30
 800a496:	680e      	ldr	r6, [r1, #0]
 800a498:	bf08      	it	eq
 800a49a:	694b      	ldreq	r3, [r1, #20]
 800a49c:	600f      	str	r7, [r1, #0]
 800a49e:	bf18      	it	ne
 800a4a0:	2300      	movne	r3, #0
 800a4a2:	eba6 0807 	sub.w	r8, r6, r7
 800a4a6:	608b      	str	r3, [r1, #8]
 800a4a8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ac:	dde9      	ble.n	800a482 <__sflush_r+0xae>
 800a4ae:	6a21      	ldr	r1, [r4, #32]
 800a4b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4b2:	4643      	mov	r3, r8
 800a4b4:	463a      	mov	r2, r7
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b0      	blx	r6
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	dc08      	bgt.n	800a4d0 <__sflush_r+0xfc>
 800a4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c6:	81a3      	strh	r3, [r4, #12]
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d0:	4407      	add	r7, r0
 800a4d2:	eba8 0800 	sub.w	r8, r8, r0
 800a4d6:	e7e7      	b.n	800a4a8 <__sflush_r+0xd4>
 800a4d8:	dfbffffe 	.word	0xdfbffffe

0800a4dc <_fflush_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	690b      	ldr	r3, [r1, #16]
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	b913      	cbnz	r3, 800a4ec <_fflush_r+0x10>
 800a4e6:	2500      	movs	r5, #0
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	b118      	cbz	r0, 800a4f6 <_fflush_r+0x1a>
 800a4ee:	6a03      	ldr	r3, [r0, #32]
 800a4f0:	b90b      	cbnz	r3, 800a4f6 <_fflush_r+0x1a>
 800a4f2:	f7fe ffa9 	bl	8009448 <__sinit>
 800a4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0f3      	beq.n	800a4e6 <_fflush_r+0xa>
 800a4fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a500:	07d0      	lsls	r0, r2, #31
 800a502:	d404      	bmi.n	800a50e <_fflush_r+0x32>
 800a504:	0599      	lsls	r1, r3, #22
 800a506:	d402      	bmi.n	800a50e <_fflush_r+0x32>
 800a508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a50a:	f7ff f868 	bl	80095de <__retarget_lock_acquire_recursive>
 800a50e:	4628      	mov	r0, r5
 800a510:	4621      	mov	r1, r4
 800a512:	f7ff ff5f 	bl	800a3d4 <__sflush_r>
 800a516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a518:	07da      	lsls	r2, r3, #31
 800a51a:	4605      	mov	r5, r0
 800a51c:	d4e4      	bmi.n	800a4e8 <_fflush_r+0xc>
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	059b      	lsls	r3, r3, #22
 800a522:	d4e1      	bmi.n	800a4e8 <_fflush_r+0xc>
 800a524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a526:	f7ff f85b 	bl	80095e0 <__retarget_lock_release_recursive>
 800a52a:	e7dd      	b.n	800a4e8 <_fflush_r+0xc>

0800a52c <__malloc_lock>:
 800a52c:	4801      	ldr	r0, [pc, #4]	@ (800a534 <__malloc_lock+0x8>)
 800a52e:	f7ff b856 	b.w	80095de <__retarget_lock_acquire_recursive>
 800a532:	bf00      	nop
 800a534:	20001918 	.word	0x20001918

0800a538 <__malloc_unlock>:
 800a538:	4801      	ldr	r0, [pc, #4]	@ (800a540 <__malloc_unlock+0x8>)
 800a53a:	f7ff b851 	b.w	80095e0 <__retarget_lock_release_recursive>
 800a53e:	bf00      	nop
 800a540:	20001918 	.word	0x20001918

0800a544 <_Balloc>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	69c6      	ldr	r6, [r0, #28]
 800a548:	4604      	mov	r4, r0
 800a54a:	460d      	mov	r5, r1
 800a54c:	b976      	cbnz	r6, 800a56c <_Balloc+0x28>
 800a54e:	2010      	movs	r0, #16
 800a550:	f7ff fe96 	bl	800a280 <malloc>
 800a554:	4602      	mov	r2, r0
 800a556:	61e0      	str	r0, [r4, #28]
 800a558:	b920      	cbnz	r0, 800a564 <_Balloc+0x20>
 800a55a:	4b18      	ldr	r3, [pc, #96]	@ (800a5bc <_Balloc+0x78>)
 800a55c:	4818      	ldr	r0, [pc, #96]	@ (800a5c0 <_Balloc+0x7c>)
 800a55e:	216b      	movs	r1, #107	@ 0x6b
 800a560:	f000 fd32 	bl	800afc8 <__assert_func>
 800a564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a568:	6006      	str	r6, [r0, #0]
 800a56a:	60c6      	str	r6, [r0, #12]
 800a56c:	69e6      	ldr	r6, [r4, #28]
 800a56e:	68f3      	ldr	r3, [r6, #12]
 800a570:	b183      	cbz	r3, 800a594 <_Balloc+0x50>
 800a572:	69e3      	ldr	r3, [r4, #28]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a57a:	b9b8      	cbnz	r0, 800a5ac <_Balloc+0x68>
 800a57c:	2101      	movs	r1, #1
 800a57e:	fa01 f605 	lsl.w	r6, r1, r5
 800a582:	1d72      	adds	r2, r6, #5
 800a584:	0092      	lsls	r2, r2, #2
 800a586:	4620      	mov	r0, r4
 800a588:	f000 fd3c 	bl	800b004 <_calloc_r>
 800a58c:	b160      	cbz	r0, 800a5a8 <_Balloc+0x64>
 800a58e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a592:	e00e      	b.n	800a5b2 <_Balloc+0x6e>
 800a594:	2221      	movs	r2, #33	@ 0x21
 800a596:	2104      	movs	r1, #4
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 fd33 	bl	800b004 <_calloc_r>
 800a59e:	69e3      	ldr	r3, [r4, #28]
 800a5a0:	60f0      	str	r0, [r6, #12]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e4      	bne.n	800a572 <_Balloc+0x2e>
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}
 800a5ac:	6802      	ldr	r2, [r0, #0]
 800a5ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5b8:	e7f7      	b.n	800a5aa <_Balloc+0x66>
 800a5ba:	bf00      	nop
 800a5bc:	0801e595 	.word	0x0801e595
 800a5c0:	0801e615 	.word	0x0801e615

0800a5c4 <_Bfree>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	69c6      	ldr	r6, [r0, #28]
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	b976      	cbnz	r6, 800a5ec <_Bfree+0x28>
 800a5ce:	2010      	movs	r0, #16
 800a5d0:	f7ff fe56 	bl	800a280 <malloc>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	61e8      	str	r0, [r5, #28]
 800a5d8:	b920      	cbnz	r0, 800a5e4 <_Bfree+0x20>
 800a5da:	4b09      	ldr	r3, [pc, #36]	@ (800a600 <_Bfree+0x3c>)
 800a5dc:	4809      	ldr	r0, [pc, #36]	@ (800a604 <_Bfree+0x40>)
 800a5de:	218f      	movs	r1, #143	@ 0x8f
 800a5e0:	f000 fcf2 	bl	800afc8 <__assert_func>
 800a5e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5e8:	6006      	str	r6, [r0, #0]
 800a5ea:	60c6      	str	r6, [r0, #12]
 800a5ec:	b13c      	cbz	r4, 800a5fe <_Bfree+0x3a>
 800a5ee:	69eb      	ldr	r3, [r5, #28]
 800a5f0:	6862      	ldr	r2, [r4, #4]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5f8:	6021      	str	r1, [r4, #0]
 800a5fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	0801e595 	.word	0x0801e595
 800a604:	0801e615 	.word	0x0801e615

0800a608 <__multadd>:
 800a608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60c:	690d      	ldr	r5, [r1, #16]
 800a60e:	4607      	mov	r7, r0
 800a610:	460c      	mov	r4, r1
 800a612:	461e      	mov	r6, r3
 800a614:	f101 0c14 	add.w	ip, r1, #20
 800a618:	2000      	movs	r0, #0
 800a61a:	f8dc 3000 	ldr.w	r3, [ip]
 800a61e:	b299      	uxth	r1, r3
 800a620:	fb02 6101 	mla	r1, r2, r1, r6
 800a624:	0c1e      	lsrs	r6, r3, #16
 800a626:	0c0b      	lsrs	r3, r1, #16
 800a628:	fb02 3306 	mla	r3, r2, r6, r3
 800a62c:	b289      	uxth	r1, r1
 800a62e:	3001      	adds	r0, #1
 800a630:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a634:	4285      	cmp	r5, r0
 800a636:	f84c 1b04 	str.w	r1, [ip], #4
 800a63a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a63e:	dcec      	bgt.n	800a61a <__multadd+0x12>
 800a640:	b30e      	cbz	r6, 800a686 <__multadd+0x7e>
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	42ab      	cmp	r3, r5
 800a646:	dc19      	bgt.n	800a67c <__multadd+0x74>
 800a648:	6861      	ldr	r1, [r4, #4]
 800a64a:	4638      	mov	r0, r7
 800a64c:	3101      	adds	r1, #1
 800a64e:	f7ff ff79 	bl	800a544 <_Balloc>
 800a652:	4680      	mov	r8, r0
 800a654:	b928      	cbnz	r0, 800a662 <__multadd+0x5a>
 800a656:	4602      	mov	r2, r0
 800a658:	4b0c      	ldr	r3, [pc, #48]	@ (800a68c <__multadd+0x84>)
 800a65a:	480d      	ldr	r0, [pc, #52]	@ (800a690 <__multadd+0x88>)
 800a65c:	21ba      	movs	r1, #186	@ 0xba
 800a65e:	f000 fcb3 	bl	800afc8 <__assert_func>
 800a662:	6922      	ldr	r2, [r4, #16]
 800a664:	3202      	adds	r2, #2
 800a666:	f104 010c 	add.w	r1, r4, #12
 800a66a:	0092      	lsls	r2, r2, #2
 800a66c:	300c      	adds	r0, #12
 800a66e:	f000 fc9d 	bl	800afac <memcpy>
 800a672:	4621      	mov	r1, r4
 800a674:	4638      	mov	r0, r7
 800a676:	f7ff ffa5 	bl	800a5c4 <_Bfree>
 800a67a:	4644      	mov	r4, r8
 800a67c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a680:	3501      	adds	r5, #1
 800a682:	615e      	str	r6, [r3, #20]
 800a684:	6125      	str	r5, [r4, #16]
 800a686:	4620      	mov	r0, r4
 800a688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a68c:	0801e604 	.word	0x0801e604
 800a690:	0801e615 	.word	0x0801e615

0800a694 <__hi0bits>:
 800a694:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a698:	4603      	mov	r3, r0
 800a69a:	bf36      	itet	cc
 800a69c:	0403      	lslcc	r3, r0, #16
 800a69e:	2000      	movcs	r0, #0
 800a6a0:	2010      	movcc	r0, #16
 800a6a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6a6:	bf3c      	itt	cc
 800a6a8:	021b      	lslcc	r3, r3, #8
 800a6aa:	3008      	addcc	r0, #8
 800a6ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6b0:	bf3c      	itt	cc
 800a6b2:	011b      	lslcc	r3, r3, #4
 800a6b4:	3004      	addcc	r0, #4
 800a6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ba:	bf3c      	itt	cc
 800a6bc:	009b      	lslcc	r3, r3, #2
 800a6be:	3002      	addcc	r0, #2
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	db05      	blt.n	800a6d0 <__hi0bits+0x3c>
 800a6c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6c8:	f100 0001 	add.w	r0, r0, #1
 800a6cc:	bf08      	it	eq
 800a6ce:	2020      	moveq	r0, #32
 800a6d0:	4770      	bx	lr

0800a6d2 <__lo0bits>:
 800a6d2:	6803      	ldr	r3, [r0, #0]
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	f013 0007 	ands.w	r0, r3, #7
 800a6da:	d00b      	beq.n	800a6f4 <__lo0bits+0x22>
 800a6dc:	07d9      	lsls	r1, r3, #31
 800a6de:	d421      	bmi.n	800a724 <__lo0bits+0x52>
 800a6e0:	0798      	lsls	r0, r3, #30
 800a6e2:	bf49      	itett	mi
 800a6e4:	085b      	lsrmi	r3, r3, #1
 800a6e6:	089b      	lsrpl	r3, r3, #2
 800a6e8:	2001      	movmi	r0, #1
 800a6ea:	6013      	strmi	r3, [r2, #0]
 800a6ec:	bf5c      	itt	pl
 800a6ee:	6013      	strpl	r3, [r2, #0]
 800a6f0:	2002      	movpl	r0, #2
 800a6f2:	4770      	bx	lr
 800a6f4:	b299      	uxth	r1, r3
 800a6f6:	b909      	cbnz	r1, 800a6fc <__lo0bits+0x2a>
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	2010      	movs	r0, #16
 800a6fc:	b2d9      	uxtb	r1, r3
 800a6fe:	b909      	cbnz	r1, 800a704 <__lo0bits+0x32>
 800a700:	3008      	adds	r0, #8
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	0719      	lsls	r1, r3, #28
 800a706:	bf04      	itt	eq
 800a708:	091b      	lsreq	r3, r3, #4
 800a70a:	3004      	addeq	r0, #4
 800a70c:	0799      	lsls	r1, r3, #30
 800a70e:	bf04      	itt	eq
 800a710:	089b      	lsreq	r3, r3, #2
 800a712:	3002      	addeq	r0, #2
 800a714:	07d9      	lsls	r1, r3, #31
 800a716:	d403      	bmi.n	800a720 <__lo0bits+0x4e>
 800a718:	085b      	lsrs	r3, r3, #1
 800a71a:	f100 0001 	add.w	r0, r0, #1
 800a71e:	d003      	beq.n	800a728 <__lo0bits+0x56>
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	4770      	bx	lr
 800a724:	2000      	movs	r0, #0
 800a726:	4770      	bx	lr
 800a728:	2020      	movs	r0, #32
 800a72a:	4770      	bx	lr

0800a72c <__i2b>:
 800a72c:	b510      	push	{r4, lr}
 800a72e:	460c      	mov	r4, r1
 800a730:	2101      	movs	r1, #1
 800a732:	f7ff ff07 	bl	800a544 <_Balloc>
 800a736:	4602      	mov	r2, r0
 800a738:	b928      	cbnz	r0, 800a746 <__i2b+0x1a>
 800a73a:	4b05      	ldr	r3, [pc, #20]	@ (800a750 <__i2b+0x24>)
 800a73c:	4805      	ldr	r0, [pc, #20]	@ (800a754 <__i2b+0x28>)
 800a73e:	f240 1145 	movw	r1, #325	@ 0x145
 800a742:	f000 fc41 	bl	800afc8 <__assert_func>
 800a746:	2301      	movs	r3, #1
 800a748:	6144      	str	r4, [r0, #20]
 800a74a:	6103      	str	r3, [r0, #16]
 800a74c:	bd10      	pop	{r4, pc}
 800a74e:	bf00      	nop
 800a750:	0801e604 	.word	0x0801e604
 800a754:	0801e615 	.word	0x0801e615

0800a758 <__multiply>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	4614      	mov	r4, r2
 800a75e:	690a      	ldr	r2, [r1, #16]
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	429a      	cmp	r2, r3
 800a764:	bfa8      	it	ge
 800a766:	4623      	movge	r3, r4
 800a768:	460f      	mov	r7, r1
 800a76a:	bfa4      	itt	ge
 800a76c:	460c      	movge	r4, r1
 800a76e:	461f      	movge	r7, r3
 800a770:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a774:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a778:	68a3      	ldr	r3, [r4, #8]
 800a77a:	6861      	ldr	r1, [r4, #4]
 800a77c:	eb0a 0609 	add.w	r6, sl, r9
 800a780:	42b3      	cmp	r3, r6
 800a782:	b085      	sub	sp, #20
 800a784:	bfb8      	it	lt
 800a786:	3101      	addlt	r1, #1
 800a788:	f7ff fedc 	bl	800a544 <_Balloc>
 800a78c:	b930      	cbnz	r0, 800a79c <__multiply+0x44>
 800a78e:	4602      	mov	r2, r0
 800a790:	4b44      	ldr	r3, [pc, #272]	@ (800a8a4 <__multiply+0x14c>)
 800a792:	4845      	ldr	r0, [pc, #276]	@ (800a8a8 <__multiply+0x150>)
 800a794:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a798:	f000 fc16 	bl	800afc8 <__assert_func>
 800a79c:	f100 0514 	add.w	r5, r0, #20
 800a7a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7a4:	462b      	mov	r3, r5
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	4543      	cmp	r3, r8
 800a7aa:	d321      	bcc.n	800a7f0 <__multiply+0x98>
 800a7ac:	f107 0114 	add.w	r1, r7, #20
 800a7b0:	f104 0214 	add.w	r2, r4, #20
 800a7b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a7b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a7bc:	9302      	str	r3, [sp, #8]
 800a7be:	1b13      	subs	r3, r2, r4
 800a7c0:	3b15      	subs	r3, #21
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	f104 0715 	add.w	r7, r4, #21
 800a7cc:	42ba      	cmp	r2, r7
 800a7ce:	bf38      	it	cc
 800a7d0:	2304      	movcc	r3, #4
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	9b02      	ldr	r3, [sp, #8]
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	428b      	cmp	r3, r1
 800a7da:	d80c      	bhi.n	800a7f6 <__multiply+0x9e>
 800a7dc:	2e00      	cmp	r6, #0
 800a7de:	dd03      	ble.n	800a7e8 <__multiply+0x90>
 800a7e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d05b      	beq.n	800a8a0 <__multiply+0x148>
 800a7e8:	6106      	str	r6, [r0, #16]
 800a7ea:	b005      	add	sp, #20
 800a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f0:	f843 2b04 	str.w	r2, [r3], #4
 800a7f4:	e7d8      	b.n	800a7a8 <__multiply+0x50>
 800a7f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7fa:	f1ba 0f00 	cmp.w	sl, #0
 800a7fe:	d024      	beq.n	800a84a <__multiply+0xf2>
 800a800:	f104 0e14 	add.w	lr, r4, #20
 800a804:	46a9      	mov	r9, r5
 800a806:	f04f 0c00 	mov.w	ip, #0
 800a80a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a80e:	f8d9 3000 	ldr.w	r3, [r9]
 800a812:	fa1f fb87 	uxth.w	fp, r7
 800a816:	b29b      	uxth	r3, r3
 800a818:	fb0a 330b 	mla	r3, sl, fp, r3
 800a81c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a820:	f8d9 7000 	ldr.w	r7, [r9]
 800a824:	4463      	add	r3, ip
 800a826:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a82a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a82e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a832:	b29b      	uxth	r3, r3
 800a834:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a838:	4572      	cmp	r2, lr
 800a83a:	f849 3b04 	str.w	r3, [r9], #4
 800a83e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a842:	d8e2      	bhi.n	800a80a <__multiply+0xb2>
 800a844:	9b01      	ldr	r3, [sp, #4]
 800a846:	f845 c003 	str.w	ip, [r5, r3]
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a850:	3104      	adds	r1, #4
 800a852:	f1b9 0f00 	cmp.w	r9, #0
 800a856:	d021      	beq.n	800a89c <__multiply+0x144>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	f104 0c14 	add.w	ip, r4, #20
 800a85e:	46ae      	mov	lr, r5
 800a860:	f04f 0a00 	mov.w	sl, #0
 800a864:	f8bc b000 	ldrh.w	fp, [ip]
 800a868:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a86c:	fb09 770b 	mla	r7, r9, fp, r7
 800a870:	4457      	add	r7, sl
 800a872:	b29b      	uxth	r3, r3
 800a874:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a878:	f84e 3b04 	str.w	r3, [lr], #4
 800a87c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a884:	f8be 3000 	ldrh.w	r3, [lr]
 800a888:	fb09 330a 	mla	r3, r9, sl, r3
 800a88c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a890:	4562      	cmp	r2, ip
 800a892:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a896:	d8e5      	bhi.n	800a864 <__multiply+0x10c>
 800a898:	9f01      	ldr	r7, [sp, #4]
 800a89a:	51eb      	str	r3, [r5, r7]
 800a89c:	3504      	adds	r5, #4
 800a89e:	e799      	b.n	800a7d4 <__multiply+0x7c>
 800a8a0:	3e01      	subs	r6, #1
 800a8a2:	e79b      	b.n	800a7dc <__multiply+0x84>
 800a8a4:	0801e604 	.word	0x0801e604
 800a8a8:	0801e615 	.word	0x0801e615

0800a8ac <__pow5mult>:
 800a8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b0:	4615      	mov	r5, r2
 800a8b2:	f012 0203 	ands.w	r2, r2, #3
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	460e      	mov	r6, r1
 800a8ba:	d007      	beq.n	800a8cc <__pow5mult+0x20>
 800a8bc:	4c25      	ldr	r4, [pc, #148]	@ (800a954 <__pow5mult+0xa8>)
 800a8be:	3a01      	subs	r2, #1
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8c6:	f7ff fe9f 	bl	800a608 <__multadd>
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	10ad      	asrs	r5, r5, #2
 800a8ce:	d03d      	beq.n	800a94c <__pow5mult+0xa0>
 800a8d0:	69fc      	ldr	r4, [r7, #28]
 800a8d2:	b97c      	cbnz	r4, 800a8f4 <__pow5mult+0x48>
 800a8d4:	2010      	movs	r0, #16
 800a8d6:	f7ff fcd3 	bl	800a280 <malloc>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	61f8      	str	r0, [r7, #28]
 800a8de:	b928      	cbnz	r0, 800a8ec <__pow5mult+0x40>
 800a8e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a958 <__pow5mult+0xac>)
 800a8e2:	481e      	ldr	r0, [pc, #120]	@ (800a95c <__pow5mult+0xb0>)
 800a8e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8e8:	f000 fb6e 	bl	800afc8 <__assert_func>
 800a8ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8f0:	6004      	str	r4, [r0, #0]
 800a8f2:	60c4      	str	r4, [r0, #12]
 800a8f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8fc:	b94c      	cbnz	r4, 800a912 <__pow5mult+0x66>
 800a8fe:	f240 2171 	movw	r1, #625	@ 0x271
 800a902:	4638      	mov	r0, r7
 800a904:	f7ff ff12 	bl	800a72c <__i2b>
 800a908:	2300      	movs	r3, #0
 800a90a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a90e:	4604      	mov	r4, r0
 800a910:	6003      	str	r3, [r0, #0]
 800a912:	f04f 0900 	mov.w	r9, #0
 800a916:	07eb      	lsls	r3, r5, #31
 800a918:	d50a      	bpl.n	800a930 <__pow5mult+0x84>
 800a91a:	4631      	mov	r1, r6
 800a91c:	4622      	mov	r2, r4
 800a91e:	4638      	mov	r0, r7
 800a920:	f7ff ff1a 	bl	800a758 <__multiply>
 800a924:	4631      	mov	r1, r6
 800a926:	4680      	mov	r8, r0
 800a928:	4638      	mov	r0, r7
 800a92a:	f7ff fe4b 	bl	800a5c4 <_Bfree>
 800a92e:	4646      	mov	r6, r8
 800a930:	106d      	asrs	r5, r5, #1
 800a932:	d00b      	beq.n	800a94c <__pow5mult+0xa0>
 800a934:	6820      	ldr	r0, [r4, #0]
 800a936:	b938      	cbnz	r0, 800a948 <__pow5mult+0x9c>
 800a938:	4622      	mov	r2, r4
 800a93a:	4621      	mov	r1, r4
 800a93c:	4638      	mov	r0, r7
 800a93e:	f7ff ff0b 	bl	800a758 <__multiply>
 800a942:	6020      	str	r0, [r4, #0]
 800a944:	f8c0 9000 	str.w	r9, [r0]
 800a948:	4604      	mov	r4, r0
 800a94a:	e7e4      	b.n	800a916 <__pow5mult+0x6a>
 800a94c:	4630      	mov	r0, r6
 800a94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a952:	bf00      	nop
 800a954:	0801e670 	.word	0x0801e670
 800a958:	0801e595 	.word	0x0801e595
 800a95c:	0801e615 	.word	0x0801e615

0800a960 <__lshift>:
 800a960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a964:	460c      	mov	r4, r1
 800a966:	6849      	ldr	r1, [r1, #4]
 800a968:	6923      	ldr	r3, [r4, #16]
 800a96a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a96e:	68a3      	ldr	r3, [r4, #8]
 800a970:	4607      	mov	r7, r0
 800a972:	4691      	mov	r9, r2
 800a974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a978:	f108 0601 	add.w	r6, r8, #1
 800a97c:	42b3      	cmp	r3, r6
 800a97e:	db0b      	blt.n	800a998 <__lshift+0x38>
 800a980:	4638      	mov	r0, r7
 800a982:	f7ff fddf 	bl	800a544 <_Balloc>
 800a986:	4605      	mov	r5, r0
 800a988:	b948      	cbnz	r0, 800a99e <__lshift+0x3e>
 800a98a:	4602      	mov	r2, r0
 800a98c:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <__lshift+0xd0>)
 800a98e:	4829      	ldr	r0, [pc, #164]	@ (800aa34 <__lshift+0xd4>)
 800a990:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a994:	f000 fb18 	bl	800afc8 <__assert_func>
 800a998:	3101      	adds	r1, #1
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	e7ee      	b.n	800a97c <__lshift+0x1c>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f100 0114 	add.w	r1, r0, #20
 800a9a4:	f100 0210 	add.w	r2, r0, #16
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	4553      	cmp	r3, sl
 800a9ac:	db33      	blt.n	800aa16 <__lshift+0xb6>
 800a9ae:	6920      	ldr	r0, [r4, #16]
 800a9b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9b4:	f104 0314 	add.w	r3, r4, #20
 800a9b8:	f019 091f 	ands.w	r9, r9, #31
 800a9bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9c4:	d02b      	beq.n	800aa1e <__lshift+0xbe>
 800a9c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9ca:	468a      	mov	sl, r1
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	fa00 f009 	lsl.w	r0, r0, r9
 800a9d4:	4310      	orrs	r0, r2
 800a9d6:	f84a 0b04 	str.w	r0, [sl], #4
 800a9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9de:	459c      	cmp	ip, r3
 800a9e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9e4:	d8f3      	bhi.n	800a9ce <__lshift+0x6e>
 800a9e6:	ebac 0304 	sub.w	r3, ip, r4
 800a9ea:	3b15      	subs	r3, #21
 800a9ec:	f023 0303 	bic.w	r3, r3, #3
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	f104 0015 	add.w	r0, r4, #21
 800a9f6:	4584      	cmp	ip, r0
 800a9f8:	bf38      	it	cc
 800a9fa:	2304      	movcc	r3, #4
 800a9fc:	50ca      	str	r2, [r1, r3]
 800a9fe:	b10a      	cbz	r2, 800aa04 <__lshift+0xa4>
 800aa00:	f108 0602 	add.w	r6, r8, #2
 800aa04:	3e01      	subs	r6, #1
 800aa06:	4638      	mov	r0, r7
 800aa08:	612e      	str	r6, [r5, #16]
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	f7ff fdda 	bl	800a5c4 <_Bfree>
 800aa10:	4628      	mov	r0, r5
 800aa12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa16:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	e7c5      	b.n	800a9aa <__lshift+0x4a>
 800aa1e:	3904      	subs	r1, #4
 800aa20:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa24:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa28:	459c      	cmp	ip, r3
 800aa2a:	d8f9      	bhi.n	800aa20 <__lshift+0xc0>
 800aa2c:	e7ea      	b.n	800aa04 <__lshift+0xa4>
 800aa2e:	bf00      	nop
 800aa30:	0801e604 	.word	0x0801e604
 800aa34:	0801e615 	.word	0x0801e615

0800aa38 <__mcmp>:
 800aa38:	690a      	ldr	r2, [r1, #16]
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	6900      	ldr	r0, [r0, #16]
 800aa3e:	1a80      	subs	r0, r0, r2
 800aa40:	b530      	push	{r4, r5, lr}
 800aa42:	d10e      	bne.n	800aa62 <__mcmp+0x2a>
 800aa44:	3314      	adds	r3, #20
 800aa46:	3114      	adds	r1, #20
 800aa48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa58:	4295      	cmp	r5, r2
 800aa5a:	d003      	beq.n	800aa64 <__mcmp+0x2c>
 800aa5c:	d205      	bcs.n	800aa6a <__mcmp+0x32>
 800aa5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa62:	bd30      	pop	{r4, r5, pc}
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d3f3      	bcc.n	800aa50 <__mcmp+0x18>
 800aa68:	e7fb      	b.n	800aa62 <__mcmp+0x2a>
 800aa6a:	2001      	movs	r0, #1
 800aa6c:	e7f9      	b.n	800aa62 <__mcmp+0x2a>
	...

0800aa70 <__mdiff>:
 800aa70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	4689      	mov	r9, r1
 800aa76:	4606      	mov	r6, r0
 800aa78:	4611      	mov	r1, r2
 800aa7a:	4648      	mov	r0, r9
 800aa7c:	4614      	mov	r4, r2
 800aa7e:	f7ff ffdb 	bl	800aa38 <__mcmp>
 800aa82:	1e05      	subs	r5, r0, #0
 800aa84:	d112      	bne.n	800aaac <__mdiff+0x3c>
 800aa86:	4629      	mov	r1, r5
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7ff fd5b 	bl	800a544 <_Balloc>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	b928      	cbnz	r0, 800aa9e <__mdiff+0x2e>
 800aa92:	4b3f      	ldr	r3, [pc, #252]	@ (800ab90 <__mdiff+0x120>)
 800aa94:	f240 2137 	movw	r1, #567	@ 0x237
 800aa98:	483e      	ldr	r0, [pc, #248]	@ (800ab94 <__mdiff+0x124>)
 800aa9a:	f000 fa95 	bl	800afc8 <__assert_func>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	b003      	add	sp, #12
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	bfbc      	itt	lt
 800aaae:	464b      	movlt	r3, r9
 800aab0:	46a1      	movlt	r9, r4
 800aab2:	4630      	mov	r0, r6
 800aab4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aab8:	bfba      	itte	lt
 800aaba:	461c      	movlt	r4, r3
 800aabc:	2501      	movlt	r5, #1
 800aabe:	2500      	movge	r5, #0
 800aac0:	f7ff fd40 	bl	800a544 <_Balloc>
 800aac4:	4602      	mov	r2, r0
 800aac6:	b918      	cbnz	r0, 800aad0 <__mdiff+0x60>
 800aac8:	4b31      	ldr	r3, [pc, #196]	@ (800ab90 <__mdiff+0x120>)
 800aaca:	f240 2145 	movw	r1, #581	@ 0x245
 800aace:	e7e3      	b.n	800aa98 <__mdiff+0x28>
 800aad0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aad4:	6926      	ldr	r6, [r4, #16]
 800aad6:	60c5      	str	r5, [r0, #12]
 800aad8:	f109 0310 	add.w	r3, r9, #16
 800aadc:	f109 0514 	add.w	r5, r9, #20
 800aae0:	f104 0e14 	add.w	lr, r4, #20
 800aae4:	f100 0b14 	add.w	fp, r0, #20
 800aae8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aaec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	46d9      	mov	r9, fp
 800aaf4:	f04f 0c00 	mov.w	ip, #0
 800aaf8:	9b01      	ldr	r3, [sp, #4]
 800aafa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aafe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab02:	9301      	str	r3, [sp, #4]
 800ab04:	fa1f f38a 	uxth.w	r3, sl
 800ab08:	4619      	mov	r1, r3
 800ab0a:	b283      	uxth	r3, r0
 800ab0c:	1acb      	subs	r3, r1, r3
 800ab0e:	0c00      	lsrs	r0, r0, #16
 800ab10:	4463      	add	r3, ip
 800ab12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab20:	4576      	cmp	r6, lr
 800ab22:	f849 3b04 	str.w	r3, [r9], #4
 800ab26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab2a:	d8e5      	bhi.n	800aaf8 <__mdiff+0x88>
 800ab2c:	1b33      	subs	r3, r6, r4
 800ab2e:	3b15      	subs	r3, #21
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	3415      	adds	r4, #21
 800ab36:	3304      	adds	r3, #4
 800ab38:	42a6      	cmp	r6, r4
 800ab3a:	bf38      	it	cc
 800ab3c:	2304      	movcc	r3, #4
 800ab3e:	441d      	add	r5, r3
 800ab40:	445b      	add	r3, fp
 800ab42:	461e      	mov	r6, r3
 800ab44:	462c      	mov	r4, r5
 800ab46:	4544      	cmp	r4, r8
 800ab48:	d30e      	bcc.n	800ab68 <__mdiff+0xf8>
 800ab4a:	f108 0103 	add.w	r1, r8, #3
 800ab4e:	1b49      	subs	r1, r1, r5
 800ab50:	f021 0103 	bic.w	r1, r1, #3
 800ab54:	3d03      	subs	r5, #3
 800ab56:	45a8      	cmp	r8, r5
 800ab58:	bf38      	it	cc
 800ab5a:	2100      	movcc	r1, #0
 800ab5c:	440b      	add	r3, r1
 800ab5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab62:	b191      	cbz	r1, 800ab8a <__mdiff+0x11a>
 800ab64:	6117      	str	r7, [r2, #16]
 800ab66:	e79d      	b.n	800aaa4 <__mdiff+0x34>
 800ab68:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab6c:	46e6      	mov	lr, ip
 800ab6e:	0c08      	lsrs	r0, r1, #16
 800ab70:	fa1c fc81 	uxtah	ip, ip, r1
 800ab74:	4471      	add	r1, lr
 800ab76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab7a:	b289      	uxth	r1, r1
 800ab7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab80:	f846 1b04 	str.w	r1, [r6], #4
 800ab84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab88:	e7dd      	b.n	800ab46 <__mdiff+0xd6>
 800ab8a:	3f01      	subs	r7, #1
 800ab8c:	e7e7      	b.n	800ab5e <__mdiff+0xee>
 800ab8e:	bf00      	nop
 800ab90:	0801e604 	.word	0x0801e604
 800ab94:	0801e615 	.word	0x0801e615

0800ab98 <__d2b>:
 800ab98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab9c:	460f      	mov	r7, r1
 800ab9e:	2101      	movs	r1, #1
 800aba0:	ec59 8b10 	vmov	r8, r9, d0
 800aba4:	4616      	mov	r6, r2
 800aba6:	f7ff fccd 	bl	800a544 <_Balloc>
 800abaa:	4604      	mov	r4, r0
 800abac:	b930      	cbnz	r0, 800abbc <__d2b+0x24>
 800abae:	4602      	mov	r2, r0
 800abb0:	4b23      	ldr	r3, [pc, #140]	@ (800ac40 <__d2b+0xa8>)
 800abb2:	4824      	ldr	r0, [pc, #144]	@ (800ac44 <__d2b+0xac>)
 800abb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800abb8:	f000 fa06 	bl	800afc8 <__assert_func>
 800abbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abc4:	b10d      	cbz	r5, 800abca <__d2b+0x32>
 800abc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	f1b8 0300 	subs.w	r3, r8, #0
 800abd0:	d023      	beq.n	800ac1a <__d2b+0x82>
 800abd2:	4668      	mov	r0, sp
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	f7ff fd7c 	bl	800a6d2 <__lo0bits>
 800abda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abde:	b1d0      	cbz	r0, 800ac16 <__d2b+0x7e>
 800abe0:	f1c0 0320 	rsb	r3, r0, #32
 800abe4:	fa02 f303 	lsl.w	r3, r2, r3
 800abe8:	430b      	orrs	r3, r1
 800abea:	40c2      	lsrs	r2, r0
 800abec:	6163      	str	r3, [r4, #20]
 800abee:	9201      	str	r2, [sp, #4]
 800abf0:	9b01      	ldr	r3, [sp, #4]
 800abf2:	61a3      	str	r3, [r4, #24]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bf0c      	ite	eq
 800abf8:	2201      	moveq	r2, #1
 800abfa:	2202      	movne	r2, #2
 800abfc:	6122      	str	r2, [r4, #16]
 800abfe:	b1a5      	cbz	r5, 800ac2a <__d2b+0x92>
 800ac00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ac04:	4405      	add	r5, r0
 800ac06:	603d      	str	r5, [r7, #0]
 800ac08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac0c:	6030      	str	r0, [r6, #0]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	b003      	add	sp, #12
 800ac12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac16:	6161      	str	r1, [r4, #20]
 800ac18:	e7ea      	b.n	800abf0 <__d2b+0x58>
 800ac1a:	a801      	add	r0, sp, #4
 800ac1c:	f7ff fd59 	bl	800a6d2 <__lo0bits>
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	6163      	str	r3, [r4, #20]
 800ac24:	3020      	adds	r0, #32
 800ac26:	2201      	movs	r2, #1
 800ac28:	e7e8      	b.n	800abfc <__d2b+0x64>
 800ac2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac32:	6038      	str	r0, [r7, #0]
 800ac34:	6918      	ldr	r0, [r3, #16]
 800ac36:	f7ff fd2d 	bl	800a694 <__hi0bits>
 800ac3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac3e:	e7e5      	b.n	800ac0c <__d2b+0x74>
 800ac40:	0801e604 	.word	0x0801e604
 800ac44:	0801e615 	.word	0x0801e615

0800ac48 <__sread>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac50:	f000 f978 	bl	800af44 <_read_r>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	bfab      	itete	ge
 800ac58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac5c:	181b      	addge	r3, r3, r0
 800ac5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac62:	bfac      	ite	ge
 800ac64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac66:	81a3      	strhlt	r3, [r4, #12]
 800ac68:	bd10      	pop	{r4, pc}

0800ac6a <__swrite>:
 800ac6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6e:	461f      	mov	r7, r3
 800ac70:	898b      	ldrh	r3, [r1, #12]
 800ac72:	05db      	lsls	r3, r3, #23
 800ac74:	4605      	mov	r5, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	4616      	mov	r6, r2
 800ac7a:	d505      	bpl.n	800ac88 <__swrite+0x1e>
 800ac7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac80:	2302      	movs	r3, #2
 800ac82:	2200      	movs	r2, #0
 800ac84:	f000 f94c 	bl	800af20 <_lseek_r>
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	4632      	mov	r2, r6
 800ac96:	463b      	mov	r3, r7
 800ac98:	4628      	mov	r0, r5
 800ac9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9e:	f000 b973 	b.w	800af88 <_write_r>

0800aca2 <__sseek>:
 800aca2:	b510      	push	{r4, lr}
 800aca4:	460c      	mov	r4, r1
 800aca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acaa:	f000 f939 	bl	800af20 <_lseek_r>
 800acae:	1c43      	adds	r3, r0, #1
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	bf15      	itete	ne
 800acb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800acb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800acba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acbe:	81a3      	strheq	r3, [r4, #12]
 800acc0:	bf18      	it	ne
 800acc2:	81a3      	strhne	r3, [r4, #12]
 800acc4:	bd10      	pop	{r4, pc}

0800acc6 <__sclose>:
 800acc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acca:	f000 b8f7 	b.w	800aebc <_close_r>

0800acce <__swbuf_r>:
 800acce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd0:	460e      	mov	r6, r1
 800acd2:	4614      	mov	r4, r2
 800acd4:	4605      	mov	r5, r0
 800acd6:	b118      	cbz	r0, 800ace0 <__swbuf_r+0x12>
 800acd8:	6a03      	ldr	r3, [r0, #32]
 800acda:	b90b      	cbnz	r3, 800ace0 <__swbuf_r+0x12>
 800acdc:	f7fe fbb4 	bl	8009448 <__sinit>
 800ace0:	69a3      	ldr	r3, [r4, #24]
 800ace2:	60a3      	str	r3, [r4, #8]
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	071a      	lsls	r2, r3, #28
 800ace8:	d501      	bpl.n	800acee <__swbuf_r+0x20>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	b943      	cbnz	r3, 800ad00 <__swbuf_r+0x32>
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	f000 f82b 	bl	800ad4c <__swsetup_r>
 800acf6:	b118      	cbz	r0, 800ad00 <__swbuf_r+0x32>
 800acf8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800acfc:	4638      	mov	r0, r7
 800acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	6922      	ldr	r2, [r4, #16]
 800ad04:	1a98      	subs	r0, r3, r2
 800ad06:	6963      	ldr	r3, [r4, #20]
 800ad08:	b2f6      	uxtb	r6, r6
 800ad0a:	4283      	cmp	r3, r0
 800ad0c:	4637      	mov	r7, r6
 800ad0e:	dc05      	bgt.n	800ad1c <__swbuf_r+0x4e>
 800ad10:	4621      	mov	r1, r4
 800ad12:	4628      	mov	r0, r5
 800ad14:	f7ff fbe2 	bl	800a4dc <_fflush_r>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1ed      	bne.n	800acf8 <__swbuf_r+0x2a>
 800ad1c:	68a3      	ldr	r3, [r4, #8]
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	60a3      	str	r3, [r4, #8]
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	6022      	str	r2, [r4, #0]
 800ad28:	701e      	strb	r6, [r3, #0]
 800ad2a:	6962      	ldr	r2, [r4, #20]
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d004      	beq.n	800ad3c <__swbuf_r+0x6e>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	07db      	lsls	r3, r3, #31
 800ad36:	d5e1      	bpl.n	800acfc <__swbuf_r+0x2e>
 800ad38:	2e0a      	cmp	r6, #10
 800ad3a:	d1df      	bne.n	800acfc <__swbuf_r+0x2e>
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f7ff fbcc 	bl	800a4dc <_fflush_r>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d0d9      	beq.n	800acfc <__swbuf_r+0x2e>
 800ad48:	e7d6      	b.n	800acf8 <__swbuf_r+0x2a>
	...

0800ad4c <__swsetup_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4b29      	ldr	r3, [pc, #164]	@ (800adf4 <__swsetup_r+0xa8>)
 800ad50:	4605      	mov	r5, r0
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	460c      	mov	r4, r1
 800ad56:	b118      	cbz	r0, 800ad60 <__swsetup_r+0x14>
 800ad58:	6a03      	ldr	r3, [r0, #32]
 800ad5a:	b90b      	cbnz	r3, 800ad60 <__swsetup_r+0x14>
 800ad5c:	f7fe fb74 	bl	8009448 <__sinit>
 800ad60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad64:	0719      	lsls	r1, r3, #28
 800ad66:	d422      	bmi.n	800adae <__swsetup_r+0x62>
 800ad68:	06da      	lsls	r2, r3, #27
 800ad6a:	d407      	bmi.n	800ad7c <__swsetup_r+0x30>
 800ad6c:	2209      	movs	r2, #9
 800ad6e:	602a      	str	r2, [r5, #0]
 800ad70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad7a:	e033      	b.n	800ade4 <__swsetup_r+0x98>
 800ad7c:	0758      	lsls	r0, r3, #29
 800ad7e:	d512      	bpl.n	800ada6 <__swsetup_r+0x5a>
 800ad80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad82:	b141      	cbz	r1, 800ad96 <__swsetup_r+0x4a>
 800ad84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	d002      	beq.n	800ad92 <__swsetup_r+0x46>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 f94d 	bl	800b02c <_free_r>
 800ad92:	2300      	movs	r3, #0
 800ad94:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad9c:	81a3      	strh	r3, [r4, #12]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f043 0308 	orr.w	r3, r3, #8
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	b94b      	cbnz	r3, 800adc6 <__swsetup_r+0x7a>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adbc:	d003      	beq.n	800adc6 <__swsetup_r+0x7a>
 800adbe:	4621      	mov	r1, r4
 800adc0:	4628      	mov	r0, r5
 800adc2:	f000 f83f 	bl	800ae44 <__smakebuf_r>
 800adc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adca:	f013 0201 	ands.w	r2, r3, #1
 800adce:	d00a      	beq.n	800ade6 <__swsetup_r+0x9a>
 800add0:	2200      	movs	r2, #0
 800add2:	60a2      	str	r2, [r4, #8]
 800add4:	6962      	ldr	r2, [r4, #20]
 800add6:	4252      	negs	r2, r2
 800add8:	61a2      	str	r2, [r4, #24]
 800adda:	6922      	ldr	r2, [r4, #16]
 800addc:	b942      	cbnz	r2, 800adf0 <__swsetup_r+0xa4>
 800adde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ade2:	d1c5      	bne.n	800ad70 <__swsetup_r+0x24>
 800ade4:	bd38      	pop	{r3, r4, r5, pc}
 800ade6:	0799      	lsls	r1, r3, #30
 800ade8:	bf58      	it	pl
 800adea:	6962      	ldrpl	r2, [r4, #20]
 800adec:	60a2      	str	r2, [r4, #8]
 800adee:	e7f4      	b.n	800adda <__swsetup_r+0x8e>
 800adf0:	2000      	movs	r0, #0
 800adf2:	e7f7      	b.n	800ade4 <__swsetup_r+0x98>
 800adf4:	2000005c 	.word	0x2000005c

0800adf8 <__swhatbuf_r>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	460c      	mov	r4, r1
 800adfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae00:	2900      	cmp	r1, #0
 800ae02:	b096      	sub	sp, #88	@ 0x58
 800ae04:	4615      	mov	r5, r2
 800ae06:	461e      	mov	r6, r3
 800ae08:	da0d      	bge.n	800ae26 <__swhatbuf_r+0x2e>
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae10:	f04f 0100 	mov.w	r1, #0
 800ae14:	bf14      	ite	ne
 800ae16:	2340      	movne	r3, #64	@ 0x40
 800ae18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	6031      	str	r1, [r6, #0]
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	b016      	add	sp, #88	@ 0x58
 800ae24:	bd70      	pop	{r4, r5, r6, pc}
 800ae26:	466a      	mov	r2, sp
 800ae28:	f000 f858 	bl	800aedc <_fstat_r>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	dbec      	blt.n	800ae0a <__swhatbuf_r+0x12>
 800ae30:	9901      	ldr	r1, [sp, #4]
 800ae32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae3a:	4259      	negs	r1, r3
 800ae3c:	4159      	adcs	r1, r3
 800ae3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae42:	e7eb      	b.n	800ae1c <__swhatbuf_r+0x24>

0800ae44 <__smakebuf_r>:
 800ae44:	898b      	ldrh	r3, [r1, #12]
 800ae46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae48:	079d      	lsls	r5, r3, #30
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	d507      	bpl.n	800ae60 <__smakebuf_r+0x1c>
 800ae50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	2301      	movs	r3, #1
 800ae5a:	6163      	str	r3, [r4, #20]
 800ae5c:	b003      	add	sp, #12
 800ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae60:	ab01      	add	r3, sp, #4
 800ae62:	466a      	mov	r2, sp
 800ae64:	f7ff ffc8 	bl	800adf8 <__swhatbuf_r>
 800ae68:	9f00      	ldr	r7, [sp, #0]
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f7ff fa30 	bl	800a2d4 <_malloc_r>
 800ae74:	b948      	cbnz	r0, 800ae8a <__smakebuf_r+0x46>
 800ae76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7a:	059a      	lsls	r2, r3, #22
 800ae7c:	d4ee      	bmi.n	800ae5c <__smakebuf_r+0x18>
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	f043 0302 	orr.w	r3, r3, #2
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	e7e2      	b.n	800ae50 <__smakebuf_r+0xc>
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	6020      	str	r0, [r4, #0]
 800ae8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	9b01      	ldr	r3, [sp, #4]
 800ae96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae9a:	b15b      	cbz	r3, 800aeb4 <__smakebuf_r+0x70>
 800ae9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aea0:	4630      	mov	r0, r6
 800aea2:	f000 f82d 	bl	800af00 <_isatty_r>
 800aea6:	b128      	cbz	r0, 800aeb4 <__smakebuf_r+0x70>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	f043 0301 	orr.w	r3, r3, #1
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	431d      	orrs	r5, r3
 800aeb8:	81a5      	strh	r5, [r4, #12]
 800aeba:	e7cf      	b.n	800ae5c <__smakebuf_r+0x18>

0800aebc <_close_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	4d06      	ldr	r5, [pc, #24]	@ (800aed8 <_close_r+0x1c>)
 800aec0:	2300      	movs	r3, #0
 800aec2:	4604      	mov	r4, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	602b      	str	r3, [r5, #0]
 800aec8:	f7f7 fa8e 	bl	80023e8 <_close>
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d102      	bne.n	800aed6 <_close_r+0x1a>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	b103      	cbz	r3, 800aed6 <_close_r+0x1a>
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	20001924 	.word	0x20001924

0800aedc <_fstat_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d07      	ldr	r5, [pc, #28]	@ (800aefc <_fstat_r+0x20>)
 800aee0:	2300      	movs	r3, #0
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	4611      	mov	r1, r2
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	f7f7 fa89 	bl	8002400 <_fstat>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	d102      	bne.n	800aef8 <_fstat_r+0x1c>
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	b103      	cbz	r3, 800aef8 <_fstat_r+0x1c>
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	bd38      	pop	{r3, r4, r5, pc}
 800aefa:	bf00      	nop
 800aefc:	20001924 	.word	0x20001924

0800af00 <_isatty_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d06      	ldr	r5, [pc, #24]	@ (800af1c <_isatty_r+0x1c>)
 800af04:	2300      	movs	r3, #0
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	602b      	str	r3, [r5, #0]
 800af0c:	f7f7 fa88 	bl	8002420 <_isatty>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_isatty_r+0x1a>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_isatty_r+0x1a>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	20001924 	.word	0x20001924

0800af20 <_lseek_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4d07      	ldr	r5, [pc, #28]	@ (800af40 <_lseek_r+0x20>)
 800af24:	4604      	mov	r4, r0
 800af26:	4608      	mov	r0, r1
 800af28:	4611      	mov	r1, r2
 800af2a:	2200      	movs	r2, #0
 800af2c:	602a      	str	r2, [r5, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	f7f7 fa81 	bl	8002436 <_lseek>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_lseek_r+0x1e>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_lseek_r+0x1e>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	20001924 	.word	0x20001924

0800af44 <_read_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d07      	ldr	r5, [pc, #28]	@ (800af64 <_read_r+0x20>)
 800af48:	4604      	mov	r4, r0
 800af4a:	4608      	mov	r0, r1
 800af4c:	4611      	mov	r1, r2
 800af4e:	2200      	movs	r2, #0
 800af50:	602a      	str	r2, [r5, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	f7f7 fa0f 	bl	8002376 <_read>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_read_r+0x1e>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_read_r+0x1e>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20001924 	.word	0x20001924

0800af68 <_sbrk_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d06      	ldr	r5, [pc, #24]	@ (800af84 <_sbrk_r+0x1c>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f7 fa6c 	bl	8002450 <_sbrk>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_sbrk_r+0x1a>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_sbrk_r+0x1a>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	20001924 	.word	0x20001924

0800af88 <_write_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d07      	ldr	r5, [pc, #28]	@ (800afa8 <_write_r+0x20>)
 800af8c:	4604      	mov	r4, r0
 800af8e:	4608      	mov	r0, r1
 800af90:	4611      	mov	r1, r2
 800af92:	2200      	movs	r2, #0
 800af94:	602a      	str	r2, [r5, #0]
 800af96:	461a      	mov	r2, r3
 800af98:	f7f7 fa0a 	bl	80023b0 <_write>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_write_r+0x1e>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_write_r+0x1e>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	20001924 	.word	0x20001924

0800afac <memcpy>:
 800afac:	440a      	add	r2, r1
 800afae:	4291      	cmp	r1, r2
 800afb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800afb4:	d100      	bne.n	800afb8 <memcpy+0xc>
 800afb6:	4770      	bx	lr
 800afb8:	b510      	push	{r4, lr}
 800afba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afc2:	4291      	cmp	r1, r2
 800afc4:	d1f9      	bne.n	800afba <memcpy+0xe>
 800afc6:	bd10      	pop	{r4, pc}

0800afc8 <__assert_func>:
 800afc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afca:	4614      	mov	r4, r2
 800afcc:	461a      	mov	r2, r3
 800afce:	4b09      	ldr	r3, [pc, #36]	@ (800aff4 <__assert_func+0x2c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4605      	mov	r5, r0
 800afd4:	68d8      	ldr	r0, [r3, #12]
 800afd6:	b954      	cbnz	r4, 800afee <__assert_func+0x26>
 800afd8:	4b07      	ldr	r3, [pc, #28]	@ (800aff8 <__assert_func+0x30>)
 800afda:	461c      	mov	r4, r3
 800afdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afe0:	9100      	str	r1, [sp, #0]
 800afe2:	462b      	mov	r3, r5
 800afe4:	4905      	ldr	r1, [pc, #20]	@ (800affc <__assert_func+0x34>)
 800afe6:	f000 f87d 	bl	800b0e4 <fiprintf>
 800afea:	f000 f89a 	bl	800b122 <abort>
 800afee:	4b04      	ldr	r3, [pc, #16]	@ (800b000 <__assert_func+0x38>)
 800aff0:	e7f4      	b.n	800afdc <__assert_func+0x14>
 800aff2:	bf00      	nop
 800aff4:	2000005c 	.word	0x2000005c
 800aff8:	0801e8b6 	.word	0x0801e8b6
 800affc:	0801e888 	.word	0x0801e888
 800b000:	0801e87b 	.word	0x0801e87b

0800b004 <_calloc_r>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	fba1 5402 	umull	r5, r4, r1, r2
 800b00a:	b93c      	cbnz	r4, 800b01c <_calloc_r+0x18>
 800b00c:	4629      	mov	r1, r5
 800b00e:	f7ff f961 	bl	800a2d4 <_malloc_r>
 800b012:	4606      	mov	r6, r0
 800b014:	b928      	cbnz	r0, 800b022 <_calloc_r+0x1e>
 800b016:	2600      	movs	r6, #0
 800b018:	4630      	mov	r0, r6
 800b01a:	bd70      	pop	{r4, r5, r6, pc}
 800b01c:	220c      	movs	r2, #12
 800b01e:	6002      	str	r2, [r0, #0]
 800b020:	e7f9      	b.n	800b016 <_calloc_r+0x12>
 800b022:	462a      	mov	r2, r5
 800b024:	4621      	mov	r1, r4
 800b026:	f7fe faa3 	bl	8009570 <memset>
 800b02a:	e7f5      	b.n	800b018 <_calloc_r+0x14>

0800b02c <_free_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4605      	mov	r5, r0
 800b030:	2900      	cmp	r1, #0
 800b032:	d041      	beq.n	800b0b8 <_free_r+0x8c>
 800b034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b038:	1f0c      	subs	r4, r1, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfb8      	it	lt
 800b03e:	18e4      	addlt	r4, r4, r3
 800b040:	f7ff fa74 	bl	800a52c <__malloc_lock>
 800b044:	4a1d      	ldr	r2, [pc, #116]	@ (800b0bc <_free_r+0x90>)
 800b046:	6813      	ldr	r3, [r2, #0]
 800b048:	b933      	cbnz	r3, 800b058 <_free_r+0x2c>
 800b04a:	6063      	str	r3, [r4, #4]
 800b04c:	6014      	str	r4, [r2, #0]
 800b04e:	4628      	mov	r0, r5
 800b050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b054:	f7ff ba70 	b.w	800a538 <__malloc_unlock>
 800b058:	42a3      	cmp	r3, r4
 800b05a:	d908      	bls.n	800b06e <_free_r+0x42>
 800b05c:	6820      	ldr	r0, [r4, #0]
 800b05e:	1821      	adds	r1, r4, r0
 800b060:	428b      	cmp	r3, r1
 800b062:	bf01      	itttt	eq
 800b064:	6819      	ldreq	r1, [r3, #0]
 800b066:	685b      	ldreq	r3, [r3, #4]
 800b068:	1809      	addeq	r1, r1, r0
 800b06a:	6021      	streq	r1, [r4, #0]
 800b06c:	e7ed      	b.n	800b04a <_free_r+0x1e>
 800b06e:	461a      	mov	r2, r3
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	b10b      	cbz	r3, 800b078 <_free_r+0x4c>
 800b074:	42a3      	cmp	r3, r4
 800b076:	d9fa      	bls.n	800b06e <_free_r+0x42>
 800b078:	6811      	ldr	r1, [r2, #0]
 800b07a:	1850      	adds	r0, r2, r1
 800b07c:	42a0      	cmp	r0, r4
 800b07e:	d10b      	bne.n	800b098 <_free_r+0x6c>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	4401      	add	r1, r0
 800b084:	1850      	adds	r0, r2, r1
 800b086:	4283      	cmp	r3, r0
 800b088:	6011      	str	r1, [r2, #0]
 800b08a:	d1e0      	bne.n	800b04e <_free_r+0x22>
 800b08c:	6818      	ldr	r0, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	6053      	str	r3, [r2, #4]
 800b092:	4408      	add	r0, r1
 800b094:	6010      	str	r0, [r2, #0]
 800b096:	e7da      	b.n	800b04e <_free_r+0x22>
 800b098:	d902      	bls.n	800b0a0 <_free_r+0x74>
 800b09a:	230c      	movs	r3, #12
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	e7d6      	b.n	800b04e <_free_r+0x22>
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	1821      	adds	r1, r4, r0
 800b0a4:	428b      	cmp	r3, r1
 800b0a6:	bf04      	itt	eq
 800b0a8:	6819      	ldreq	r1, [r3, #0]
 800b0aa:	685b      	ldreq	r3, [r3, #4]
 800b0ac:	6063      	str	r3, [r4, #4]
 800b0ae:	bf04      	itt	eq
 800b0b0:	1809      	addeq	r1, r1, r0
 800b0b2:	6021      	streq	r1, [r4, #0]
 800b0b4:	6054      	str	r4, [r2, #4]
 800b0b6:	e7ca      	b.n	800b04e <_free_r+0x22>
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20001920 	.word	0x20001920

0800b0c0 <__ascii_mbtowc>:
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	b901      	cbnz	r1, 800b0c6 <__ascii_mbtowc+0x6>
 800b0c4:	a901      	add	r1, sp, #4
 800b0c6:	b142      	cbz	r2, 800b0da <__ascii_mbtowc+0x1a>
 800b0c8:	b14b      	cbz	r3, 800b0de <__ascii_mbtowc+0x1e>
 800b0ca:	7813      	ldrb	r3, [r2, #0]
 800b0cc:	600b      	str	r3, [r1, #0]
 800b0ce:	7812      	ldrb	r2, [r2, #0]
 800b0d0:	1e10      	subs	r0, r2, #0
 800b0d2:	bf18      	it	ne
 800b0d4:	2001      	movne	r0, #1
 800b0d6:	b002      	add	sp, #8
 800b0d8:	4770      	bx	lr
 800b0da:	4610      	mov	r0, r2
 800b0dc:	e7fb      	b.n	800b0d6 <__ascii_mbtowc+0x16>
 800b0de:	f06f 0001 	mvn.w	r0, #1
 800b0e2:	e7f8      	b.n	800b0d6 <__ascii_mbtowc+0x16>

0800b0e4 <fiprintf>:
 800b0e4:	b40e      	push	{r1, r2, r3}
 800b0e6:	b503      	push	{r0, r1, lr}
 800b0e8:	4601      	mov	r1, r0
 800b0ea:	ab03      	add	r3, sp, #12
 800b0ec:	4805      	ldr	r0, [pc, #20]	@ (800b104 <fiprintf+0x20>)
 800b0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f2:	6800      	ldr	r0, [r0, #0]
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	f000 f845 	bl	800b184 <_vfiprintf_r>
 800b0fa:	b002      	add	sp, #8
 800b0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b100:	b003      	add	sp, #12
 800b102:	4770      	bx	lr
 800b104:	2000005c 	.word	0x2000005c

0800b108 <__ascii_wctomb>:
 800b108:	4603      	mov	r3, r0
 800b10a:	4608      	mov	r0, r1
 800b10c:	b141      	cbz	r1, 800b120 <__ascii_wctomb+0x18>
 800b10e:	2aff      	cmp	r2, #255	@ 0xff
 800b110:	d904      	bls.n	800b11c <__ascii_wctomb+0x14>
 800b112:	228a      	movs	r2, #138	@ 0x8a
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b11a:	4770      	bx	lr
 800b11c:	700a      	strb	r2, [r1, #0]
 800b11e:	2001      	movs	r0, #1
 800b120:	4770      	bx	lr

0800b122 <abort>:
 800b122:	b508      	push	{r3, lr}
 800b124:	2006      	movs	r0, #6
 800b126:	f000 f96d 	bl	800b404 <raise>
 800b12a:	2001      	movs	r0, #1
 800b12c:	f7f7 f918 	bl	8002360 <_exit>

0800b130 <__sfputc_r>:
 800b130:	6893      	ldr	r3, [r2, #8]
 800b132:	3b01      	subs	r3, #1
 800b134:	2b00      	cmp	r3, #0
 800b136:	b410      	push	{r4}
 800b138:	6093      	str	r3, [r2, #8]
 800b13a:	da08      	bge.n	800b14e <__sfputc_r+0x1e>
 800b13c:	6994      	ldr	r4, [r2, #24]
 800b13e:	42a3      	cmp	r3, r4
 800b140:	db01      	blt.n	800b146 <__sfputc_r+0x16>
 800b142:	290a      	cmp	r1, #10
 800b144:	d103      	bne.n	800b14e <__sfputc_r+0x1e>
 800b146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b14a:	f7ff bdc0 	b.w	800acce <__swbuf_r>
 800b14e:	6813      	ldr	r3, [r2, #0]
 800b150:	1c58      	adds	r0, r3, #1
 800b152:	6010      	str	r0, [r2, #0]
 800b154:	7019      	strb	r1, [r3, #0]
 800b156:	4608      	mov	r0, r1
 800b158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <__sfputs_r>:
 800b15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b160:	4606      	mov	r6, r0
 800b162:	460f      	mov	r7, r1
 800b164:	4614      	mov	r4, r2
 800b166:	18d5      	adds	r5, r2, r3
 800b168:	42ac      	cmp	r4, r5
 800b16a:	d101      	bne.n	800b170 <__sfputs_r+0x12>
 800b16c:	2000      	movs	r0, #0
 800b16e:	e007      	b.n	800b180 <__sfputs_r+0x22>
 800b170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b174:	463a      	mov	r2, r7
 800b176:	4630      	mov	r0, r6
 800b178:	f7ff ffda 	bl	800b130 <__sfputc_r>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d1f3      	bne.n	800b168 <__sfputs_r+0xa>
 800b180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b184 <_vfiprintf_r>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	460d      	mov	r5, r1
 800b18a:	b09d      	sub	sp, #116	@ 0x74
 800b18c:	4614      	mov	r4, r2
 800b18e:	4698      	mov	r8, r3
 800b190:	4606      	mov	r6, r0
 800b192:	b118      	cbz	r0, 800b19c <_vfiprintf_r+0x18>
 800b194:	6a03      	ldr	r3, [r0, #32]
 800b196:	b90b      	cbnz	r3, 800b19c <_vfiprintf_r+0x18>
 800b198:	f7fe f956 	bl	8009448 <__sinit>
 800b19c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b19e:	07d9      	lsls	r1, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <_vfiprintf_r+0x2a>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	059a      	lsls	r2, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_vfiprintf_r+0x2a>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1aa:	f7fe fa18 	bl	80095de <__retarget_lock_acquire_recursive>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	071b      	lsls	r3, r3, #28
 800b1b2:	d501      	bpl.n	800b1b8 <_vfiprintf_r+0x34>
 800b1b4:	692b      	ldr	r3, [r5, #16]
 800b1b6:	b99b      	cbnz	r3, 800b1e0 <_vfiprintf_r+0x5c>
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7ff fdc6 	bl	800ad4c <__swsetup_r>
 800b1c0:	b170      	cbz	r0, 800b1e0 <_vfiprintf_r+0x5c>
 800b1c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1c4:	07dc      	lsls	r4, r3, #31
 800b1c6:	d504      	bpl.n	800b1d2 <_vfiprintf_r+0x4e>
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1cc:	b01d      	add	sp, #116	@ 0x74
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	0598      	lsls	r0, r3, #22
 800b1d6:	d4f7      	bmi.n	800b1c8 <_vfiprintf_r+0x44>
 800b1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1da:	f7fe fa01 	bl	80095e0 <__retarget_lock_release_recursive>
 800b1de:	e7f3      	b.n	800b1c8 <_vfiprintf_r+0x44>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ee:	2330      	movs	r3, #48	@ 0x30
 800b1f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3a0 <_vfiprintf_r+0x21c>
 800b1f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1f8:	f04f 0901 	mov.w	r9, #1
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	469a      	mov	sl, r3
 800b200:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b204:	b10a      	cbz	r2, 800b20a <_vfiprintf_r+0x86>
 800b206:	2a25      	cmp	r2, #37	@ 0x25
 800b208:	d1f9      	bne.n	800b1fe <_vfiprintf_r+0x7a>
 800b20a:	ebba 0b04 	subs.w	fp, sl, r4
 800b20e:	d00b      	beq.n	800b228 <_vfiprintf_r+0xa4>
 800b210:	465b      	mov	r3, fp
 800b212:	4622      	mov	r2, r4
 800b214:	4629      	mov	r1, r5
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ffa1 	bl	800b15e <__sfputs_r>
 800b21c:	3001      	adds	r0, #1
 800b21e:	f000 80a7 	beq.w	800b370 <_vfiprintf_r+0x1ec>
 800b222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b224:	445a      	add	r2, fp
 800b226:	9209      	str	r2, [sp, #36]	@ 0x24
 800b228:	f89a 3000 	ldrb.w	r3, [sl]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 809f 	beq.w	800b370 <_vfiprintf_r+0x1ec>
 800b232:	2300      	movs	r3, #0
 800b234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b23c:	f10a 0a01 	add.w	sl, sl, #1
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	9307      	str	r3, [sp, #28]
 800b244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b248:	931a      	str	r3, [sp, #104]	@ 0x68
 800b24a:	4654      	mov	r4, sl
 800b24c:	2205      	movs	r2, #5
 800b24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b252:	4853      	ldr	r0, [pc, #332]	@ (800b3a0 <_vfiprintf_r+0x21c>)
 800b254:	f7f4 ffe4 	bl	8000220 <memchr>
 800b258:	9a04      	ldr	r2, [sp, #16]
 800b25a:	b9d8      	cbnz	r0, 800b294 <_vfiprintf_r+0x110>
 800b25c:	06d1      	lsls	r1, r2, #27
 800b25e:	bf44      	itt	mi
 800b260:	2320      	movmi	r3, #32
 800b262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b266:	0713      	lsls	r3, r2, #28
 800b268:	bf44      	itt	mi
 800b26a:	232b      	movmi	r3, #43	@ 0x2b
 800b26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b270:	f89a 3000 	ldrb.w	r3, [sl]
 800b274:	2b2a      	cmp	r3, #42	@ 0x2a
 800b276:	d015      	beq.n	800b2a4 <_vfiprintf_r+0x120>
 800b278:	9a07      	ldr	r2, [sp, #28]
 800b27a:	4654      	mov	r4, sl
 800b27c:	2000      	movs	r0, #0
 800b27e:	f04f 0c0a 	mov.w	ip, #10
 800b282:	4621      	mov	r1, r4
 800b284:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b288:	3b30      	subs	r3, #48	@ 0x30
 800b28a:	2b09      	cmp	r3, #9
 800b28c:	d94b      	bls.n	800b326 <_vfiprintf_r+0x1a2>
 800b28e:	b1b0      	cbz	r0, 800b2be <_vfiprintf_r+0x13a>
 800b290:	9207      	str	r2, [sp, #28]
 800b292:	e014      	b.n	800b2be <_vfiprintf_r+0x13a>
 800b294:	eba0 0308 	sub.w	r3, r0, r8
 800b298:	fa09 f303 	lsl.w	r3, r9, r3
 800b29c:	4313      	orrs	r3, r2
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	46a2      	mov	sl, r4
 800b2a2:	e7d2      	b.n	800b24a <_vfiprintf_r+0xc6>
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	1d19      	adds	r1, r3, #4
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	9103      	str	r1, [sp, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bfbb      	ittet	lt
 800b2b0:	425b      	neglt	r3, r3
 800b2b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b6:	9307      	strge	r3, [sp, #28]
 800b2b8:	9307      	strlt	r3, [sp, #28]
 800b2ba:	bfb8      	it	lt
 800b2bc:	9204      	strlt	r2, [sp, #16]
 800b2be:	7823      	ldrb	r3, [r4, #0]
 800b2c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2c2:	d10a      	bne.n	800b2da <_vfiprintf_r+0x156>
 800b2c4:	7863      	ldrb	r3, [r4, #1]
 800b2c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2c8:	d132      	bne.n	800b330 <_vfiprintf_r+0x1ac>
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	1d1a      	adds	r2, r3, #4
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	9203      	str	r2, [sp, #12]
 800b2d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2d6:	3402      	adds	r4, #2
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3b0 <_vfiprintf_r+0x22c>
 800b2de:	7821      	ldrb	r1, [r4, #0]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f7f4 ff9c 	bl	8000220 <memchr>
 800b2e8:	b138      	cbz	r0, 800b2fa <_vfiprintf_r+0x176>
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	eba0 000a 	sub.w	r0, r0, sl
 800b2f0:	2240      	movs	r2, #64	@ 0x40
 800b2f2:	4082      	lsls	r2, r0
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	3401      	adds	r4, #1
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fe:	4829      	ldr	r0, [pc, #164]	@ (800b3a4 <_vfiprintf_r+0x220>)
 800b300:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b304:	2206      	movs	r2, #6
 800b306:	f7f4 ff8b 	bl	8000220 <memchr>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d03f      	beq.n	800b38e <_vfiprintf_r+0x20a>
 800b30e:	4b26      	ldr	r3, [pc, #152]	@ (800b3a8 <_vfiprintf_r+0x224>)
 800b310:	bb1b      	cbnz	r3, 800b35a <_vfiprintf_r+0x1d6>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	3307      	adds	r3, #7
 800b316:	f023 0307 	bic.w	r3, r3, #7
 800b31a:	3308      	adds	r3, #8
 800b31c:	9303      	str	r3, [sp, #12]
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	443b      	add	r3, r7
 800b322:	9309      	str	r3, [sp, #36]	@ 0x24
 800b324:	e76a      	b.n	800b1fc <_vfiprintf_r+0x78>
 800b326:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32a:	460c      	mov	r4, r1
 800b32c:	2001      	movs	r0, #1
 800b32e:	e7a8      	b.n	800b282 <_vfiprintf_r+0xfe>
 800b330:	2300      	movs	r3, #0
 800b332:	3401      	adds	r4, #1
 800b334:	9305      	str	r3, [sp, #20]
 800b336:	4619      	mov	r1, r3
 800b338:	f04f 0c0a 	mov.w	ip, #10
 800b33c:	4620      	mov	r0, r4
 800b33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b342:	3a30      	subs	r2, #48	@ 0x30
 800b344:	2a09      	cmp	r2, #9
 800b346:	d903      	bls.n	800b350 <_vfiprintf_r+0x1cc>
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d0c6      	beq.n	800b2da <_vfiprintf_r+0x156>
 800b34c:	9105      	str	r1, [sp, #20]
 800b34e:	e7c4      	b.n	800b2da <_vfiprintf_r+0x156>
 800b350:	fb0c 2101 	mla	r1, ip, r1, r2
 800b354:	4604      	mov	r4, r0
 800b356:	2301      	movs	r3, #1
 800b358:	e7f0      	b.n	800b33c <_vfiprintf_r+0x1b8>
 800b35a:	ab03      	add	r3, sp, #12
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	462a      	mov	r2, r5
 800b360:	4b12      	ldr	r3, [pc, #72]	@ (800b3ac <_vfiprintf_r+0x228>)
 800b362:	a904      	add	r1, sp, #16
 800b364:	4630      	mov	r0, r6
 800b366:	f7fd fc2b 	bl	8008bc0 <_printf_float>
 800b36a:	4607      	mov	r7, r0
 800b36c:	1c78      	adds	r0, r7, #1
 800b36e:	d1d6      	bne.n	800b31e <_vfiprintf_r+0x19a>
 800b370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b372:	07d9      	lsls	r1, r3, #31
 800b374:	d405      	bmi.n	800b382 <_vfiprintf_r+0x1fe>
 800b376:	89ab      	ldrh	r3, [r5, #12]
 800b378:	059a      	lsls	r2, r3, #22
 800b37a:	d402      	bmi.n	800b382 <_vfiprintf_r+0x1fe>
 800b37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b37e:	f7fe f92f 	bl	80095e0 <__retarget_lock_release_recursive>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	065b      	lsls	r3, r3, #25
 800b386:	f53f af1f 	bmi.w	800b1c8 <_vfiprintf_r+0x44>
 800b38a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b38c:	e71e      	b.n	800b1cc <_vfiprintf_r+0x48>
 800b38e:	ab03      	add	r3, sp, #12
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	462a      	mov	r2, r5
 800b394:	4b05      	ldr	r3, [pc, #20]	@ (800b3ac <_vfiprintf_r+0x228>)
 800b396:	a904      	add	r1, sp, #16
 800b398:	4630      	mov	r0, r6
 800b39a:	f7fd fea9 	bl	80090f0 <_printf_i>
 800b39e:	e7e4      	b.n	800b36a <_vfiprintf_r+0x1e6>
 800b3a0:	0801e8b7 	.word	0x0801e8b7
 800b3a4:	0801e8c1 	.word	0x0801e8c1
 800b3a8:	08008bc1 	.word	0x08008bc1
 800b3ac:	0800b15f 	.word	0x0800b15f
 800b3b0:	0801e8bd 	.word	0x0801e8bd

0800b3b4 <_raise_r>:
 800b3b4:	291f      	cmp	r1, #31
 800b3b6:	b538      	push	{r3, r4, r5, lr}
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	d904      	bls.n	800b3c8 <_raise_r+0x14>
 800b3be:	2316      	movs	r3, #22
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b3ca:	b112      	cbz	r2, 800b3d2 <_raise_r+0x1e>
 800b3cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3d0:	b94b      	cbnz	r3, 800b3e6 <_raise_r+0x32>
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f000 f830 	bl	800b438 <_getpid_r>
 800b3d8:	4622      	mov	r2, r4
 800b3da:	4601      	mov	r1, r0
 800b3dc:	4628      	mov	r0, r5
 800b3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3e2:	f000 b817 	b.w	800b414 <_kill_r>
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d00a      	beq.n	800b400 <_raise_r+0x4c>
 800b3ea:	1c59      	adds	r1, r3, #1
 800b3ec:	d103      	bne.n	800b3f6 <_raise_r+0x42>
 800b3ee:	2316      	movs	r3, #22
 800b3f0:	6003      	str	r3, [r0, #0]
 800b3f2:	2001      	movs	r0, #1
 800b3f4:	e7e7      	b.n	800b3c6 <_raise_r+0x12>
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4798      	blx	r3
 800b400:	2000      	movs	r0, #0
 800b402:	e7e0      	b.n	800b3c6 <_raise_r+0x12>

0800b404 <raise>:
 800b404:	4b02      	ldr	r3, [pc, #8]	@ (800b410 <raise+0xc>)
 800b406:	4601      	mov	r1, r0
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	f7ff bfd3 	b.w	800b3b4 <_raise_r>
 800b40e:	bf00      	nop
 800b410:	2000005c 	.word	0x2000005c

0800b414 <_kill_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4d07      	ldr	r5, [pc, #28]	@ (800b434 <_kill_r+0x20>)
 800b418:	2300      	movs	r3, #0
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	4611      	mov	r1, r2
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	f7f6 ff8d 	bl	8002340 <_kill>
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	d102      	bne.n	800b430 <_kill_r+0x1c>
 800b42a:	682b      	ldr	r3, [r5, #0]
 800b42c:	b103      	cbz	r3, 800b430 <_kill_r+0x1c>
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	bd38      	pop	{r3, r4, r5, pc}
 800b432:	bf00      	nop
 800b434:	20001924 	.word	0x20001924

0800b438 <_getpid_r>:
 800b438:	f7f6 bf7a 	b.w	8002330 <_getpid>

0800b43c <sqrtf>:
 800b43c:	b508      	push	{r3, lr}
 800b43e:	ed2d 8b02 	vpush	{d8}
 800b442:	eeb0 8a40 	vmov.f32	s16, s0
 800b446:	f000 f817 	bl	800b478 <__ieee754_sqrtf>
 800b44a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b452:	d60c      	bvs.n	800b46e <sqrtf+0x32>
 800b454:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b474 <sqrtf+0x38>
 800b458:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b460:	d505      	bpl.n	800b46e <sqrtf+0x32>
 800b462:	f7fe f891 	bl	8009588 <__errno>
 800b466:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b46a:	2321      	movs	r3, #33	@ 0x21
 800b46c:	6003      	str	r3, [r0, #0]
 800b46e:	ecbd 8b02 	vpop	{d8}
 800b472:	bd08      	pop	{r3, pc}
 800b474:	00000000 	.word	0x00000000

0800b478 <__ieee754_sqrtf>:
 800b478:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b47c:	4770      	bx	lr
	...

0800b480 <round>:
 800b480:	ec51 0b10 	vmov	r0, r1, d0
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b48a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800b48e:	2a13      	cmp	r2, #19
 800b490:	460b      	mov	r3, r1
 800b492:	4605      	mov	r5, r0
 800b494:	dc1b      	bgt.n	800b4ce <round+0x4e>
 800b496:	2a00      	cmp	r2, #0
 800b498:	da0b      	bge.n	800b4b2 <round+0x32>
 800b49a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b49e:	3201      	adds	r2, #1
 800b4a0:	bf04      	itt	eq
 800b4a2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b4a6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	e015      	b.n	800b4de <round+0x5e>
 800b4b2:	4c15      	ldr	r4, [pc, #84]	@ (800b508 <round+0x88>)
 800b4b4:	4114      	asrs	r4, r2
 800b4b6:	ea04 0601 	and.w	r6, r4, r1
 800b4ba:	4306      	orrs	r6, r0
 800b4bc:	d00f      	beq.n	800b4de <round+0x5e>
 800b4be:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b4c2:	fa41 f202 	asr.w	r2, r1, r2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	ea23 0304 	bic.w	r3, r3, r4
 800b4cc:	e7ed      	b.n	800b4aa <round+0x2a>
 800b4ce:	2a33      	cmp	r2, #51	@ 0x33
 800b4d0:	dd08      	ble.n	800b4e4 <round+0x64>
 800b4d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b4d6:	d102      	bne.n	800b4de <round+0x5e>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	f7f4 feff 	bl	80002dc <__adddf3>
 800b4de:	ec41 0b10 	vmov	d0, r0, r1
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}
 800b4e4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800b4e8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b4ec:	40f4      	lsrs	r4, r6
 800b4ee:	4204      	tst	r4, r0
 800b4f0:	d0f5      	beq.n	800b4de <round+0x5e>
 800b4f2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	408a      	lsls	r2, r1
 800b4fa:	1952      	adds	r2, r2, r5
 800b4fc:	bf28      	it	cs
 800b4fe:	3301      	addcs	r3, #1
 800b500:	ea22 0204 	bic.w	r2, r2, r4
 800b504:	e7d2      	b.n	800b4ac <round+0x2c>
 800b506:	bf00      	nop
 800b508:	000fffff 	.word	0x000fffff

0800b50c <_init>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr

0800b518 <_fini>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr
